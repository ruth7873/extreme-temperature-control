
extreme-temperature-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073f0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007530  08007530  00017530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075d0  080075d0  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080075d0  080075d0  000175d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075d8  080075d8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075d8  080075d8  000175d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075dc  080075dc  000175dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080075e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c9c  20000060  08007640  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cfc  08007640  00021cfc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   000174a4  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a7c  00000000  00000000  00037570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001220  00000000  00000000  0003aff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dc2  00000000  00000000  0003c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d32  00000000  00000000  0003cfd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016923  00000000  00000000  00055d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099b59  00000000  00000000  0006c627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e24  00000000  00000000  00106180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  0010afa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000060 	.word	0x20000060
 800015c:	00000000 	.word	0x00000000
 8000160:	08007518 	.word	0x08007518

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000064 	.word	0x20000064
 800017c:	08007518 	.word	0x08007518

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_d2iz>:
 800091c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000920:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000924:	d215      	bcs.n	8000952 <__aeabi_d2iz+0x36>
 8000926:	d511      	bpl.n	800094c <__aeabi_d2iz+0x30>
 8000928:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800092c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000930:	d912      	bls.n	8000958 <__aeabi_d2iz+0x3c>
 8000932:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800093a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800093e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000942:	fa23 f002 	lsr.w	r0, r3, r2
 8000946:	bf18      	it	ne
 8000948:	4240      	negne	r0, r0
 800094a:	4770      	bx	lr
 800094c:	f04f 0000 	mov.w	r0, #0
 8000950:	4770      	bx	lr
 8000952:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000956:	d105      	bne.n	8000964 <__aeabi_d2iz+0x48>
 8000958:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800095c:	bf08      	it	eq
 800095e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000962:	4770      	bx	lr
 8000964:	f04f 0000 	mov.w	r0, #0
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_frsub>:
 8000a0c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a10:	e002      	b.n	8000a18 <__addsf3>
 8000a12:	bf00      	nop

08000a14 <__aeabi_fsub>:
 8000a14:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a18 <__addsf3>:
 8000a18:	0042      	lsls	r2, r0, #1
 8000a1a:	bf1f      	itttt	ne
 8000a1c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a20:	ea92 0f03 	teqne	r2, r3
 8000a24:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a28:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a2c:	d06a      	beq.n	8000b04 <__addsf3+0xec>
 8000a2e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a32:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a36:	bfc1      	itttt	gt
 8000a38:	18d2      	addgt	r2, r2, r3
 8000a3a:	4041      	eorgt	r1, r0
 8000a3c:	4048      	eorgt	r0, r1
 8000a3e:	4041      	eorgt	r1, r0
 8000a40:	bfb8      	it	lt
 8000a42:	425b      	neglt	r3, r3
 8000a44:	2b19      	cmp	r3, #25
 8000a46:	bf88      	it	hi
 8000a48:	4770      	bxhi	lr
 8000a4a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a62:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a66:	bf18      	it	ne
 8000a68:	4249      	negne	r1, r1
 8000a6a:	ea92 0f03 	teq	r2, r3
 8000a6e:	d03f      	beq.n	8000af0 <__addsf3+0xd8>
 8000a70:	f1a2 0201 	sub.w	r2, r2, #1
 8000a74:	fa41 fc03 	asr.w	ip, r1, r3
 8000a78:	eb10 000c 	adds.w	r0, r0, ip
 8000a7c:	f1c3 0320 	rsb	r3, r3, #32
 8000a80:	fa01 f103 	lsl.w	r1, r1, r3
 8000a84:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a88:	d502      	bpl.n	8000a90 <__addsf3+0x78>
 8000a8a:	4249      	negs	r1, r1
 8000a8c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a90:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a94:	d313      	bcc.n	8000abe <__addsf3+0xa6>
 8000a96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a9a:	d306      	bcc.n	8000aaa <__addsf3+0x92>
 8000a9c:	0840      	lsrs	r0, r0, #1
 8000a9e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aa2:	f102 0201 	add.w	r2, r2, #1
 8000aa6:	2afe      	cmp	r2, #254	; 0xfe
 8000aa8:	d251      	bcs.n	8000b4e <__addsf3+0x136>
 8000aaa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ab2:	bf08      	it	eq
 8000ab4:	f020 0001 	biceq.w	r0, r0, #1
 8000ab8:	ea40 0003 	orr.w	r0, r0, r3
 8000abc:	4770      	bx	lr
 8000abe:	0049      	lsls	r1, r1, #1
 8000ac0:	eb40 0000 	adc.w	r0, r0, r0
 8000ac4:	3a01      	subs	r2, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000acc:	d2ed      	bcs.n	8000aaa <__addsf3+0x92>
 8000ace:	fab0 fc80 	clz	ip, r0
 8000ad2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ad6:	ebb2 020c 	subs.w	r2, r2, ip
 8000ada:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ade:	bfaa      	itet	ge
 8000ae0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ae4:	4252      	neglt	r2, r2
 8000ae6:	4318      	orrge	r0, r3
 8000ae8:	bfbc      	itt	lt
 8000aea:	40d0      	lsrlt	r0, r2
 8000aec:	4318      	orrlt	r0, r3
 8000aee:	4770      	bx	lr
 8000af0:	f092 0f00 	teq	r2, #0
 8000af4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000af8:	bf06      	itte	eq
 8000afa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000afe:	3201      	addeq	r2, #1
 8000b00:	3b01      	subne	r3, #1
 8000b02:	e7b5      	b.n	8000a70 <__addsf3+0x58>
 8000b04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b0c:	bf18      	it	ne
 8000b0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b12:	d021      	beq.n	8000b58 <__addsf3+0x140>
 8000b14:	ea92 0f03 	teq	r2, r3
 8000b18:	d004      	beq.n	8000b24 <__addsf3+0x10c>
 8000b1a:	f092 0f00 	teq	r2, #0
 8000b1e:	bf08      	it	eq
 8000b20:	4608      	moveq	r0, r1
 8000b22:	4770      	bx	lr
 8000b24:	ea90 0f01 	teq	r0, r1
 8000b28:	bf1c      	itt	ne
 8000b2a:	2000      	movne	r0, #0
 8000b2c:	4770      	bxne	lr
 8000b2e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b32:	d104      	bne.n	8000b3e <__addsf3+0x126>
 8000b34:	0040      	lsls	r0, r0, #1
 8000b36:	bf28      	it	cs
 8000b38:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b3c:	4770      	bx	lr
 8000b3e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b42:	bf3c      	itt	cc
 8000b44:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b48:	4770      	bxcc	lr
 8000b4a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b4e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b56:	4770      	bx	lr
 8000b58:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b5c:	bf16      	itet	ne
 8000b5e:	4608      	movne	r0, r1
 8000b60:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b64:	4601      	movne	r1, r0
 8000b66:	0242      	lsls	r2, r0, #9
 8000b68:	bf06      	itte	eq
 8000b6a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b6e:	ea90 0f01 	teqeq	r0, r1
 8000b72:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_ui2f>:
 8000b78:	f04f 0300 	mov.w	r3, #0
 8000b7c:	e004      	b.n	8000b88 <__aeabi_i2f+0x8>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_i2f>:
 8000b80:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b84:	bf48      	it	mi
 8000b86:	4240      	negmi	r0, r0
 8000b88:	ea5f 0c00 	movs.w	ip, r0
 8000b8c:	bf08      	it	eq
 8000b8e:	4770      	bxeq	lr
 8000b90:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b94:	4601      	mov	r1, r0
 8000b96:	f04f 0000 	mov.w	r0, #0
 8000b9a:	e01c      	b.n	8000bd6 <__aeabi_l2f+0x2a>

08000b9c <__aeabi_ul2f>:
 8000b9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba0:	bf08      	it	eq
 8000ba2:	4770      	bxeq	lr
 8000ba4:	f04f 0300 	mov.w	r3, #0
 8000ba8:	e00a      	b.n	8000bc0 <__aeabi_l2f+0x14>
 8000baa:	bf00      	nop

08000bac <__aeabi_l2f>:
 8000bac:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb0:	bf08      	it	eq
 8000bb2:	4770      	bxeq	lr
 8000bb4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__aeabi_l2f+0x14>
 8000bba:	4240      	negs	r0, r0
 8000bbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc0:	ea5f 0c01 	movs.w	ip, r1
 8000bc4:	bf02      	ittt	eq
 8000bc6:	4684      	moveq	ip, r0
 8000bc8:	4601      	moveq	r1, r0
 8000bca:	2000      	moveq	r0, #0
 8000bcc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bda:	fabc f28c 	clz	r2, ip
 8000bde:	3a08      	subs	r2, #8
 8000be0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000be4:	db10      	blt.n	8000c08 <__aeabi_l2f+0x5c>
 8000be6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bea:	4463      	add	r3, ip
 8000bec:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bf0:	f1c2 0220 	rsb	r2, r2, #32
 8000bf4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bf8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bfc:	eb43 0002 	adc.w	r0, r3, r2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f102 0220 	add.w	r2, r2, #32
 8000c0c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c10:	f1c2 0220 	rsb	r2, r2, #32
 8000c14:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c18:	fa21 f202 	lsr.w	r2, r1, r2
 8000c1c:	eb43 0002 	adc.w	r0, r3, r2
 8000c20:	bf08      	it	eq
 8000c22:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_f2iz>:
 8000c28:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c2c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c30:	d30f      	bcc.n	8000c52 <__aeabi_f2iz+0x2a>
 8000c32:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c36:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_f2iz+0x30>
 8000c3c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c44:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c48:	fa23 f002 	lsr.w	r0, r3, r2
 8000c4c:	bf18      	it	ne
 8000c4e:	4240      	negne	r0, r0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr
 8000c58:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c5c:	d101      	bne.n	8000c62 <__aeabi_f2iz+0x3a>
 8000c5e:	0242      	lsls	r2, r0, #9
 8000c60:	d105      	bne.n	8000c6e <__aeabi_f2iz+0x46>
 8000c62:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f04f 0000 	mov.w	r0, #0
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_uldivmod>:
 8000c74:	b953      	cbnz	r3, 8000c8c <__aeabi_uldivmod+0x18>
 8000c76:	b94a      	cbnz	r2, 8000c8c <__aeabi_uldivmod+0x18>
 8000c78:	2900      	cmp	r1, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	2800      	cmpeq	r0, #0
 8000c7e:	bf1c      	itt	ne
 8000c80:	f04f 31ff 	movne.w	r1, #4294967295
 8000c84:	f04f 30ff 	movne.w	r0, #4294967295
 8000c88:	f000 b972 	b.w	8000f70 <__aeabi_idiv0>
 8000c8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c94:	f000 f806 	bl	8000ca4 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4770      	bx	lr

08000ca4 <__udivmoddi4>:
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca8:	9e08      	ldr	r6, [sp, #32]
 8000caa:	460d      	mov	r5, r1
 8000cac:	4604      	mov	r4, r0
 8000cae:	468e      	mov	lr, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14c      	bne.n	8000d4e <__udivmoddi4+0xaa>
 8000cb4:	428a      	cmp	r2, r1
 8000cb6:	4694      	mov	ip, r2
 8000cb8:	d967      	bls.n	8000d8a <__udivmoddi4+0xe6>
 8000cba:	fab2 f382 	clz	r3, r2
 8000cbe:	b153      	cbz	r3, 8000cd6 <__udivmoddi4+0x32>
 8000cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc4:	f1c3 0220 	rsb	r2, r3, #32
 8000cc8:	fa01 fe03 	lsl.w	lr, r1, r3
 8000ccc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd0:	ea42 0e0e 	orr.w	lr, r2, lr
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fbbe f1f7 	udiv	r1, lr, r7
 8000cde:	fa1f f58c 	uxth.w	r5, ip
 8000ce2:	fb07 ee11 	mls	lr, r7, r1, lr
 8000ce6:	fb01 f005 	mul.w	r0, r1, r5
 8000cea:	0c22      	lsrs	r2, r4, #16
 8000cec:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x66>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 3eff 	add.w	lr, r1, #4294967295
 8000cfc:	f080 8119 	bcs.w	8000f32 <__udivmoddi4+0x28e>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8116 	bls.w	8000f32 <__udivmoddi4+0x28e>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d10:	fb07 2210 	mls	r2, r7, r0, r2
 8000d14:	fb00 f505 	mul.w	r5, r0, r5
 8000d18:	b2a4      	uxth	r4, r4
 8000d1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x94>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8104 	bcs.w	8000f36 <__udivmoddi4+0x292>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8101 	bls.w	8000f36 <__udivmoddi4+0x292>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	1b64      	subs	r4, r4, r5
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa6>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xc0>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ea 	beq.w	8000f2c <__udivmoddi4+0x288>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d148      	bne.n	8000dfe <__udivmoddi4+0x15a>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xd2>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2c2>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4696      	mov	lr, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa6>
 8000d84:	e9c6 4e00 	strd	r4, lr, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa6>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xea>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 808e 	bne.w	8000eb4 <__udivmoddi4+0x210>
 8000d98:	1a88      	subs	r0, r1, r2
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	0c17      	lsrs	r7, r2, #16
 8000d9e:	fa1f fe82 	uxth.w	lr, r2
 8000da2:	fbb0 f5f7 	udiv	r5, r0, r7
 8000da6:	fb07 0015 	mls	r0, r7, r5, r0
 8000daa:	0c22      	lsrs	r2, r4, #16
 8000dac:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db0:	fb0e f005 	mul.w	r0, lr, r5
 8000db4:	4290      	cmp	r0, r2
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x126>
 8000db8:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc0:	d202      	bcs.n	8000dc8 <__udivmoddi4+0x124>
 8000dc2:	4290      	cmp	r0, r2
 8000dc4:	f200 80cc 	bhi.w	8000f60 <__udivmoddi4+0x2bc>
 8000dc8:	4645      	mov	r5, r8
 8000dca:	1a12      	subs	r2, r2, r0
 8000dcc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd0:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x150>
 8000de2:	eb1c 0404 	adds.w	r4, ip, r4
 8000de6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14e>
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	f200 80b4 	bhi.w	8000f5a <__udivmoddi4+0x2b6>
 8000df2:	4610      	mov	r0, r2
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfc:	e7a0      	b.n	8000d40 <__udivmoddi4+0x9c>
 8000dfe:	f1c1 0720 	rsb	r7, r1, #32
 8000e02:	408b      	lsls	r3, r1
 8000e04:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e08:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0c:	fa25 fa07 	lsr.w	sl, r5, r7
 8000e10:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e14:	fbba f8f9 	udiv	r8, sl, r9
 8000e18:	408d      	lsls	r5, r1
 8000e1a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e1e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	432b      	orrs	r3, r5
 8000e28:	fa00 f501 	lsl.w	r5, r0, r1
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	0c1c      	lsrs	r4, r3, #16
 8000e32:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000e36:	42a0      	cmp	r0, r4
 8000e38:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3c:	d90b      	bls.n	8000e56 <__udivmoddi4+0x1b2>
 8000e3e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e42:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e46:	f080 8086 	bcs.w	8000f56 <__udivmoddi4+0x2b2>
 8000e4a:	42a0      	cmp	r0, r4
 8000e4c:	f240 8083 	bls.w	8000f56 <__udivmoddi4+0x2b2>
 8000e50:	f1a8 0802 	sub.w	r8, r8, #2
 8000e54:	4464      	add	r4, ip
 8000e56:	1a24      	subs	r4, r4, r0
 8000e58:	b298      	uxth	r0, r3
 8000e5a:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e5e:	fb09 4413 	mls	r4, r9, r3, r4
 8000e62:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e66:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x1dc>
 8000e6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e72:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e76:	d26a      	bcs.n	8000f4e <__udivmoddi4+0x2aa>
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d968      	bls.n	8000f4e <__udivmoddi4+0x2aa>
 8000e7c:	3b02      	subs	r3, #2
 8000e7e:	4464      	add	r4, ip
 8000e80:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000e84:	fba0 9302 	umull	r9, r3, r0, r2
 8000e88:	eba4 040e 	sub.w	r4, r4, lr
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	46c8      	mov	r8, r9
 8000e90:	469e      	mov	lr, r3
 8000e92:	d354      	bcc.n	8000f3e <__udivmoddi4+0x29a>
 8000e94:	d051      	beq.n	8000f3a <__udivmoddi4+0x296>
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d067      	beq.n	8000f6a <__udivmoddi4+0x2c6>
 8000e9a:	ebb5 0308 	subs.w	r3, r5, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	40cb      	lsrs	r3, r1
 8000ea4:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea8:	431f      	orrs	r7, r3
 8000eaa:	40cc      	lsrs	r4, r1
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	e74a      	b.n	8000d4a <__udivmoddi4+0xa6>
 8000eb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb8:	f1c3 0020 	rsb	r0, r3, #32
 8000ebc:	40c1      	lsrs	r1, r0
 8000ebe:	409d      	lsls	r5, r3
 8000ec0:	fa24 f000 	lsr.w	r0, r4, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	4328      	orrs	r0, r5
 8000eca:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ece:	fb07 1115 	mls	r1, r7, r5, r1
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	0c02      	lsrs	r2, r0, #16
 8000ed8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000edc:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee0:	4291      	cmp	r1, r2
 8000ee2:	fa04 f403 	lsl.w	r4, r4, r3
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x256>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d22f      	bcs.n	8000f52 <__udivmoddi4+0x2ae>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d92d      	bls.n	8000f52 <__udivmoddi4+0x2ae>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	fbb2 f1f7 	udiv	r1, r2, r7
 8000f00:	fb07 2211 	mls	r2, r7, r1, r2
 8000f04:	b280      	uxth	r0, r0
 8000f06:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000f0a:	fb01 f20e 	mul.w	r2, r1, lr
 8000f0e:	4282      	cmp	r2, r0
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x280>
 8000f12:	eb1c 0000 	adds.w	r0, ip, r0
 8000f16:	f101 38ff 	add.w	r8, r1, #4294967295
 8000f1a:	d216      	bcs.n	8000f4a <__udivmoddi4+0x2a6>
 8000f1c:	4282      	cmp	r2, r0
 8000f1e:	d914      	bls.n	8000f4a <__udivmoddi4+0x2a6>
 8000f20:	3902      	subs	r1, #2
 8000f22:	4460      	add	r0, ip
 8000f24:	1a80      	subs	r0, r0, r2
 8000f26:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f2a:	e73a      	b.n	8000da2 <__udivmoddi4+0xfe>
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	4630      	mov	r0, r6
 8000f30:	e70b      	b.n	8000d4a <__udivmoddi4+0xa6>
 8000f32:	4671      	mov	r1, lr
 8000f34:	e6e9      	b.n	8000d0a <__udivmoddi4+0x66>
 8000f36:	4610      	mov	r0, r2
 8000f38:	e6fe      	b.n	8000d38 <__udivmoddi4+0x94>
 8000f3a:	454d      	cmp	r5, r9
 8000f3c:	d2ab      	bcs.n	8000e96 <__udivmoddi4+0x1f2>
 8000f3e:	ebb9 0802 	subs.w	r8, r9, r2
 8000f42:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000f46:	3801      	subs	r0, #1
 8000f48:	e7a5      	b.n	8000e96 <__udivmoddi4+0x1f2>
 8000f4a:	4641      	mov	r1, r8
 8000f4c:	e7ea      	b.n	8000f24 <__udivmoddi4+0x280>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	e796      	b.n	8000e80 <__udivmoddi4+0x1dc>
 8000f52:	4645      	mov	r5, r8
 8000f54:	e7d1      	b.n	8000efa <__udivmoddi4+0x256>
 8000f56:	46d0      	mov	r8, sl
 8000f58:	e77d      	b.n	8000e56 <__udivmoddi4+0x1b2>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e749      	b.n	8000df4 <__udivmoddi4+0x150>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e731      	b.n	8000dca <__udivmoddi4+0x126>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xdc>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e6ed      	b.n	8000d4a <__udivmoddi4+0xa6>
 8000f6e:	bf00      	nop

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <init_alarm>:
 */

#include "alarm.h"
#include "main.h"

Status_t init_alarm(){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	init_led();
 8000f78:	f000 f910 	bl	800119c <init_led>
	return xSUCCESS;
 8000f7c:	2301      	movs	r3, #1
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <alarm_temperature>:
void alarm_temperature(){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
	int temp;
	Status_temperature temp_t;
	xSemaphoreTake(temperature_mutex,200);
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <alarm_temperature+0x78>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	21c8      	movs	r1, #200	; 0xc8
 8000f90:	4618      	mov	r0, r3
 8000f92:	f004 f843 	bl	800501c <xQueueSemaphoreTake>
	temp = temperature;
 8000f96:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <alarm_temperature+0x7c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	607b      	str	r3, [r7, #4]
	xSemaphoreGive(temperature_mutex);
 8000f9c:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <alarm_temperature+0x78>)
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	f003 fdc3 	bl	8004b30 <xQueueGenericSend>

	if(temp>TEMP_LED_BLINK)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b46      	cmp	r3, #70	; 0x46
 8000fae:	dd02      	ble.n	8000fb6 <alarm_temperature+0x32>
		temp_t = EXTREME_TEMPERATURE;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	70fb      	strb	r3, [r7, #3]
 8000fb4:	e00d      	b.n	8000fd2 <alarm_temperature+0x4e>
	else if(temp>TEMP_LED_ON)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b32      	cmp	r3, #50	; 0x32
 8000fba:	dd02      	ble.n	8000fc2 <alarm_temperature+0x3e>
		temp_t = HIGH_TEMPERATURE;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	70fb      	strb	r3, [r7, #3]
 8000fc0:	e007      	b.n	8000fd2 <alarm_temperature+0x4e>
	else if(temp>TEMP_LED_OFF)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b1e      	cmp	r3, #30
 8000fc6:	dd02      	ble.n	8000fce <alarm_temperature+0x4a>
		temp_t = OK_TEMPERATURE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	70fb      	strb	r3, [r7, #3]
 8000fcc:	e001      	b.n	8000fd2 <alarm_temperature+0x4e>
	else
		temp_t = LOW_TEMPERATURE;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	70fb      	strb	r3, [r7, #3]

	xSemaphoreTake(temperature_t_mutex,200);
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <alarm_temperature+0x80>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	21c8      	movs	r1, #200	; 0xc8
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f004 f81f 	bl	800501c <xQueueSemaphoreTake>
	temperature_t = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <alarm_temperature+0x84>)
 8000fe4:	701a      	strb	r2, [r3, #0]
	xSemaphoreGive(temperature_t_mutex);
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <alarm_temperature+0x80>)
 8000fe8:	6818      	ldr	r0, [r3, #0]
 8000fea:	2300      	movs	r3, #0
 8000fec:	2200      	movs	r2, #0
 8000fee:	2100      	movs	r1, #0
 8000ff0:	f003 fd9e 	bl	8004b30 <xQueueGenericSend>

}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000084 	.word	0x20000084
 8001000:	2000007c 	.word	0x2000007c
 8001004:	20000088 	.word	0x20000088
 8001008:	20000080 	.word	0x20000080

0800100c <task_alarm>:
void task_alarm(){
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	while(1){
		alarm_temperature();
 8001010:	f7ff ffb8 	bl	8000f84 <alarm_temperature>
		vTaskDelay(100);
 8001014:	2064      	movs	r0, #100	; 0x64
 8001016:	f004 fc41 	bl	800589c <vTaskDelay>
	while(1){
 800101a:	e7f9      	b.n	8001010 <task_alarm+0x4>

0800101c <init_distance_sensor>:
uint32_t pMillis;
uint32_t time_start = 0;
uint32_t time_end = 0;

Status_t init_distance_sensor(TIM_HandleTypeDef * timer)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(timer);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f002 fc29 	bl	800387c <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001030:	4803      	ldr	r0, [pc, #12]	; (8001040 <init_distance_sensor+0x24>)
 8001032:	f001 fdb8 	bl	8002ba6 <HAL_GPIO_WritePin>
}
 8001036:	bf00      	nop
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40020000 	.word	0x40020000
 8001044:	00000000 	.word	0x00000000

08001048 <read_distance>:

int read_distance(TIM_HandleTypeDef *sensorTimer)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TRIG_PORT,TRIG_PIN, GPIO_PIN_SET);
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001056:	483a      	ldr	r0, [pc, #232]	; (8001140 <read_distance+0xf8>)
 8001058:	f001 fda5 	bl	8002ba6 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(sensorTimer,0);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2200      	movs	r2, #0
 8001062:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(sensorTimer)<TIMER_GAP);
 8001064:	bf00      	nop
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106c:	2b09      	cmp	r3, #9
 800106e:	d9fa      	bls.n	8001066 <read_distance+0x1e>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001076:	4832      	ldr	r0, [pc, #200]	; (8001140 <read_distance+0xf8>)
 8001078:	f001 fd95 	bl	8002ba6 <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick();
 800107c:	f000 fdba 	bl	8001bf4 <HAL_GetTick>
 8001080:	4603      	mov	r3, r0
 8001082:	4a30      	ldr	r2, [pc, #192]	; (8001144 <read_distance+0xfc>)
 8001084:	6013      	str	r3, [r2, #0]
	while(!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && pMillis + TIMER_GAP > HAL_GetTick());
 8001086:	bf00      	nop
 8001088:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108c:	482c      	ldr	r0, [pc, #176]	; (8001140 <read_distance+0xf8>)
 800108e:	f001 fd73 	bl	8002b78 <HAL_GPIO_ReadPin>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d108      	bne.n	80010aa <read_distance+0x62>
 8001098:	4b2a      	ldr	r3, [pc, #168]	; (8001144 <read_distance+0xfc>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f103 040a 	add.w	r4, r3, #10
 80010a0:	f000 fda8 	bl	8001bf4 <HAL_GetTick>
 80010a4:	4603      	mov	r3, r0
 80010a6:	429c      	cmp	r4, r3
 80010a8:	d8ee      	bhi.n	8001088 <read_distance+0x40>

	time_start = __HAL_TIM_GET_COUNTER(sensorTimer);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b0:	4a25      	ldr	r2, [pc, #148]	; (8001148 <read_distance+0x100>)
 80010b2:	6013      	str	r3, [r2, #0]

	pMillis = HAL_GetTick();
 80010b4:	f000 fd9e 	bl	8001bf4 <HAL_GetTick>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4a22      	ldr	r2, [pc, #136]	; (8001144 <read_distance+0xfc>)
 80010bc:	6013      	str	r3, [r2, #0]
	while(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) && pMillis + 50 > HAL_GetTick());
 80010be:	bf00      	nop
 80010c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c4:	481e      	ldr	r0, [pc, #120]	; (8001140 <read_distance+0xf8>)
 80010c6:	f001 fd57 	bl	8002b78 <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d008      	beq.n	80010e2 <read_distance+0x9a>
 80010d0:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <read_distance+0xfc>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f103 0432 	add.w	r4, r3, #50	; 0x32
 80010d8:	f000 fd8c 	bl	8001bf4 <HAL_GetTick>
 80010dc:	4603      	mov	r3, r0
 80010de:	429c      	cmp	r4, r3
 80010e0:	d8ee      	bhi.n	80010c0 <read_distance+0x78>

	time_end = __HAL_TIM_GET_COUNTER(sensorTimer);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e8:	4a18      	ldr	r2, [pc, #96]	; (800114c <read_distance+0x104>)
 80010ea:	6013      	str	r3, [r2, #0]

	Distance = (float)(time_end - time_start) * SPEED_OF_SOUND;
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <read_distance+0x104>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <read_distance+0x100>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fd3e 	bl	8000b78 <__aeabi_ui2f>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f9a2 	bl	8000448 <__aeabi_f2d>
 8001104:	a30c      	add	r3, pc, #48	; (adr r3, 8001138 <read_distance+0xf0>)
 8001106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110a:	f7ff f9f5 	bl	80004f8 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4610      	mov	r0, r2
 8001114:	4619      	mov	r1, r3
 8001116:	f7ff fc29 	bl	800096c <__aeabi_d2f>
 800111a:	4603      	mov	r3, r0
 800111c:	4a0c      	ldr	r2, [pc, #48]	; (8001150 <read_distance+0x108>)
 800111e:	6013      	str	r3, [r2, #0]
	return Distance;
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <read_distance+0x108>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fd7f 	bl	8000c28 <__aeabi_f2iz>
 800112a:	4603      	mov	r3, r0
}
 800112c:	4618      	mov	r0, r3
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	bd90      	pop	{r4, r7, pc}
 8001134:	f3af 8000 	nop.w
 8001138:	04816f00 	.word	0x04816f00
 800113c:	3fa18fc5 	.word	0x3fa18fc5
 8001140:	40020000 	.word	0x40020000
 8001144:	20000098 	.word	0x20000098
 8001148:	2000009c 	.word	0x2000009c
 800114c:	200000a0 	.word	0x200000a0
 8001150:	20000094 	.word	0x20000094

08001154 <task_periodic_measure_distance>:
void task_periodic_measure_distance(void*time){
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(distance_mutex,200);
 800115c:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <task_periodic_measure_distance+0x40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	21c8      	movs	r1, #200	; 0xc8
 8001162:	4618      	mov	r0, r3
 8001164:	f003 ff5a 	bl	800501c <xQueueSemaphoreTake>
		distance = read_distance((TIM_HandleTypeDef*)time);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff6d 	bl	8001048 <read_distance>
 800116e:	4603      	mov	r3, r0
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fd05 	bl	8000b80 <__aeabi_i2f>
 8001176:	4603      	mov	r3, r0
 8001178:	4a07      	ldr	r2, [pc, #28]	; (8001198 <task_periodic_measure_distance+0x44>)
 800117a:	6013      	str	r3, [r2, #0]
		xSemaphoreGive(distance_mutex);
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <task_periodic_measure_distance+0x40>)
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	2300      	movs	r3, #0
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	f003 fcd3 	bl	8004b30 <xQueueGenericSend>
		HAL_Delay(100);
 800118a:	2064      	movs	r0, #100	; 0x64
 800118c:	f000 fd3c 	bl	8001c08 <HAL_Delay>
		xSemaphoreTake(distance_mutex,200);
 8001190:	e7e4      	b.n	800115c <task_periodic_measure_distance+0x8>
 8001192:	bf00      	nop
 8001194:	20000090 	.word	0x20000090
 8001198:	2000008c 	.word	0x2000008c

0800119c <init_led>:
 */

#include "led.h"


void init_led(void){
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10 , GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a6:	4802      	ldr	r0, [pc, #8]	; (80011b0 <init_led+0x14>)
 80011a8:	f001 fcfd 	bl	8002ba6 <HAL_GPIO_WritePin>
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40020000 	.word	0x40020000

080011b4 <led_on>:
void led_on(void){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10 , GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011be:	4802      	ldr	r0, [pc, #8]	; (80011c8 <led_on+0x14>)
 80011c0:	f001 fcf1 	bl	8002ba6 <HAL_GPIO_WritePin>
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40020000 	.word	0x40020000

080011cc <led_off>:
void led_off(void){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10 , GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d6:	4802      	ldr	r0, [pc, #8]	; (80011e0 <led_off+0x14>)
 80011d8:	f001 fce5 	bl	8002ba6 <HAL_GPIO_WritePin>
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40020000 	.word	0x40020000

080011e4 <led_blink>:
void led_blink(uint32_t frequency){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	while(1){
		led_on();
 80011ec:	f7ff ffe2 	bl	80011b4 <led_on>
		HAL_Delay(frequency);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 fd09 	bl	8001c08 <HAL_Delay>
		led_off();
 80011f6:	f7ff ffe9 	bl	80011cc <led_off>
		HAL_Delay(frequency);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 fd04 	bl	8001c08 <HAL_Delay>
		led_on();
 8001200:	e7f4      	b.n	80011ec <led_blink+0x8>
	...

08001204 <task_blink_led>:
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	HAL_TIM_PWM_ConfigChannel(htim3, &sConfigOC, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
}

void task_blink_led(){
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	while(1)
	{
		if(led_s==xOn)
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <task_blink_led+0x30>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d102      	bne.n	8001216 <task_blink_led+0x12>
			led_on();
 8001210:	f7ff ffd0 	bl	80011b4 <led_on>
 8001214:	e009      	b.n	800122a <task_blink_led+0x26>
		else if(led_s==xOff)
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <task_blink_led+0x30>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d102      	bne.n	8001224 <task_blink_led+0x20>
			led_off();
 800121e:	f7ff ffd5 	bl	80011cc <led_off>
 8001222:	e002      	b.n	800122a <task_blink_led+0x26>
		else
			led_blink(100);
 8001224:	2064      	movs	r0, #100	; 0x64
 8001226:	f7ff ffdd 	bl	80011e4 <led_blink>
		vTaskDelay(50);
 800122a:	2032      	movs	r0, #50	; 0x32
 800122c:	f004 fb36 	bl	800589c <vTaskDelay>
	{
 8001230:	e7ea      	b.n	8001208 <task_blink_led+0x4>
 8001232:	bf00      	nop
 8001234:	200000a4 	.word	0x200000a4

08001238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800123c:	f000 fcaf 	bl	8001b9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001240:	f000 f844 	bl	80012cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001244:	f000 f9aa 	bl	800159c <MX_GPIO_Init>
  MX_ADC_Init();
 8001248:	f000 f890 	bl	800136c <MX_ADC_Init>
  MX_TIM2_Init();
 800124c:	f000 f8e6 	bl	800141c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001250:	f000 f930 	bl	80014b4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	init_temperature_sensor(&hadc);
 8001254:	4815      	ldr	r0, [pc, #84]	; (80012ac <main+0x74>)
 8001256:	f000 fc17 	bl	8001a88 <init_temperature_sensor>
	init_distance_sensor(&htim2);
 800125a:	4815      	ldr	r0, [pc, #84]	; (80012b0 <main+0x78>)
 800125c:	f7ff fede 	bl	800101c <init_distance_sensor>
	init_led();
 8001260:	f7ff ff9c 	bl	800119c <init_led>
	init_alarm();
 8001264:	f7ff fe86 	bl	8000f74 <init_alarm>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001268:	f003 f8d0 	bl	800440c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
 distance_mutex = xSemaphoreCreateMutex();
 800126c:	2001      	movs	r0, #1
 800126e:	f003 fc47 	bl	8004b00 <xQueueCreateMutex>
 8001272:	4603      	mov	r3, r0
 8001274:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <main+0x7c>)
 8001276:	6013      	str	r3, [r2, #0]
 temperature_mutex = xSemaphoreCreateMutex();
 8001278:	2001      	movs	r0, #1
 800127a:	f003 fc41 	bl	8004b00 <xQueueCreateMutex>
 800127e:	4603      	mov	r3, r0
 8001280:	4a0d      	ldr	r2, [pc, #52]	; (80012b8 <main+0x80>)
 8001282:	6013      	str	r3, [r2, #0]
 temperature_t_mutex = xSemaphoreCreateMutex();
 8001284:	2001      	movs	r0, #1
 8001286:	f003 fc3b 	bl	8004b00 <xQueueCreateMutex>
 800128a:	4603      	mov	r3, r0
 800128c:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <main+0x84>)
 800128e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001290:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <main+0x88>)
 8001292:	2100      	movs	r1, #0
 8001294:	480b      	ldr	r0, [pc, #44]	; (80012c4 <main+0x8c>)
 8001296:	f003 f91f 	bl	80044d8 <osThreadNew>
 800129a:	4603      	mov	r3, r0
 800129c:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <main+0x90>)
 800129e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
create_tasks();
 80012a0:	f000 fb8a 	bl	80019b8 <create_tasks>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012a4:	f003 f8e4 	bl	8004470 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <main+0x70>
 80012aa:	bf00      	nop
 80012ac:	200000b4 	.word	0x200000b4
 80012b0:	20000108 	.word	0x20000108
 80012b4:	200000a8 	.word	0x200000a8
 80012b8:	200000ac 	.word	0x200000ac
 80012bc:	200000b0 	.word	0x200000b0
 80012c0:	08007588 	.word	0x08007588
 80012c4:	08001639 	.word	0x08001639
 80012c8:	20000188 	.word	0x20000188

080012cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b092      	sub	sp, #72	; 0x48
 80012d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	2234      	movs	r2, #52	; 0x34
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f006 f836 	bl	800734c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e0:	463b      	mov	r3, r7
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ee:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <SystemClock_Config+0x9c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80012f6:	4a1c      	ldr	r2, [pc, #112]	; (8001368 <SystemClock_Config+0x9c>)
 80012f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012fc:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80012fe:	2303      	movs	r3, #3
 8001300:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001302:	2301      	movs	r3, #1
 8001304:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001306:	2301      	movs	r3, #1
 8001308:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800130a:	2310      	movs	r3, #16
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130e:	2302      	movs	r3, #2
 8001310:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001316:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001318:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800131c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 800131e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001322:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4618      	mov	r0, r3
 800132a:	f001 fc55 	bl	8002bd8 <HAL_RCC_OscConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001334:	f000 f99a 	bl	800166c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001338:	230f      	movs	r3, #15
 800133a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133c:	2303      	movs	r3, #3
 800133e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800134c:	463b      	mov	r3, r7
 800134e:	2101      	movs	r1, #1
 8001350:	4618      	mov	r0, r3
 8001352:	f001 ff71 	bl	8003238 <HAL_RCC_ClockConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800135c:	f000 f986 	bl	800166c <Error_Handler>
  }
}
 8001360:	bf00      	nop
 8001362:	3748      	adds	r7, #72	; 0x48
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40007000 	.word	0x40007000

0800136c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800137c:	4b25      	ldr	r3, [pc, #148]	; (8001414 <MX_ADC_Init+0xa8>)
 800137e:	4a26      	ldr	r2, [pc, #152]	; (8001418 <MX_ADC_Init+0xac>)
 8001380:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001382:	4b24      	ldr	r3, [pc, #144]	; (8001414 <MX_ADC_Init+0xa8>)
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001388:	4b22      	ldr	r3, [pc, #136]	; (8001414 <MX_ADC_Init+0xa8>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800138e:	4b21      	ldr	r3, [pc, #132]	; (8001414 <MX_ADC_Init+0xa8>)
 8001390:	2200      	movs	r2, #0
 8001392:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001394:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <MX_ADC_Init+0xa8>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800139a:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <MX_ADC_Init+0xa8>)
 800139c:	2200      	movs	r2, #0
 800139e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80013a0:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <MX_ADC_Init+0xa8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <MX_ADC_Init+0xa8>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <MX_ADC_Init+0xa8>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <MX_ADC_Init+0xa8>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <MX_ADC_Init+0xa8>)
 80013bc:	2201      	movs	r2, #1
 80013be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_ADC_Init+0xa8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MX_ADC_Init+0xa8>)
 80013ca:	2210      	movs	r2, #16
 80013cc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_ADC_Init+0xa8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_ADC_Init+0xa8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <MX_ADC_Init+0xa8>)
 80013de:	f000 fc35 	bl	8001c4c <HAL_ADC_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_ADC_Init+0x80>
  {
    Error_Handler();
 80013e8:	f000 f940 	bl	800166c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_384CYCLES;
 80013f4:	2307      	movs	r3, #7
 80013f6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	4619      	mov	r1, r3
 80013fc:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_ADC_Init+0xa8>)
 80013fe:	f000 ff79 	bl	80022f4 <HAL_ADC_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8001408:	f000 f930 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200000b4 	.word	0x200000b4
 8001418:	40012400 	.word	0x40012400

0800141c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	463b      	mov	r3, r7
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001438:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <MX_TIM2_Init+0x94>)
 800143a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800143e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <MX_TIM2_Init+0x94>)
 8001442:	221f      	movs	r2, #31
 8001444:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_TIM2_Init+0x94>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF -1;
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <MX_TIM2_Init+0x94>)
 800144e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001452:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <MX_TIM2_Init+0x94>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <MX_TIM2_Init+0x94>)
 800145c:	2200      	movs	r2, #0
 800145e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001460:	4813      	ldr	r0, [pc, #76]	; (80014b0 <MX_TIM2_Init+0x94>)
 8001462:	f002 f9cb 	bl	80037fc <HAL_TIM_Base_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800146c:	f000 f8fe 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001474:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	4619      	mov	r1, r3
 800147c:	480c      	ldr	r0, [pc, #48]	; (80014b0 <MX_TIM2_Init+0x94>)
 800147e:	f002 fc7f 	bl	8003d80 <HAL_TIM_ConfigClockSource>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001488:	f000 f8f0 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001494:	463b      	mov	r3, r7
 8001496:	4619      	mov	r1, r3
 8001498:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_TIM2_Init+0x94>)
 800149a:	f002 ff59 	bl	8004350 <HAL_TIMEx_MasterConfigSynchronization>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014a4:	f000 f8e2 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000108 	.word	0x20000108

080014b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ba:	f107 0318 	add.w	r3, r7, #24
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d2:	463b      	mov	r3, r7
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014de:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <MX_TIM3_Init+0xe0>)
 80014e0:	4a2d      	ldr	r2, [pc, #180]	; (8001598 <MX_TIM3_Init+0xe4>)
 80014e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80014e4:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <MX_TIM3_Init+0xe0>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ea:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <MX_TIM3_Init+0xe0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 80014f0:	4b28      	ldr	r3, [pc, #160]	; (8001594 <MX_TIM3_Init+0xe0>)
 80014f2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80014f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f8:	4b26      	ldr	r3, [pc, #152]	; (8001594 <MX_TIM3_Init+0xe0>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fe:	4b25      	ldr	r3, [pc, #148]	; (8001594 <MX_TIM3_Init+0xe0>)
 8001500:	2200      	movs	r2, #0
 8001502:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001504:	4823      	ldr	r0, [pc, #140]	; (8001594 <MX_TIM3_Init+0xe0>)
 8001506:	f002 f979 	bl	80037fc <HAL_TIM_Base_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001510:	f000 f8ac 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001518:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800151a:	f107 0318 	add.w	r3, r7, #24
 800151e:	4619      	mov	r1, r3
 8001520:	481c      	ldr	r0, [pc, #112]	; (8001594 <MX_TIM3_Init+0xe0>)
 8001522:	f002 fc2d 	bl	8003d80 <HAL_TIM_ConfigClockSource>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800152c:	f000 f89e 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001530:	4818      	ldr	r0, [pc, #96]	; (8001594 <MX_TIM3_Init+0xe0>)
 8001532:	f002 fa3f 	bl	80039b4 <HAL_TIM_PWM_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800153c:	f000 f896 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	4619      	mov	r1, r3
 800154e:	4811      	ldr	r0, [pc, #68]	; (8001594 <MX_TIM3_Init+0xe0>)
 8001550:	f002 fefe 	bl	8004350 <HAL_TIMEx_MasterConfigSynchronization>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800155a:	f000 f887 	bl	800166c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800155e:	2360      	movs	r3, #96	; 0x60
 8001560:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800156e:	463b      	mov	r3, r7
 8001570:	2200      	movs	r2, #0
 8001572:	4619      	mov	r1, r3
 8001574:	4807      	ldr	r0, [pc, #28]	; (8001594 <MX_TIM3_Init+0xe0>)
 8001576:	f002 fb41 	bl	8003bfc <HAL_TIM_PWM_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001580:	f000 f874 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001584:	4803      	ldr	r0, [pc, #12]	; (8001594 <MX_TIM3_Init+0xe0>)
 8001586:	f000 f92b 	bl	80017e0 <HAL_TIM_MspPostInit>

}
 800158a:	bf00      	nop
 800158c:	3728      	adds	r7, #40	; 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000148 	.word	0x20000148
 8001598:	40000400 	.word	0x40000400

0800159c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015b2:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <MX_GPIO_Init+0x94>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	4a1e      	ldr	r2, [pc, #120]	; (8001630 <MX_GPIO_Init+0x94>)
 80015b8:	f043 0320 	orr.w	r3, r3, #32
 80015bc:	61d3      	str	r3, [r2, #28]
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <MX_GPIO_Init+0x94>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f003 0320 	and.w	r3, r3, #32
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <MX_GPIO_Init+0x94>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a18      	ldr	r2, [pc, #96]	; (8001630 <MX_GPIO_Init+0x94>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <MX_GPIO_Init+0x94>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 80015e2:	2200      	movs	r2, #0
 80015e4:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80015e8:	4812      	ldr	r0, [pc, #72]	; (8001634 <MX_GPIO_Init+0x98>)
 80015ea:	f001 fadc 	bl	8002ba6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80015ee:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80015f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f4:	2301      	movs	r3, #1
 80015f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	4619      	mov	r1, r3
 8001606:	480b      	ldr	r0, [pc, #44]	; (8001634 <MX_GPIO_Init+0x98>)
 8001608:	f001 f926 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800160c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001610:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	4619      	mov	r1, r3
 8001620:	4804      	ldr	r0, [pc, #16]	; (8001634 <MX_GPIO_Init+0x98>)
 8001622:	f001 f919 	bl	8002858 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001626:	bf00      	nop
 8001628:	3720      	adds	r7, #32
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800
 8001634:	40020000 	.word	0x40020000

08001638 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001640:	2001      	movs	r0, #1
 8001642:	f002 fff3 	bl	800462c <osDelay>
 8001646:	e7fb      	b.n	8001640 <StartDefaultTask+0x8>

08001648 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d101      	bne.n	800165e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800165a:	f000 fab9 	bl	8001bd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40001000 	.word	0x40001000

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001674:	e7fe      	b.n	8001674 <Error_Handler+0x8>
	...

08001678 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800167e:	4b17      	ldr	r3, [pc, #92]	; (80016dc <HAL_MspInit+0x64>)
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	4a16      	ldr	r2, [pc, #88]	; (80016dc <HAL_MspInit+0x64>)
 8001684:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001688:	6253      	str	r3, [r2, #36]	; 0x24
 800168a:	4b14      	ldr	r3, [pc, #80]	; (80016dc <HAL_MspInit+0x64>)
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <HAL_MspInit+0x64>)
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	4a10      	ldr	r2, [pc, #64]	; (80016dc <HAL_MspInit+0x64>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6213      	str	r3, [r2, #32]
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_MspInit+0x64>)
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_MspInit+0x64>)
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <HAL_MspInit+0x64>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b8:	6253      	str	r3, [r2, #36]	; 0x24
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_MspInit+0x64>)
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	210f      	movs	r1, #15
 80016ca:	f06f 0001 	mvn.w	r0, #1
 80016ce:	f001 f898 	bl	8002802 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800

080016e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a19      	ldr	r2, [pc, #100]	; (8001764 <HAL_ADC_MspInit+0x84>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d12b      	bne.n	800175a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001702:	4b19      	ldr	r3, [pc, #100]	; (8001768 <HAL_ADC_MspInit+0x88>)
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	4a18      	ldr	r2, [pc, #96]	; (8001768 <HAL_ADC_MspInit+0x88>)
 8001708:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800170c:	6213      	str	r3, [r2, #32]
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <HAL_ADC_MspInit+0x88>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <HAL_ADC_MspInit+0x88>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a12      	ldr	r2, [pc, #72]	; (8001768 <HAL_ADC_MspInit+0x88>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	61d3      	str	r3, [r2, #28]
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <HAL_ADC_MspInit+0x88>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001732:	2301      	movs	r3, #1
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001736:	2303      	movs	r3, #3
 8001738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	4809      	ldr	r0, [pc, #36]	; (800176c <HAL_ADC_MspInit+0x8c>)
 8001746:	f001 f887 	bl	8002858 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2105      	movs	r1, #5
 800174e:	2012      	movs	r0, #18
 8001750:	f001 f857 	bl	8002802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001754:	2012      	movs	r0, #18
 8001756:	f001 f870 	bl	800283a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800175a:	bf00      	nop
 800175c:	3728      	adds	r7, #40	; 0x28
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40012400 	.word	0x40012400
 8001768:	40023800 	.word	0x40023800
 800176c:	40020000 	.word	0x40020000

08001770 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001780:	d114      	bne.n	80017ac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_TIM_Base_MspInit+0x68>)
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	4a14      	ldr	r2, [pc, #80]	; (80017d8 <HAL_TIM_Base_MspInit+0x68>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6253      	str	r3, [r2, #36]	; 0x24
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_TIM_Base_MspInit+0x68>)
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2105      	movs	r1, #5
 800179e:	201c      	movs	r0, #28
 80017a0:	f001 f82f 	bl	8002802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017a4:	201c      	movs	r0, #28
 80017a6:	f001 f848 	bl	800283a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017aa:	e010      	b.n	80017ce <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <HAL_TIM_Base_MspInit+0x6c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d10b      	bne.n	80017ce <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_TIM_Base_MspInit+0x68>)
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <HAL_TIM_Base_MspInit+0x68>)
 80017bc:	f043 0302 	orr.w	r3, r3, #2
 80017c0:	6253      	str	r3, [r2, #36]	; 0x24
 80017c2:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_TIM_Base_MspInit+0x68>)
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40000400 	.word	0x40000400

080017e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a11      	ldr	r2, [pc, #68]	; (8001844 <HAL_TIM_MspPostInit+0x64>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d11b      	bne.n	800183a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_TIM_MspPostInit+0x68>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	4a10      	ldr	r2, [pc, #64]	; (8001848 <HAL_TIM_MspPostInit+0x68>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	61d3      	str	r3, [r2, #28]
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <HAL_TIM_MspPostInit+0x68>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800181a:	2340      	movs	r3, #64	; 0x40
 800181c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800182a:	2302      	movs	r3, #2
 800182c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	; (800184c <HAL_TIM_MspPostInit+0x6c>)
 8001836:	f001 f80f 	bl	8002858 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800183a:	bf00      	nop
 800183c:	3720      	adds	r7, #32
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40000400 	.word	0x40000400
 8001848:	40023800 	.word	0x40023800
 800184c:	40020000 	.word	0x40020000

08001850 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08e      	sub	sp, #56	; 0x38
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001866:	4b32      	ldr	r3, [pc, #200]	; (8001930 <HAL_InitTick+0xe0>)
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	4a31      	ldr	r2, [pc, #196]	; (8001930 <HAL_InitTick+0xe0>)
 800186c:	f043 0310 	orr.w	r3, r3, #16
 8001870:	6253      	str	r3, [r2, #36]	; 0x24
 8001872:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <HAL_InitTick+0xe0>)
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	f003 0310 	and.w	r3, r3, #16
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800187e:	f107 0210 	add.w	r2, r7, #16
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f001 ff27 	bl	80036dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001894:	2b00      	cmp	r3, #0
 8001896:	d103      	bne.n	80018a0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001898:	f001 ff0c 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 800189c:	6378      	str	r0, [r7, #52]	; 0x34
 800189e:	e004      	b.n	80018aa <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018a0:	f001 ff08 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 80018a4:	4603      	mov	r3, r0
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ac:	4a21      	ldr	r2, [pc, #132]	; (8001934 <HAL_InitTick+0xe4>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	0c9b      	lsrs	r3, r3, #18
 80018b4:	3b01      	subs	r3, #1
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018b8:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <HAL_InitTick+0xe8>)
 80018ba:	4a20      	ldr	r2, [pc, #128]	; (800193c <HAL_InitTick+0xec>)
 80018bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018be:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <HAL_InitTick+0xe8>)
 80018c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018c4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018c6:	4a1c      	ldr	r2, [pc, #112]	; (8001938 <HAL_InitTick+0xe8>)
 80018c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018cc:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_InitTick+0xe8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d2:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_InitTick+0xe8>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80018d8:	4817      	ldr	r0, [pc, #92]	; (8001938 <HAL_InitTick+0xe8>)
 80018da:	f001 ff8f 	bl	80037fc <HAL_TIM_Base_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80018e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d11b      	bne.n	8001924 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80018ec:	4812      	ldr	r0, [pc, #72]	; (8001938 <HAL_InitTick+0xe8>)
 80018ee:	f002 f80f 	bl	8003910 <HAL_TIM_Base_Start_IT>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80018f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d111      	bne.n	8001924 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001900:	202b      	movs	r0, #43	; 0x2b
 8001902:	f000 ff9a 	bl	800283a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b0f      	cmp	r3, #15
 800190a:	d808      	bhi.n	800191e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 800190c:	2200      	movs	r2, #0
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	202b      	movs	r0, #43	; 0x2b
 8001912:	f000 ff76 	bl	8002802 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <HAL_InitTick+0xf0>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	e002      	b.n	8001924 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001924:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001928:	4618      	mov	r0, r3
 800192a:	3738      	adds	r7, #56	; 0x38
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	431bde83 	.word	0x431bde83
 8001938:	2000018c 	.word	0x2000018c
 800193c:	40001000 	.word	0x40001000
 8001940:	20000004 	.word	0x20000004

08001944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001948:	e7fe      	b.n	8001948 <NMI_Handler+0x4>

0800194a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <HardFault_Handler+0x4>

08001950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <MemManage_Handler+0x4>

08001956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <BusFault_Handler+0x4>

0800195c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <UsageFault_Handler+0x4>

08001962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
	...

08001970 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <ADC1_IRQHandler+0x10>)
 8001976:	f000 fbab 	bl	80020d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200000b4 	.word	0x200000b4

08001984 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <TIM2_IRQHandler+0x10>)
 800198a:	f002 f85b 	bl	8003a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000108 	.word	0x20000108

08001998 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <TIM6_IRQHandler+0x10>)
 800199e:	f002 f851 	bl	8003a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	2000018c 	.word	0x2000018c

080019ac <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <create_tasks>:

#include "task-manager.h"
#include "led.h"
#include "alarm.h"

void create_tasks(TIM_HandleTypeDef *timer, ADC_HandleTypeDef *adc){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
	create_read_distance_task(timer);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f80c 	bl	80019e0 <create_read_distance_task>
	create_measure_temperature_task(adc);
 80019c8:	6838      	ldr	r0, [r7, #0]
 80019ca:	f000 f81f 	bl	8001a0c <create_measure_temperature_task>
	create_alarm_task();
 80019ce:	f000 f833 	bl	8001a38 <create_alarm_task>
	create_led_operate();
 80019d2:	f000 f845 	bl	8001a60 <create_led_operate>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <create_read_distance_task>:
void create_read_distance_task(TIM_HandleTypeDef *timer){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af02      	add	r7, sp, #8
 80019e6:	6078      	str	r0, [r7, #4]
	xTaskCreate(task_periodic_measure_distance, "Read Distance", MIN_QUEUE_DEPTH, timer, READ_DISTANCE_TASK_PRIORITY, NULL);
 80019e8:	2300      	movs	r3, #0
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	2308      	movs	r3, #8
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	220a      	movs	r2, #10
 80019f4:	4903      	ldr	r1, [pc, #12]	; (8001a04 <create_read_distance_task+0x24>)
 80019f6:	4804      	ldr	r0, [pc, #16]	; (8001a08 <create_read_distance_task+0x28>)
 80019f8:	f003 fdfc 	bl	80055f4 <xTaskCreate>
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	0800753c 	.word	0x0800753c
 8001a08:	08001155 	.word	0x08001155

08001a0c <create_measure_temperature_task>:
void create_measure_temperature_task(ADC_HandleTypeDef *adc){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af02      	add	r7, sp, #8
 8001a12:	6078      	str	r0, [r7, #4]
	xTaskCreate(task_measure_temperature, "Read Temp", MIN_QUEUE_DEPTH,	adc, MEASURE_TEMP_TASK_PRIORITY, NULL);
 8001a14:	2300      	movs	r3, #0
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	230a      	movs	r3, #10
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	220a      	movs	r2, #10
 8001a20:	4903      	ldr	r1, [pc, #12]	; (8001a30 <create_measure_temperature_task+0x24>)
 8001a22:	4804      	ldr	r0, [pc, #16]	; (8001a34 <create_measure_temperature_task+0x28>)
 8001a24:	f003 fde6 	bl	80055f4 <xTaskCreate>
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	0800754c 	.word	0x0800754c
 8001a34:	08001b11 	.word	0x08001b11

08001a38 <create_alarm_task>:
void create_alarm_task(){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af02      	add	r7, sp, #8
	xTaskCreate(task_alarm, "Alarm Task", MIN_QUEUE_DEPTH, NULL, ALARM_TASK_PRIORITY, NULL);
 8001a3e:	2300      	movs	r3, #0
 8001a40:	9301      	str	r3, [sp, #4]
 8001a42:	230c      	movs	r3, #12
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	2300      	movs	r3, #0
 8001a48:	220a      	movs	r2, #10
 8001a4a:	4903      	ldr	r1, [pc, #12]	; (8001a58 <create_alarm_task+0x20>)
 8001a4c:	4803      	ldr	r0, [pc, #12]	; (8001a5c <create_alarm_task+0x24>)
 8001a4e:	f003 fdd1 	bl	80055f4 <xTaskCreate>
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	08007558 	.word	0x08007558
 8001a5c:	0800100d 	.word	0x0800100d

08001a60 <create_led_operate>:
void create_led_operate(){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af02      	add	r7, sp, #8
	xTaskCreate(task_blink_led,"Led Operate",MIN_QUEUE_DEPTH,NULL,LED_OPERATE_PRIORITY,NULL);
 8001a66:	2300      	movs	r3, #0
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	230e      	movs	r3, #14
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	220a      	movs	r2, #10
 8001a72:	4903      	ldr	r1, [pc, #12]	; (8001a80 <create_led_operate+0x20>)
 8001a74:	4803      	ldr	r0, [pc, #12]	; (8001a84 <create_led_operate+0x24>)
 8001a76:	f003 fdbd 	bl	80055f4 <xTaskCreate>
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	08007564 	.word	0x08007564
 8001a84:	08001205 	.word	0x08001205

08001a88 <init_temperature_sensor>:

#include "temperature-sensor.h"

uint16_t adc_value;

Status_t init_temperature_sensor(ADC_HandleTypeDef *adc){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(adc);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 fa21 	bl	8001ed8 <HAL_ADC_Start>
	return xSUCCESS;
 8001a96:	2301      	movs	r3, #1
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <read_temperature>:
int read_temperature(ADC_HandleTypeDef* adc){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	HAL_ADC_PollForConversion(adc, 50);
 8001aa8:	2132      	movs	r1, #50	; 0x32
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 fa74 	bl	8001f98 <HAL_ADC_PollForConversion>
	adc_value = HAL_ADC_GetValue(adc);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 fb01 	bl	80020b8 <HAL_ADC_GetValue>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <read_temperature+0x68>)
 8001abc:	801a      	strh	r2, [r3, #0]
	return (adc_value * (VOLOTAGE_SUPPLY / ANALOG_RANGE) )/ MILIVOLT_PER_SECOND;
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <read_temperature+0x68>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fcae 	bl	8000424 <__aeabi_i2d>
 8001ac8:	a30d      	add	r3, pc, #52	; (adr r3, 8001b00 <read_temperature+0x60>)
 8001aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ace:	f7fe fd13 	bl	80004f8 <__aeabi_dmul>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <read_temperature+0x6c>)
 8001ae0:	f7fe fe34 	bl	800074c <__aeabi_ddiv>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f7fe ff16 	bl	800091c <__aeabi_d2iz>
 8001af0:	4603      	mov	r3, r0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	f3af 8000 	nop.w
 8001b00:	00000000 	.word	0x00000000
 8001b04:	3fe9c800 	.word	0x3fe9c800
 8001b08:	200001d4 	.word	0x200001d4
 8001b0c:	40240000 	.word	0x40240000

08001b10 <task_measure_temperature>:
void task_measure_temperature(void* adc){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	ADC_HandleTypeDef* hadc = (ADC_HandleTypeDef*)adc;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	60fb      	str	r3, [r7, #12]
	while(1){
		xSemaphoreTake(temperature_mutex,200);
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <task_measure_temperature+0x3c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	21c8      	movs	r1, #200	; 0xc8
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 fa7a 	bl	800501c <xQueueSemaphoreTake>
		temperature	= read_temperature(hadc);
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f7ff ffb9 	bl	8001aa0 <read_temperature>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <task_measure_temperature+0x40>)
 8001b32:	6013      	str	r3, [r2, #0]
		xSemaphoreGive(temperature_mutex);
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <task_measure_temperature+0x3c>)
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	f002 fff7 	bl	8004b30 <xQueueGenericSend>
		HAL_Delay(100);
 8001b42:	2064      	movs	r0, #100	; 0x64
 8001b44:	f000 f860 	bl	8001c08 <HAL_Delay>
		xSemaphoreTake(temperature_mutex,200);
 8001b48:	e7e8      	b.n	8001b1c <task_measure_temperature+0xc>
 8001b4a:	bf00      	nop
 8001b4c:	200001d0 	.word	0x200001d0
 8001b50:	200001cc 	.word	0x200001cc

08001b54 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b54:	f7ff ff2a 	bl	80019ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b58:	480b      	ldr	r0, [pc, #44]	; (8001b88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b5a:	490c      	ldr	r1, [pc, #48]	; (8001b8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b5c:	4a0c      	ldr	r2, [pc, #48]	; (8001b90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6e:	4a09      	ldr	r2, [pc, #36]	; (8001b94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b70:	4c09      	ldr	r4, [pc, #36]	; (8001b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b7e:	f005 fc43 	bl	8007408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b82:	f7ff fb59 	bl	8001238 <main>
  bx lr
 8001b86:	4770      	bx	lr
  ldr r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b8c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001b90:	080075e0 	.word	0x080075e0
  ldr r2, =_sbss
 8001b94:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001b98:	20001cfc 	.word	0x20001cfc

08001b9c <COMP_ACQ_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <COMP_ACQ_IRQHandler>

08001b9e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f000 fe1f 	bl	80027ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bae:	200f      	movs	r0, #15
 8001bb0:	f7ff fe4e 	bl	8001850 <HAL_InitTick>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d002      	beq.n	8001bc0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	71fb      	strb	r3, [r7, #7]
 8001bbe:	e001      	b.n	8001bc4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bc0:	f7ff fd5a 	bl	8001678 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_IncTick+0x1c>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_IncTick+0x20>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4413      	add	r3, r2
 8001bde:	4a03      	ldr	r2, [pc, #12]	; (8001bec <HAL_IncTick+0x1c>)
 8001be0:	6013      	str	r3, [r2, #0]
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	200001d8 	.word	0x200001d8
 8001bf0:	20000008 	.word	0x20000008

08001bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf8:	4b02      	ldr	r3, [pc, #8]	; (8001c04 <HAL_GetTick+0x10>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	200001d8 	.word	0x200001d8

08001c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c10:	f7ff fff0 	bl	8001bf4 <HAL_GetTick>
 8001c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c20:	d004      	beq.n	8001c2c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_Delay+0x40>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4413      	add	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c2c:	bf00      	nop
 8001c2e:	f7ff ffe1 	bl	8001bf4 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d8f7      	bhi.n	8001c2e <HAL_Delay+0x26>
  {
  }
}
 8001c3e:	bf00      	nop
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000008 	.word	0x20000008

08001c4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08e      	sub	sp, #56	; 0x38
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e127      	b.n	8001ebc <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d115      	bne.n	8001ca6 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c88:	4b8e      	ldr	r3, [pc, #568]	; (8001ec4 <HAL_ADC_Init+0x278>)
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	4a8d      	ldr	r2, [pc, #564]	; (8001ec4 <HAL_ADC_Init+0x278>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6213      	str	r3, [r2, #32]
 8001c94:	4b8b      	ldr	r3, [pc, #556]	; (8001ec4 <HAL_ADC_Init+0x278>)
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff fd1d 	bl	80016e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f040 80ff 	bne.w	8001eb2 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cbc:	f023 0302 	bic.w	r3, r3, #2
 8001cc0:	f043 0202 	orr.w	r2, r3, #2
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001cc8:	4b7f      	ldr	r3, [pc, #508]	; (8001ec8 <HAL_ADC_Init+0x27c>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	497c      	ldr	r1, [pc, #496]	; (8001ec8 <HAL_ADC_Init+0x27c>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001ce2:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cea:	4619      	mov	r1, r3
 8001cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cf0:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	fa93 f3a3 	rbit	r3, r3
 8001cf8:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	fab3 f383 	clz	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001d06:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001d0c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d14:	4619      	mov	r1, r3
 8001d16:	2302      	movs	r3, #2
 8001d18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1c:	fa93 f3a3 	rbit	r3, r3
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	fab3 f383 	clz	r3, r3
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001d2e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d32:	4313      	orrs	r3, r2
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d3a:	2b10      	cmp	r3, #16
 8001d3c:	d007      	beq.n	8001d4e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001d46:	4313      	orrs	r3, r2
 8001d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d58:	2b40      	cmp	r3, #64	; 0x40
 8001d5a:	d04f      	beq.n	8001dfc <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d62:	4313      	orrs	r3, r2
 8001d64:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001d6e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6912      	ldr	r2, [r2, #16]
 8001d74:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001d78:	d003      	beq.n	8001d82 <HAL_ADC_Init+0x136>
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6912      	ldr	r2, [r2, #16]
 8001d7e:	2a01      	cmp	r2, #1
 8001d80:	d102      	bne.n	8001d88 <HAL_ADC_Init+0x13c>
 8001d82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d86:	e000      	b.n	8001d8a <HAL_ADC_Init+0x13e>
 8001d88:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001d8a:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d125      	bne.n	8001de8 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d114      	bne.n	8001dd0 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	3b01      	subs	r3, #1
 8001dac:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001db0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	fa92 f2a2 	rbit	r2, r2
 8001db8:	617a      	str	r2, [r7, #20]
  return result;
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	fab2 f282 	clz	r2, r2
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	4093      	lsls	r3, r2
 8001dc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8001dce:	e00b      	b.n	8001de8 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd4:	f043 0220 	orr.w	r2, r3, #32
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de0:	f043 0201 	orr.w	r2, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <HAL_ADC_Init+0x280>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	4b33      	ldr	r3, [pc, #204]	; (8001ed0 <HAL_ADC_Init+0x284>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6812      	ldr	r2, [r2, #0]
 8001e0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e18:	d003      	beq.n	8001e22 <HAL_ADC_Init+0x1d6>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d119      	bne.n	8001e56 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e30:	3b01      	subs	r3, #1
 8001e32:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001e36:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	fa92 f2a2 	rbit	r2, r2
 8001e3e:	60fa      	str	r2, [r7, #12]
  return result;
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	fab2 f282 	clz	r2, r2
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	fa03 f202 	lsl.w	r2, r3, r2
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	631a      	str	r2, [r3, #48]	; 0x30
 8001e54:	e007      	b.n	8001e66 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001e64:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <HAL_ADC_Init+0x288>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d10b      	bne.n	8001e8e <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e80:	f023 0303 	bic.w	r3, r3, #3
 8001e84:	f043 0201 	orr.w	r2, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e8c:	e014      	b.n	8001eb8 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	f023 0312 	bic.w	r3, r3, #18
 8001e96:	f043 0210 	orr.w	r2, r3, #16
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea2:	f043 0201 	orr.w	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001eb0:	e002      	b.n	8001eb8 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001eb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3738      	adds	r7, #56	; 0x38
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40012700 	.word	0x40012700
 8001ecc:	fcfc16ff 	.word	0xfcfc16ff
 8001ed0:	c0fff189 	.word	0xc0fff189
 8001ed4:	bf80fffe 	.word	0xbf80fffe

08001ed8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_ADC_Start+0x1a>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e04e      	b.n	8001f90 <HAL_ADC_Start+0xb8>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fb66 	bl	80025cc <ADC_Enable>
 8001f00:	4603      	mov	r3, r0
 8001f02:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d141      	bne.n	8001f8e <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f12:	f023 0301 	bic.w	r3, r3, #1
 8001f16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f30:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f34:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f48:	d106      	bne.n	8001f58 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f4e:	f023 0206 	bic.w	r2, r3, #6
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	651a      	str	r2, [r3, #80]	; 0x50
 8001f56:	e002      	b.n	8001f5e <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f6e:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d107      	bne.n	8001f8e <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f8c:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb4:	d113      	bne.n	8001fde <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc4:	d10b      	bne.n	8001fde <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	f043 0220 	orr.w	r2, r3, #32
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e068      	b.n	80020b0 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001fde:	f7ff fe09 	bl	8001bf4 <HAL_GetTick>
 8001fe2:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001fe4:	e021      	b.n	800202a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fec:	d01d      	beq.n	800202a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d007      	beq.n	8002004 <HAL_ADC_PollForConversion+0x6c>
 8001ff4:	f7ff fdfe 	bl	8001bf4 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d212      	bcs.n	800202a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10b      	bne.n	800202a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	f043 0204 	orr.w	r2, r3, #4
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e042      	b.n	80020b0 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0d6      	beq.n	8001fe6 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d104      	bne.n	800204a <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0212 	mvn.w	r2, #18
 8002048:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d124      	bne.n	80020ae <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800206a:	2b00      	cmp	r3, #0
 800206c:	d11f      	bne.n	80020ae <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002086:	2b00      	cmp	r3, #0
 8002088:	d111      	bne.n	80020ae <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d105      	bne.n	80020ae <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a6:	f043 0201 	orr.w	r2, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f003 0320 	and.w	r3, r3, #32
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d04c      	beq.n	800218c <HAL_ADC_IRQHandler+0xbc>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d047      	beq.n	800218c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b00      	cmp	r3, #0
 8002106:	d105      	bne.n	8002114 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d12c      	bne.n	800217c <HAL_ADC_IRQHandler+0xac>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002128:	2b00      	cmp	r3, #0
 800212a:	d127      	bne.n	800217c <HAL_ADC_IRQHandler+0xac>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002136:	2b00      	cmp	r3, #0
 8002138:	d006      	beq.n	8002148 <HAL_ADC_IRQHandler+0x78>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002144:	2b00      	cmp	r3, #0
 8002146:	d119      	bne.n	800217c <HAL_ADC_IRQHandler+0xac>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0220 	bic.w	r2, r2, #32
 8002156:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d105      	bne.n	800217c <HAL_ADC_IRQHandler+0xac>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f89e 	bl	80022be <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f06f 0212 	mvn.w	r2, #18
 800218a:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002192:	2b00      	cmp	r3, #0
 8002194:	d05a      	beq.n	800224c <HAL_ADC_IRQHandler+0x17c>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d055      	beq.n	800224c <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d105      	bne.n	80021b8 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d13a      	bne.n	800223c <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d006      	beq.n	80021e2 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d12c      	bne.n	800223c <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d125      	bne.n	800223c <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d11e      	bne.n	800223c <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002204:	2b00      	cmp	r3, #0
 8002206:	d119      	bne.n	800223c <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002216:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222c:	2b00      	cmp	r3, #0
 800222e:	d105      	bne.n	800223c <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002234:	f043 0201 	orr.w	r2, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 fa21 	bl	8002684 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f06f 020c 	mvn.w	r2, #12
 800224a:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002252:	2b00      	cmp	r3, #0
 8002254:	d012      	beq.n	800227c <HAL_ADC_IRQHandler+0x1ac>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00d      	beq.n	800227c <HAL_ADC_IRQHandler+0x1ac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002264:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f82f 	bl	80022d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f06f 0201 	mvn.w	r2, #1
 800227a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if((tmp_cr1 & ADC_IT_OVR) == ADC_IT_OVR)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d017      	beq.n	80022b6 <HAL_ADC_IRQHandler+0x1e6>
  {
    if((tmp_sr & ADC_FLAG_OVR) == ADC_FLAG_OVR)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f003 0320 	and.w	r3, r3, #32
 800228c:	2b00      	cmp	r3, #0
 800228e:	d012      	beq.n	80022b6 <HAL_ADC_IRQHandler+0x1e6>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002294:	f043 0202 	orr.w	r2, r3, #2
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0220 	mvn.w	r2, #32
 80022a4:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f81b 	bl	80022e2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f06f 0220 	mvn.w	r2, #32
 80022b4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x20>
 8002310:	2302      	movs	r3, #2
 8002312:	e14f      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x2c0>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b06      	cmp	r3, #6
 8002322:	d81c      	bhi.n	800235e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	3b05      	subs	r3, #5
 8002336:	221f      	movs	r2, #31
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	4019      	ands	r1, r3
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	3b05      	subs	r3, #5
 8002350:	fa00 f203 	lsl.w	r2, r0, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	641a      	str	r2, [r3, #64]	; 0x40
 800235c:	e07e      	b.n	800245c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b0c      	cmp	r3, #12
 8002364:	d81c      	bhi.n	80023a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	3b23      	subs	r3, #35	; 0x23
 8002378:	221f      	movs	r2, #31
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	4019      	ands	r1, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	3b23      	subs	r3, #35	; 0x23
 8002392:	fa00 f203 	lsl.w	r2, r0, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	63da      	str	r2, [r3, #60]	; 0x3c
 800239e:	e05d      	b.n	800245c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b12      	cmp	r3, #18
 80023a6:	d81c      	bhi.n	80023e2 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	3b41      	subs	r3, #65	; 0x41
 80023ba:	221f      	movs	r2, #31
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	4019      	ands	r1, r3
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	3b41      	subs	r3, #65	; 0x41
 80023d4:	fa00 f203 	lsl.w	r2, r0, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	639a      	str	r2, [r3, #56]	; 0x38
 80023e0:	e03c      	b.n	800245c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b18      	cmp	r3, #24
 80023e8:	d81c      	bhi.n	8002424 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	3b5f      	subs	r3, #95	; 0x5f
 80023fc:	221f      	movs	r2, #31
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	4019      	ands	r1, r3
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	3b5f      	subs	r3, #95	; 0x5f
 8002416:	fa00 f203 	lsl.w	r2, r0, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	635a      	str	r2, [r3, #52]	; 0x34
 8002422:	e01b      	b.n	800245c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	3b7d      	subs	r3, #125	; 0x7d
 8002436:	221f      	movs	r2, #31
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	4019      	ands	r1, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	3b7d      	subs	r3, #125	; 0x7d
 8002450:	fa00 f203 	lsl.w	r2, r0, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b09      	cmp	r3, #9
 8002462:	d81a      	bhi.n	800249a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6959      	ldr	r1, [r3, #20]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4613      	mov	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4413      	add	r3, r2
 8002474:	2207      	movs	r2, #7
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	4019      	ands	r1, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6898      	ldr	r0, [r3, #8]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	4613      	mov	r3, r2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4413      	add	r3, r2
 800248c:	fa00 f203 	lsl.w	r2, r0, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	615a      	str	r2, [r3, #20]
 8002498:	e05d      	b.n	8002556 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b13      	cmp	r3, #19
 80024a0:	d81c      	bhi.n	80024dc <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6919      	ldr	r1, [r3, #16]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	3b1e      	subs	r3, #30
 80024b4:	2207      	movs	r2, #7
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	4019      	ands	r1, r3
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	6898      	ldr	r0, [r3, #8]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	4613      	mov	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	4413      	add	r3, r2
 80024cc:	3b1e      	subs	r3, #30
 80024ce:	fa00 f203 	lsl.w	r2, r0, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	611a      	str	r2, [r3, #16]
 80024da:	e03c      	b.n	8002556 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b1d      	cmp	r3, #29
 80024e2:	d81c      	bhi.n	800251e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68d9      	ldr	r1, [r3, #12]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	4613      	mov	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4413      	add	r3, r2
 80024f4:	3b3c      	subs	r3, #60	; 0x3c
 80024f6:	2207      	movs	r2, #7
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	4019      	ands	r1, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6898      	ldr	r0, [r3, #8]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4613      	mov	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4413      	add	r3, r2
 800250e:	3b3c      	subs	r3, #60	; 0x3c
 8002510:	fa00 f203 	lsl.w	r2, r0, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	60da      	str	r2, [r3, #12]
 800251c:	e01b      	b.n	8002556 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4613      	mov	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	4413      	add	r3, r2
 800252e:	3b5a      	subs	r3, #90	; 0x5a
 8002530:	2207      	movs	r2, #7
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	4019      	ands	r1, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	6898      	ldr	r0, [r3, #8]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4613      	mov	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	4413      	add	r3, r2
 8002548:	3b5a      	subs	r3, #90	; 0x5a
 800254a:	fa00 f203 	lsl.w	r2, r0, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b10      	cmp	r3, #16
 800255c:	d003      	beq.n	8002566 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002562:	2b11      	cmp	r3, #17
 8002564:	d121      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002566:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <HAL_ADC_ConfigChannel+0x2cc>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d11b      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002572:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <HAL_ADC_ConfigChannel+0x2cc>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	4a12      	ldr	r2, [pc, #72]	; (80025c0 <HAL_ADC_ConfigChannel+0x2cc>)
 8002578:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800257c:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b10      	cmp	r3, #16
 8002584:	d111      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002586:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <HAL_ADC_ConfigChannel+0x2d0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a0f      	ldr	r2, [pc, #60]	; (80025c8 <HAL_ADC_ConfigChannel+0x2d4>)
 800258c:	fba2 2303 	umull	r2, r3, r2, r3
 8002590:	0c9a      	lsrs	r2, r3, #18
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800259c:	e002      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f9      	bne.n	800259e <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40012700 	.word	0x40012700
 80025c4:	20000000 	.word	0x20000000
 80025c8:	431bde83 	.word	0x431bde83

080025cc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e6:	2b40      	cmp	r3, #64	; 0x40
 80025e8:	d043      	beq.n	8002672 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0201 	orr.w	r2, r2, #1
 80025f8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80025fa:	4b20      	ldr	r3, [pc, #128]	; (800267c <ADC_Enable+0xb0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a20      	ldr	r2, [pc, #128]	; (8002680 <ADC_Enable+0xb4>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	0c9a      	lsrs	r2, r3, #18
 8002606:	4613      	mov	r3, r2
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	4413      	add	r3, r2
 800260c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800260e:	e002      	b.n	8002616 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	3b01      	subs	r3, #1
 8002614:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f9      	bne.n	8002610 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 800261c:	f7ff faea 	bl	8001bf4 <HAL_GetTick>
 8002620:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002622:	e01f      	b.n	8002664 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002624:	f7ff fae6 	bl	8001bf4 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d918      	bls.n	8002664 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263c:	2b40      	cmp	r3, #64	; 0x40
 800263e:	d011      	beq.n	8002664 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002644:	f043 0210 	orr.w	r2, r3, #16
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002650:	f043 0201 	orr.w	r2, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e007      	b.n	8002674 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266e:	2b40      	cmp	r3, #64	; 0x40
 8002670:	d1d8      	bne.n	8002624 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000000 	.word	0x20000000
 8002680:	431bde83 	.word	0x431bde83

08002684 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr
	...

08002698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <__NVIC_SetPriorityGrouping+0x44>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026b4:	4013      	ands	r3, r2
 80026b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ca:	4a04      	ldr	r2, [pc, #16]	; (80026dc <__NVIC_SetPriorityGrouping+0x44>)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	60d3      	str	r3, [r2, #12]
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <__NVIC_GetPriorityGrouping+0x18>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	f003 0307 	and.w	r3, r3, #7
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	2b00      	cmp	r3, #0
 800270c:	db0b      	blt.n	8002726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	f003 021f 	and.w	r2, r3, #31
 8002714:	4906      	ldr	r1, [pc, #24]	; (8002730 <__NVIC_EnableIRQ+0x34>)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	2001      	movs	r0, #1
 800271e:	fa00 f202 	lsl.w	r2, r0, r2
 8002722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	e000e100 	.word	0xe000e100

08002734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	6039      	str	r1, [r7, #0]
 800273e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002744:	2b00      	cmp	r3, #0
 8002746:	db0a      	blt.n	800275e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	b2da      	uxtb	r2, r3
 800274c:	490c      	ldr	r1, [pc, #48]	; (8002780 <__NVIC_SetPriority+0x4c>)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	0112      	lsls	r2, r2, #4
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	440b      	add	r3, r1
 8002758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800275c:	e00a      	b.n	8002774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	b2da      	uxtb	r2, r3
 8002762:	4908      	ldr	r1, [pc, #32]	; (8002784 <__NVIC_SetPriority+0x50>)
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	3b04      	subs	r3, #4
 800276c:	0112      	lsls	r2, r2, #4
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	440b      	add	r3, r1
 8002772:	761a      	strb	r2, [r3, #24]
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000e100 	.word	0xe000e100
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002788:	b480      	push	{r7}
 800278a:	b089      	sub	sp, #36	; 0x24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f1c3 0307 	rsb	r3, r3, #7
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	bf28      	it	cs
 80027a6:	2304      	movcs	r3, #4
 80027a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3304      	adds	r3, #4
 80027ae:	2b06      	cmp	r3, #6
 80027b0:	d902      	bls.n	80027b8 <NVIC_EncodePriority+0x30>
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3b03      	subs	r3, #3
 80027b6:	e000      	b.n	80027ba <NVIC_EncodePriority+0x32>
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027bc:	f04f 32ff 	mov.w	r2, #4294967295
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43da      	mvns	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	401a      	ands	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027d0:	f04f 31ff 	mov.w	r1, #4294967295
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	fa01 f303 	lsl.w	r3, r1, r3
 80027da:	43d9      	mvns	r1, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e0:	4313      	orrs	r3, r2
         );
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3724      	adds	r7, #36	; 0x24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff ff4f 	bl	8002698 <__NVIC_SetPriorityGrouping>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b086      	sub	sp, #24
 8002806:	af00      	add	r7, sp, #0
 8002808:	4603      	mov	r3, r0
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002814:	f7ff ff64 	bl	80026e0 <__NVIC_GetPriorityGrouping>
 8002818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	6978      	ldr	r0, [r7, #20]
 8002820:	f7ff ffb2 	bl	8002788 <NVIC_EncodePriority>
 8002824:	4602      	mov	r2, r0
 8002826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282a:	4611      	mov	r1, r2
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff81 	bl	8002734 <__NVIC_SetPriority>
}
 8002832:	bf00      	nop
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	4603      	mov	r3, r0
 8002842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff57 	bl	80026fc <__NVIC_EnableIRQ>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800286e:	e160      	b.n	8002b32 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2101      	movs	r1, #1
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	fa01 f303 	lsl.w	r3, r1, r3
 800287c:	4013      	ands	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 8152 	beq.w	8002b2c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	2b01      	cmp	r3, #1
 8002892:	d005      	beq.n	80028a0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800289c:	2b02      	cmp	r3, #2
 800289e:	d130      	bne.n	8002902 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	2203      	movs	r2, #3
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4013      	ands	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80028d6:	2201      	movs	r2, #1
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4013      	ands	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	091b      	lsrs	r3, r3, #4
 80028ec:	f003 0201 	and.w	r2, r3, #1
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b03      	cmp	r3, #3
 800290c:	d017      	beq.n	800293e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	2203      	movs	r2, #3
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4013      	ands	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d123      	bne.n	8002992 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	08da      	lsrs	r2, r3, #3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3208      	adds	r2, #8
 8002952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002956:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	220f      	movs	r2, #15
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4013      	ands	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	691a      	ldr	r2, [r3, #16]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	08da      	lsrs	r2, r3, #3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3208      	adds	r2, #8
 800298c:	6939      	ldr	r1, [r7, #16]
 800298e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	2203      	movs	r2, #3
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4013      	ands	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 0203 	and.w	r2, r3, #3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 80ac 	beq.w	8002b2c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d4:	4b5e      	ldr	r3, [pc, #376]	; (8002b50 <HAL_GPIO_Init+0x2f8>)
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	4a5d      	ldr	r2, [pc, #372]	; (8002b50 <HAL_GPIO_Init+0x2f8>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	6213      	str	r3, [r2, #32]
 80029e0:	4b5b      	ldr	r3, [pc, #364]	; (8002b50 <HAL_GPIO_Init+0x2f8>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80029ec:	4a59      	ldr	r2, [pc, #356]	; (8002b54 <HAL_GPIO_Init+0x2fc>)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	089b      	lsrs	r3, r3, #2
 80029f2:	3302      	adds	r3, #2
 80029f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	220f      	movs	r2, #15
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a51      	ldr	r2, [pc, #324]	; (8002b58 <HAL_GPIO_Init+0x300>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d025      	beq.n	8002a64 <HAL_GPIO_Init+0x20c>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a50      	ldr	r2, [pc, #320]	; (8002b5c <HAL_GPIO_Init+0x304>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d01f      	beq.n	8002a60 <HAL_GPIO_Init+0x208>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a4f      	ldr	r2, [pc, #316]	; (8002b60 <HAL_GPIO_Init+0x308>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d019      	beq.n	8002a5c <HAL_GPIO_Init+0x204>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a4e      	ldr	r2, [pc, #312]	; (8002b64 <HAL_GPIO_Init+0x30c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d013      	beq.n	8002a58 <HAL_GPIO_Init+0x200>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a4d      	ldr	r2, [pc, #308]	; (8002b68 <HAL_GPIO_Init+0x310>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00d      	beq.n	8002a54 <HAL_GPIO_Init+0x1fc>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a4c      	ldr	r2, [pc, #304]	; (8002b6c <HAL_GPIO_Init+0x314>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d007      	beq.n	8002a50 <HAL_GPIO_Init+0x1f8>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a4b      	ldr	r2, [pc, #300]	; (8002b70 <HAL_GPIO_Init+0x318>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d101      	bne.n	8002a4c <HAL_GPIO_Init+0x1f4>
 8002a48:	2306      	movs	r3, #6
 8002a4a:	e00c      	b.n	8002a66 <HAL_GPIO_Init+0x20e>
 8002a4c:	2307      	movs	r3, #7
 8002a4e:	e00a      	b.n	8002a66 <HAL_GPIO_Init+0x20e>
 8002a50:	2305      	movs	r3, #5
 8002a52:	e008      	b.n	8002a66 <HAL_GPIO_Init+0x20e>
 8002a54:	2304      	movs	r3, #4
 8002a56:	e006      	b.n	8002a66 <HAL_GPIO_Init+0x20e>
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e004      	b.n	8002a66 <HAL_GPIO_Init+0x20e>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e002      	b.n	8002a66 <HAL_GPIO_Init+0x20e>
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <HAL_GPIO_Init+0x20e>
 8002a64:	2300      	movs	r3, #0
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	f002 0203 	and.w	r2, r2, #3
 8002a6c:	0092      	lsls	r2, r2, #2
 8002a6e:	4093      	lsls	r3, r2
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a76:	4937      	ldr	r1, [pc, #220]	; (8002b54 <HAL_GPIO_Init+0x2fc>)
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	089b      	lsrs	r3, r3, #2
 8002a7c:	3302      	adds	r3, #2
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a84:	4b3b      	ldr	r3, [pc, #236]	; (8002b74 <HAL_GPIO_Init+0x31c>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002aa8:	4a32      	ldr	r2, [pc, #200]	; (8002b74 <HAL_GPIO_Init+0x31c>)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aae:	4b31      	ldr	r3, [pc, #196]	; (8002b74 <HAL_GPIO_Init+0x31c>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4013      	ands	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ad2:	4a28      	ldr	r2, [pc, #160]	; (8002b74 <HAL_GPIO_Init+0x31c>)
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ad8:	4b26      	ldr	r3, [pc, #152]	; (8002b74 <HAL_GPIO_Init+0x31c>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002afc:	4a1d      	ldr	r2, [pc, #116]	; (8002b74 <HAL_GPIO_Init+0x31c>)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b02:	4b1c      	ldr	r3, [pc, #112]	; (8002b74 <HAL_GPIO_Init+0x31c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b26:	4a13      	ldr	r2, [pc, #76]	; (8002b74 <HAL_GPIO_Init+0x31c>)
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f47f ae97 	bne.w	8002870 <HAL_GPIO_Init+0x18>
  }
}
 8002b42:	bf00      	nop
 8002b44:	bf00      	nop
 8002b46:	371c      	adds	r7, #28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40010000 	.word	0x40010000
 8002b58:	40020000 	.word	0x40020000
 8002b5c:	40020400 	.word	0x40020400
 8002b60:	40020800 	.word	0x40020800
 8002b64:	40020c00 	.word	0x40020c00
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40021400 	.word	0x40021400
 8002b70:	40021800 	.word	0x40021800
 8002b74:	40010400 	.word	0x40010400

08002b78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	887b      	ldrh	r3, [r7, #2]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
 8002b94:	e001      	b.n	8002b9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b96:	2300      	movs	r3, #0
 8002b98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	807b      	strh	r3, [r7, #2]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bb6:	787b      	ldrb	r3, [r7, #1]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bbc:	887a      	ldrh	r2, [r7, #2]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002bc2:	e003      	b.n	8002bcc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002bc4:	887b      	ldrh	r3, [r7, #2]
 8002bc6:	041a      	lsls	r2, r3, #16
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	619a      	str	r2, [r3, #24]
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr
	...

08002bd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e31d      	b.n	8003226 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bea:	4b94      	ldr	r3, [pc, #592]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bf4:	4b91      	ldr	r3, [pc, #580]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfc:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d07b      	beq.n	8002d02 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d006      	beq.n	8002c1e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d10f      	bne.n	8002c36 <HAL_RCC_OscConfig+0x5e>
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1c:	d10b      	bne.n	8002c36 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1e:	4b87      	ldr	r3, [pc, #540]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d06a      	beq.n	8002d00 <HAL_RCC_OscConfig+0x128>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d166      	bne.n	8002d00 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e2f7      	b.n	8003226 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d106      	bne.n	8002c4c <HAL_RCC_OscConfig+0x74>
 8002c3e:	4b7f      	ldr	r3, [pc, #508]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a7e      	ldr	r2, [pc, #504]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	e02d      	b.n	8002ca8 <HAL_RCC_OscConfig+0xd0>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10c      	bne.n	8002c6e <HAL_RCC_OscConfig+0x96>
 8002c54:	4b79      	ldr	r3, [pc, #484]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a78      	ldr	r2, [pc, #480]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	4b76      	ldr	r3, [pc, #472]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a75      	ldr	r2, [pc, #468]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	e01c      	b.n	8002ca8 <HAL_RCC_OscConfig+0xd0>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCC_OscConfig+0xb8>
 8002c76:	4b71      	ldr	r3, [pc, #452]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a70      	ldr	r2, [pc, #448]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	4b6e      	ldr	r3, [pc, #440]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a6d      	ldr	r2, [pc, #436]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	e00b      	b.n	8002ca8 <HAL_RCC_OscConfig+0xd0>
 8002c90:	4b6a      	ldr	r3, [pc, #424]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a69      	ldr	r2, [pc, #420]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	4b67      	ldr	r3, [pc, #412]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a66      	ldr	r2, [pc, #408]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d013      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fe ffa0 	bl	8001bf4 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7fe ff9c 	bl	8001bf4 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e2ad      	b.n	8003226 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cca:	4b5c      	ldr	r3, [pc, #368]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0xe0>
 8002cd6:	e014      	b.n	8002d02 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd8:	f7fe ff8c 	bl	8001bf4 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce0:	f7fe ff88 	bl	8001bf4 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b64      	cmp	r3, #100	; 0x64
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e299      	b.n	8003226 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cf2:	4b52      	ldr	r3, [pc, #328]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x108>
 8002cfe:	e000      	b.n	8002d02 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d05a      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b0c      	cmp	r3, #12
 8002d18:	d119      	bne.n	8002d4e <HAL_RCC_OscConfig+0x176>
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d116      	bne.n	8002d4e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d20:	4b46      	ldr	r3, [pc, #280]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCC_OscConfig+0x160>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d001      	beq.n	8002d38 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e276      	b.n	8003226 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d38:	4b40      	ldr	r3, [pc, #256]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	493d      	ldr	r1, [pc, #244]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4c:	e03a      	b.n	8002dc4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d020      	beq.n	8002d98 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d56:	4b3a      	ldr	r3, [pc, #232]	; (8002e40 <HAL_RCC_OscConfig+0x268>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fe ff4a 	bl	8001bf4 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d64:	f7fe ff46 	bl	8001bf4 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e257      	b.n	8003226 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d76:	4b31      	ldr	r3, [pc, #196]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d82:	4b2e      	ldr	r3, [pc, #184]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	021b      	lsls	r3, r3, #8
 8002d90:	492a      	ldr	r1, [pc, #168]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	604b      	str	r3, [r1, #4]
 8002d96:	e015      	b.n	8002dc4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d98:	4b29      	ldr	r3, [pc, #164]	; (8002e40 <HAL_RCC_OscConfig+0x268>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9e:	f7fe ff29 	bl	8001bf4 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da6:	f7fe ff25 	bl	8001bf4 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e236      	b.n	8003226 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002db8:	4b20      	ldr	r3, [pc, #128]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1f0      	bne.n	8002da6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0310 	and.w	r3, r3, #16
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80b8 	beq.w	8002f42 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d170      	bne.n	8002eba <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dd8:	4b18      	ldr	r3, [pc, #96]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_RCC_OscConfig+0x218>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e21a      	b.n	8003226 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1a      	ldr	r2, [r3, #32]
 8002df4:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d921      	bls.n	8002e44 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fc99 	bl	800373c <RCC_SetFlashLatencyFromMSIRange>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e208      	b.n	8003226 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e14:	4b09      	ldr	r3, [pc, #36]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	4906      	ldr	r1, [pc, #24]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	061b      	lsls	r3, r3, #24
 8002e34:	4901      	ldr	r1, [pc, #4]	; (8002e3c <HAL_RCC_OscConfig+0x264>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	604b      	str	r3, [r1, #4]
 8002e3a:	e020      	b.n	8002e7e <HAL_RCC_OscConfig+0x2a6>
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e44:	4b99      	ldr	r3, [pc, #612]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	4996      	ldr	r1, [pc, #600]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e56:	4b95      	ldr	r3, [pc, #596]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	061b      	lsls	r3, r3, #24
 8002e64:	4991      	ldr	r1, [pc, #580]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 fc64 	bl	800373c <RCC_SetFlashLatencyFromMSIRange>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e1d3      	b.n	8003226 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	0b5b      	lsrs	r3, r3, #13
 8002e84:	3301      	adds	r3, #1
 8002e86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002e8e:	4a87      	ldr	r2, [pc, #540]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002e90:	6892      	ldr	r2, [r2, #8]
 8002e92:	0912      	lsrs	r2, r2, #4
 8002e94:	f002 020f 	and.w	r2, r2, #15
 8002e98:	4985      	ldr	r1, [pc, #532]	; (80030b0 <HAL_RCC_OscConfig+0x4d8>)
 8002e9a:	5c8a      	ldrb	r2, [r1, r2]
 8002e9c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e9e:	4a85      	ldr	r2, [pc, #532]	; (80030b4 <HAL_RCC_OscConfig+0x4dc>)
 8002ea0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ea2:	4b85      	ldr	r3, [pc, #532]	; (80030b8 <HAL_RCC_OscConfig+0x4e0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe fcd2 	bl	8001850 <HAL_InitTick>
 8002eac:	4603      	mov	r3, r0
 8002eae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d045      	beq.n	8002f42 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	e1b5      	b.n	8003226 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d029      	beq.n	8002f16 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ec2:	4b7e      	ldr	r3, [pc, #504]	; (80030bc <HAL_RCC_OscConfig+0x4e4>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fe94 	bl	8001bf4 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ed0:	f7fe fe90 	bl	8001bf4 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e1a1      	b.n	8003226 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ee2:	4b72      	ldr	r3, [pc, #456]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eee:	4b6f      	ldr	r3, [pc, #444]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	496c      	ldr	r1, [pc, #432]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f00:	4b6a      	ldr	r3, [pc, #424]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	061b      	lsls	r3, r3, #24
 8002f0e:	4967      	ldr	r1, [pc, #412]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	604b      	str	r3, [r1, #4]
 8002f14:	e015      	b.n	8002f42 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f16:	4b69      	ldr	r3, [pc, #420]	; (80030bc <HAL_RCC_OscConfig+0x4e4>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7fe fe6a 	bl	8001bf4 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f24:	f7fe fe66 	bl	8001bf4 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e177      	b.n	8003226 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f36:	4b5d      	ldr	r3, [pc, #372]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d030      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d016      	beq.n	8002f84 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f56:	4b5a      	ldr	r3, [pc, #360]	; (80030c0 <HAL_RCC_OscConfig+0x4e8>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5c:	f7fe fe4a 	bl	8001bf4 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f64:	f7fe fe46 	bl	8001bf4 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e157      	b.n	8003226 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f76:	4b4d      	ldr	r3, [pc, #308]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f0      	beq.n	8002f64 <HAL_RCC_OscConfig+0x38c>
 8002f82:	e015      	b.n	8002fb0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f84:	4b4e      	ldr	r3, [pc, #312]	; (80030c0 <HAL_RCC_OscConfig+0x4e8>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8a:	f7fe fe33 	bl	8001bf4 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f92:	f7fe fe2f 	bl	8001bf4 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e140      	b.n	8003226 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fa4:	4b41      	ldr	r3, [pc, #260]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f0      	bne.n	8002f92 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80b5 	beq.w	8003128 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc2:	4b3a      	ldr	r3, [pc, #232]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10d      	bne.n	8002fea <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fce:	4b37      	ldr	r3, [pc, #220]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	4a36      	ldr	r2, [pc, #216]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	6253      	str	r3, [r2, #36]	; 0x24
 8002fda:	4b34      	ldr	r3, [pc, #208]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	60bb      	str	r3, [r7, #8]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fea:	4b36      	ldr	r3, [pc, #216]	; (80030c4 <HAL_RCC_OscConfig+0x4ec>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d118      	bne.n	8003028 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ff6:	4b33      	ldr	r3, [pc, #204]	; (80030c4 <HAL_RCC_OscConfig+0x4ec>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a32      	ldr	r2, [pc, #200]	; (80030c4 <HAL_RCC_OscConfig+0x4ec>)
 8002ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003002:	f7fe fdf7 	bl	8001bf4 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300a:	f7fe fdf3 	bl	8001bf4 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b64      	cmp	r3, #100	; 0x64
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e104      	b.n	8003226 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301c:	4b29      	ldr	r3, [pc, #164]	; (80030c4 <HAL_RCC_OscConfig+0x4ec>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0f0      	beq.n	800300a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d106      	bne.n	800303e <HAL_RCC_OscConfig+0x466>
 8003030:	4b1e      	ldr	r3, [pc, #120]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8003032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003034:	4a1d      	ldr	r2, [pc, #116]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8003036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303a:	6353      	str	r3, [r2, #52]	; 0x34
 800303c:	e02d      	b.n	800309a <HAL_RCC_OscConfig+0x4c2>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10c      	bne.n	8003060 <HAL_RCC_OscConfig+0x488>
 8003046:	4b19      	ldr	r3, [pc, #100]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8003048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304a:	4a18      	ldr	r2, [pc, #96]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 800304c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003050:	6353      	str	r3, [r2, #52]	; 0x34
 8003052:	4b16      	ldr	r3, [pc, #88]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8003054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003056:	4a15      	ldr	r2, [pc, #84]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8003058:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800305c:	6353      	str	r3, [r2, #52]	; 0x34
 800305e:	e01c      	b.n	800309a <HAL_RCC_OscConfig+0x4c2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b05      	cmp	r3, #5
 8003066:	d10c      	bne.n	8003082 <HAL_RCC_OscConfig+0x4aa>
 8003068:	4b10      	ldr	r3, [pc, #64]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 800306a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306c:	4a0f      	ldr	r2, [pc, #60]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 800306e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003072:	6353      	str	r3, [r2, #52]	; 0x34
 8003074:	4b0d      	ldr	r3, [pc, #52]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8003076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003078:	4a0c      	ldr	r2, [pc, #48]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 800307a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307e:	6353      	str	r3, [r2, #52]	; 0x34
 8003080:	e00b      	b.n	800309a <HAL_RCC_OscConfig+0x4c2>
 8003082:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8003084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003086:	4a09      	ldr	r2, [pc, #36]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8003088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800308c:	6353      	str	r3, [r2, #52]	; 0x34
 800308e:	4b07      	ldr	r3, [pc, #28]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8003090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003092:	4a06      	ldr	r2, [pc, #24]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8003094:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003098:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d024      	beq.n	80030ec <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a2:	f7fe fda7 	bl	8001bf4 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030a8:	e019      	b.n	80030de <HAL_RCC_OscConfig+0x506>
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800
 80030b0:	080075b8 	.word	0x080075b8
 80030b4:	20000000 	.word	0x20000000
 80030b8:	20000004 	.word	0x20000004
 80030bc:	42470020 	.word	0x42470020
 80030c0:	42470680 	.word	0x42470680
 80030c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c8:	f7fe fd94 	bl	8001bf4 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e0a3      	b.n	8003226 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030de:	4b54      	ldr	r3, [pc, #336]	; (8003230 <HAL_RCC_OscConfig+0x658>)
 80030e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0ee      	beq.n	80030c8 <HAL_RCC_OscConfig+0x4f0>
 80030ea:	e014      	b.n	8003116 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ec:	f7fe fd82 	bl	8001bf4 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030f2:	e00a      	b.n	800310a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030f4:	f7fe fd7e 	bl	8001bf4 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003102:	4293      	cmp	r3, r2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e08d      	b.n	8003226 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800310a:	4b49      	ldr	r3, [pc, #292]	; (8003230 <HAL_RCC_OscConfig+0x658>)
 800310c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1ee      	bne.n	80030f4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003116:	7ffb      	ldrb	r3, [r7, #31]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d105      	bne.n	8003128 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311c:	4b44      	ldr	r3, [pc, #272]	; (8003230 <HAL_RCC_OscConfig+0x658>)
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	4a43      	ldr	r2, [pc, #268]	; (8003230 <HAL_RCC_OscConfig+0x658>)
 8003122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003126:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	2b00      	cmp	r3, #0
 800312e:	d079      	beq.n	8003224 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2b0c      	cmp	r3, #12
 8003134:	d056      	beq.n	80031e4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	2b02      	cmp	r3, #2
 800313c:	d13b      	bne.n	80031b6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313e:	4b3d      	ldr	r3, [pc, #244]	; (8003234 <HAL_RCC_OscConfig+0x65c>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7fe fd56 	bl	8001bf4 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314c:	f7fe fd52 	bl	8001bf4 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e063      	b.n	8003226 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800315e:	4b34      	ldr	r3, [pc, #208]	; (8003230 <HAL_RCC_OscConfig+0x658>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800316a:	4b31      	ldr	r3, [pc, #196]	; (8003230 <HAL_RCC_OscConfig+0x658>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317a:	4319      	orrs	r1, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	430b      	orrs	r3, r1
 8003182:	492b      	ldr	r1, [pc, #172]	; (8003230 <HAL_RCC_OscConfig+0x658>)
 8003184:	4313      	orrs	r3, r2
 8003186:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003188:	4b2a      	ldr	r3, [pc, #168]	; (8003234 <HAL_RCC_OscConfig+0x65c>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318e:	f7fe fd31 	bl	8001bf4 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003196:	f7fe fd2d 	bl	8001bf4 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e03e      	b.n	8003226 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031a8:	4b21      	ldr	r3, [pc, #132]	; (8003230 <HAL_RCC_OscConfig+0x658>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x5be>
 80031b4:	e036      	b.n	8003224 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b6:	4b1f      	ldr	r3, [pc, #124]	; (8003234 <HAL_RCC_OscConfig+0x65c>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7fe fd1a 	bl	8001bf4 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c4:	f7fe fd16 	bl	8001bf4 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e027      	b.n	8003226 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031d6:	4b16      	ldr	r3, [pc, #88]	; (8003230 <HAL_RCC_OscConfig+0x658>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0x5ec>
 80031e2:	e01f      	b.n	8003224 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e01a      	b.n	8003226 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031f0:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <HAL_RCC_OscConfig+0x658>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003200:	429a      	cmp	r2, r3
 8003202:	d10d      	bne.n	8003220 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d106      	bne.n	8003220 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3720      	adds	r7, #32
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40023800 	.word	0x40023800
 8003234:	42470060 	.word	0x42470060

08003238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e11a      	b.n	8003482 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800324c:	4b8f      	ldr	r3, [pc, #572]	; (800348c <HAL_RCC_ClockConfig+0x254>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d919      	bls.n	800328e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d105      	bne.n	800326c <HAL_RCC_ClockConfig+0x34>
 8003260:	4b8a      	ldr	r3, [pc, #552]	; (800348c <HAL_RCC_ClockConfig+0x254>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a89      	ldr	r2, [pc, #548]	; (800348c <HAL_RCC_ClockConfig+0x254>)
 8003266:	f043 0304 	orr.w	r3, r3, #4
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	4b87      	ldr	r3, [pc, #540]	; (800348c <HAL_RCC_ClockConfig+0x254>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f023 0201 	bic.w	r2, r3, #1
 8003274:	4985      	ldr	r1, [pc, #532]	; (800348c <HAL_RCC_ClockConfig+0x254>)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	4313      	orrs	r3, r2
 800327a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327c:	4b83      	ldr	r3, [pc, #524]	; (800348c <HAL_RCC_ClockConfig+0x254>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d001      	beq.n	800328e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e0f9      	b.n	8003482 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800329a:	4b7d      	ldr	r3, [pc, #500]	; (8003490 <HAL_RCC_ClockConfig+0x258>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	497a      	ldr	r1, [pc, #488]	; (8003490 <HAL_RCC_ClockConfig+0x258>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 808e 	beq.w	80033d6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d107      	bne.n	80032d2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032c2:	4b73      	ldr	r3, [pc, #460]	; (8003490 <HAL_RCC_ClockConfig+0x258>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d121      	bne.n	8003312 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e0d7      	b.n	8003482 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d107      	bne.n	80032ea <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032da:	4b6d      	ldr	r3, [pc, #436]	; (8003490 <HAL_RCC_ClockConfig+0x258>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d115      	bne.n	8003312 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e0cb      	b.n	8003482 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d107      	bne.n	8003302 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032f2:	4b67      	ldr	r3, [pc, #412]	; (8003490 <HAL_RCC_ClockConfig+0x258>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d109      	bne.n	8003312 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e0bf      	b.n	8003482 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003302:	4b63      	ldr	r3, [pc, #396]	; (8003490 <HAL_RCC_ClockConfig+0x258>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e0b7      	b.n	8003482 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003312:	4b5f      	ldr	r3, [pc, #380]	; (8003490 <HAL_RCC_ClockConfig+0x258>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f023 0203 	bic.w	r2, r3, #3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	495c      	ldr	r1, [pc, #368]	; (8003490 <HAL_RCC_ClockConfig+0x258>)
 8003320:	4313      	orrs	r3, r2
 8003322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003324:	f7fe fc66 	bl	8001bf4 <HAL_GetTick>
 8003328:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b02      	cmp	r3, #2
 8003330:	d112      	bne.n	8003358 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003332:	e00a      	b.n	800334a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003334:	f7fe fc5e 	bl	8001bf4 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e09b      	b.n	8003482 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800334a:	4b51      	ldr	r3, [pc, #324]	; (8003490 <HAL_RCC_ClockConfig+0x258>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b08      	cmp	r3, #8
 8003354:	d1ee      	bne.n	8003334 <HAL_RCC_ClockConfig+0xfc>
 8003356:	e03e      	b.n	80033d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b03      	cmp	r3, #3
 800335e:	d112      	bne.n	8003386 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003360:	e00a      	b.n	8003378 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003362:	f7fe fc47 	bl	8001bf4 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003370:	4293      	cmp	r3, r2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e084      	b.n	8003482 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003378:	4b45      	ldr	r3, [pc, #276]	; (8003490 <HAL_RCC_ClockConfig+0x258>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 030c 	and.w	r3, r3, #12
 8003380:	2b0c      	cmp	r3, #12
 8003382:	d1ee      	bne.n	8003362 <HAL_RCC_ClockConfig+0x12a>
 8003384:	e027      	b.n	80033d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d11d      	bne.n	80033ca <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800338e:	e00a      	b.n	80033a6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003390:	f7fe fc30 	bl	8001bf4 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	; 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e06d      	b.n	8003482 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033a6:	4b3a      	ldr	r3, [pc, #232]	; (8003490 <HAL_RCC_ClockConfig+0x258>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d1ee      	bne.n	8003390 <HAL_RCC_ClockConfig+0x158>
 80033b2:	e010      	b.n	80033d6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b4:	f7fe fc1e 	bl	8001bf4 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e05b      	b.n	8003482 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80033ca:	4b31      	ldr	r3, [pc, #196]	; (8003490 <HAL_RCC_ClockConfig+0x258>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1ee      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033d6:	4b2d      	ldr	r3, [pc, #180]	; (800348c <HAL_RCC_ClockConfig+0x254>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d219      	bcs.n	8003418 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d105      	bne.n	80033f6 <HAL_RCC_ClockConfig+0x1be>
 80033ea:	4b28      	ldr	r3, [pc, #160]	; (800348c <HAL_RCC_ClockConfig+0x254>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a27      	ldr	r2, [pc, #156]	; (800348c <HAL_RCC_ClockConfig+0x254>)
 80033f0:	f043 0304 	orr.w	r3, r3, #4
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	4b25      	ldr	r3, [pc, #148]	; (800348c <HAL_RCC_ClockConfig+0x254>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 0201 	bic.w	r2, r3, #1
 80033fe:	4923      	ldr	r1, [pc, #140]	; (800348c <HAL_RCC_ClockConfig+0x254>)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b21      	ldr	r3, [pc, #132]	; (800348c <HAL_RCC_ClockConfig+0x254>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e034      	b.n	8003482 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003424:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <HAL_RCC_ClockConfig+0x258>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4917      	ldr	r1, [pc, #92]	; (8003490 <HAL_RCC_ClockConfig+0x258>)
 8003432:	4313      	orrs	r3, r2
 8003434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003442:	4b13      	ldr	r3, [pc, #76]	; (8003490 <HAL_RCC_ClockConfig+0x258>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	490f      	ldr	r1, [pc, #60]	; (8003490 <HAL_RCC_ClockConfig+0x258>)
 8003452:	4313      	orrs	r3, r2
 8003454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003456:	f000 f823 	bl	80034a0 <HAL_RCC_GetSysClockFreq>
 800345a:	4602      	mov	r2, r0
 800345c:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <HAL_RCC_ClockConfig+0x258>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	490b      	ldr	r1, [pc, #44]	; (8003494 <HAL_RCC_ClockConfig+0x25c>)
 8003468:	5ccb      	ldrb	r3, [r1, r3]
 800346a:	fa22 f303 	lsr.w	r3, r2, r3
 800346e:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <HAL_RCC_ClockConfig+0x260>)
 8003470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003472:	4b0a      	ldr	r3, [pc, #40]	; (800349c <HAL_RCC_ClockConfig+0x264>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe f9ea 	bl	8001850 <HAL_InitTick>
 800347c:	4603      	mov	r3, r0
 800347e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003480:	7afb      	ldrb	r3, [r7, #11]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40023c00 	.word	0x40023c00
 8003490:	40023800 	.word	0x40023800
 8003494:	080075b8 	.word	0x080075b8
 8003498:	20000000 	.word	0x20000000
 800349c:	20000004 	.word	0x20000004

080034a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034a4:	b092      	sub	sp, #72	; 0x48
 80034a6:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80034a8:	4b79      	ldr	r3, [pc, #484]	; (8003690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b0:	f003 030c 	and.w	r3, r3, #12
 80034b4:	2b0c      	cmp	r3, #12
 80034b6:	d00d      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0x34>
 80034b8:	2b0c      	cmp	r3, #12
 80034ba:	f200 80d5 	bhi.w	8003668 <HAL_RCC_GetSysClockFreq+0x1c8>
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d002      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0x28>
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d003      	beq.n	80034ce <HAL_RCC_GetSysClockFreq+0x2e>
 80034c6:	e0cf      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034c8:	4b72      	ldr	r3, [pc, #456]	; (8003694 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80034ca:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80034cc:	e0da      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034ce:	4b72      	ldr	r3, [pc, #456]	; (8003698 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80034d0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80034d2:	e0d7      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80034d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d6:	0c9b      	lsrs	r3, r3, #18
 80034d8:	f003 020f 	and.w	r2, r3, #15
 80034dc:	4b6f      	ldr	r3, [pc, #444]	; (800369c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80034de:	5c9b      	ldrb	r3, [r3, r2]
 80034e0:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80034e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e4:	0d9b      	lsrs	r3, r3, #22
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	3301      	adds	r3, #1
 80034ec:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ee:	4b68      	ldr	r3, [pc, #416]	; (8003690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d05d      	beq.n	80035b6 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80034fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034fc:	2200      	movs	r2, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	4611      	mov	r1, r2
 8003502:	4604      	mov	r4, r0
 8003504:	460d      	mov	r5, r1
 8003506:	4622      	mov	r2, r4
 8003508:	462b      	mov	r3, r5
 800350a:	f04f 0000 	mov.w	r0, #0
 800350e:	f04f 0100 	mov.w	r1, #0
 8003512:	0159      	lsls	r1, r3, #5
 8003514:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003518:	0150      	lsls	r0, r2, #5
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	4621      	mov	r1, r4
 8003520:	1a51      	subs	r1, r2, r1
 8003522:	6139      	str	r1, [r7, #16]
 8003524:	4629      	mov	r1, r5
 8003526:	eb63 0301 	sbc.w	r3, r3, r1
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003538:	4659      	mov	r1, fp
 800353a:	018b      	lsls	r3, r1, #6
 800353c:	4651      	mov	r1, sl
 800353e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003542:	4651      	mov	r1, sl
 8003544:	018a      	lsls	r2, r1, #6
 8003546:	46d4      	mov	ip, sl
 8003548:	ebb2 080c 	subs.w	r8, r2, ip
 800354c:	4659      	mov	r1, fp
 800354e:	eb63 0901 	sbc.w	r9, r3, r1
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800355e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003562:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003566:	4690      	mov	r8, r2
 8003568:	4699      	mov	r9, r3
 800356a:	4623      	mov	r3, r4
 800356c:	eb18 0303 	adds.w	r3, r8, r3
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	462b      	mov	r3, r5
 8003574:	eb49 0303 	adc.w	r3, r9, r3
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003586:	4629      	mov	r1, r5
 8003588:	024b      	lsls	r3, r1, #9
 800358a:	4620      	mov	r0, r4
 800358c:	4629      	mov	r1, r5
 800358e:	4604      	mov	r4, r0
 8003590:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003594:	4601      	mov	r1, r0
 8003596:	024a      	lsls	r2, r1, #9
 8003598:	4610      	mov	r0, r2
 800359a:	4619      	mov	r1, r3
 800359c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359e:	2200      	movs	r2, #0
 80035a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035a8:	f7fd fb64 	bl	8000c74 <__aeabi_uldivmod>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4613      	mov	r3, r2
 80035b2:	647b      	str	r3, [r7, #68]	; 0x44
 80035b4:	e055      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80035b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b8:	2200      	movs	r2, #0
 80035ba:	623b      	str	r3, [r7, #32]
 80035bc:	627a      	str	r2, [r7, #36]	; 0x24
 80035be:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035c2:	4642      	mov	r2, r8
 80035c4:	464b      	mov	r3, r9
 80035c6:	f04f 0000 	mov.w	r0, #0
 80035ca:	f04f 0100 	mov.w	r1, #0
 80035ce:	0159      	lsls	r1, r3, #5
 80035d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d4:	0150      	lsls	r0, r2, #5
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	46c4      	mov	ip, r8
 80035dc:	ebb2 0a0c 	subs.w	sl, r2, ip
 80035e0:	4640      	mov	r0, r8
 80035e2:	4649      	mov	r1, r9
 80035e4:	468c      	mov	ip, r1
 80035e6:	eb63 0b0c 	sbc.w	fp, r3, ip
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035f6:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035fa:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035fe:	ebb2 040a 	subs.w	r4, r2, sl
 8003602:	eb63 050b 	sbc.w	r5, r3, fp
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	00eb      	lsls	r3, r5, #3
 8003610:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003614:	00e2      	lsls	r2, r4, #3
 8003616:	4614      	mov	r4, r2
 8003618:	461d      	mov	r5, r3
 800361a:	4603      	mov	r3, r0
 800361c:	18e3      	adds	r3, r4, r3
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	460b      	mov	r3, r1
 8003622:	eb45 0303 	adc.w	r3, r5, r3
 8003626:	607b      	str	r3, [r7, #4]
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003634:	4629      	mov	r1, r5
 8003636:	028b      	lsls	r3, r1, #10
 8003638:	4620      	mov	r0, r4
 800363a:	4629      	mov	r1, r5
 800363c:	4604      	mov	r4, r0
 800363e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003642:	4601      	mov	r1, r0
 8003644:	028a      	lsls	r2, r1, #10
 8003646:	4610      	mov	r0, r2
 8003648:	4619      	mov	r1, r3
 800364a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364c:	2200      	movs	r2, #0
 800364e:	61bb      	str	r3, [r7, #24]
 8003650:	61fa      	str	r2, [r7, #28]
 8003652:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003656:	f7fd fb0d 	bl	8000c74 <__aeabi_uldivmod>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4613      	mov	r3, r2
 8003660:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8003662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003664:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003666:	e00d      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003668:	4b09      	ldr	r3, [pc, #36]	; (8003690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	0b5b      	lsrs	r3, r3, #13
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003676:	3301      	adds	r3, #1
 8003678:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003682:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003686:	4618      	mov	r0, r3
 8003688:	3748      	adds	r7, #72	; 0x48
 800368a:	46bd      	mov	sp, r7
 800368c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003690:	40023800 	.word	0x40023800
 8003694:	00f42400 	.word	0x00f42400
 8003698:	007a1200 	.word	0x007a1200
 800369c:	080075ac 	.word	0x080075ac

080036a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a4:	4b02      	ldr	r3, [pc, #8]	; (80036b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80036a6:	681b      	ldr	r3, [r3, #0]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr
 80036b0:	20000000 	.word	0x20000000

080036b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036b8:	f7ff fff2 	bl	80036a0 <HAL_RCC_GetHCLKFreq>
 80036bc:	4602      	mov	r2, r0
 80036be:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	0a1b      	lsrs	r3, r3, #8
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	4903      	ldr	r1, [pc, #12]	; (80036d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ca:	5ccb      	ldrb	r3, [r1, r3]
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40023800 	.word	0x40023800
 80036d8:	080075c8 	.word	0x080075c8

080036dc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	220f      	movs	r2, #15
 80036ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036ec:	4b11      	ldr	r3, [pc, #68]	; (8003734 <HAL_RCC_GetClockConfig+0x58>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0203 	and.w	r2, r3, #3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036f8:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <HAL_RCC_GetClockConfig+0x58>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003704:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_RCC_GetClockConfig+0x58>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003710:	4b08      	ldr	r3, [pc, #32]	; (8003734 <HAL_RCC_GetClockConfig+0x58>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	08db      	lsrs	r3, r3, #3
 8003716:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800371e:	4b06      	ldr	r3, [pc, #24]	; (8003738 <HAL_RCC_GetClockConfig+0x5c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0201 	and.w	r2, r3, #1
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	601a      	str	r2, [r3, #0]
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr
 8003734:	40023800 	.word	0x40023800
 8003738:	40023c00 	.word	0x40023c00

0800373c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003744:	2300      	movs	r3, #0
 8003746:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003748:	4b29      	ldr	r3, [pc, #164]	; (80037f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d12c      	bne.n	80037ae <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003754:	4b26      	ldr	r3, [pc, #152]	; (80037f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003760:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	e016      	b.n	800379a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376c:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	4a1f      	ldr	r2, [pc, #124]	; (80037f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003776:	6253      	str	r3, [r2, #36]	; 0x24
 8003778:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800378c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800378e:	4b18      	ldr	r3, [pc, #96]	; (80037f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	4a17      	ldr	r2, [pc, #92]	; (80037f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003798:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80037a0:	d105      	bne.n	80037ae <RCC_SetFlashLatencyFromMSIRange+0x72>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037a8:	d101      	bne.n	80037ae <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80037aa:	2301      	movs	r3, #1
 80037ac:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d105      	bne.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80037b4:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a0f      	ldr	r2, [pc, #60]	; (80037f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037ba:	f043 0304 	orr.w	r3, r3, #4
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f023 0201 	bic.w	r2, r3, #1
 80037c8:	490b      	ldr	r1, [pc, #44]	; (80037f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d001      	beq.n	80037e2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	371c      	adds	r7, #28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800
 80037f4:	40007000 	.word	0x40007000
 80037f8:	40023c00 	.word	0x40023c00

080037fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e031      	b.n	8003872 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fd ffa4 	bl	8001770 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3304      	adds	r3, #4
 8003838:	4619      	mov	r1, r3
 800383a:	4610      	mov	r0, r2
 800383c:	f000 fb8c 	bl	8003f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b01      	cmp	r3, #1
 800388e:	d001      	beq.n	8003894 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e032      	b.n	80038fa <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a4:	d00e      	beq.n	80038c4 <HAL_TIM_Base_Start+0x48>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a16      	ldr	r2, [pc, #88]	; (8003904 <HAL_TIM_Base_Start+0x88>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d009      	beq.n	80038c4 <HAL_TIM_Base_Start+0x48>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a14      	ldr	r2, [pc, #80]	; (8003908 <HAL_TIM_Base_Start+0x8c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d004      	beq.n	80038c4 <HAL_TIM_Base_Start+0x48>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a13      	ldr	r2, [pc, #76]	; (800390c <HAL_TIM_Base_Start+0x90>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d111      	bne.n	80038e8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b06      	cmp	r3, #6
 80038d4:	d010      	beq.n	80038f8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0201 	orr.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e6:	e007      	b.n	80038f8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr
 8003904:	40000400 	.word	0x40000400
 8003908:	40000800 	.word	0x40000800
 800390c:	40010800 	.word	0x40010800

08003910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b01      	cmp	r3, #1
 8003922:	d001      	beq.n	8003928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e03a      	b.n	800399e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003948:	d00e      	beq.n	8003968 <HAL_TIM_Base_Start_IT+0x58>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a16      	ldr	r2, [pc, #88]	; (80039a8 <HAL_TIM_Base_Start_IT+0x98>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d009      	beq.n	8003968 <HAL_TIM_Base_Start_IT+0x58>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a14      	ldr	r2, [pc, #80]	; (80039ac <HAL_TIM_Base_Start_IT+0x9c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d004      	beq.n	8003968 <HAL_TIM_Base_Start_IT+0x58>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a13      	ldr	r2, [pc, #76]	; (80039b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d111      	bne.n	800398c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2b06      	cmp	r3, #6
 8003978:	d010      	beq.n	800399c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0201 	orr.w	r2, r2, #1
 8003988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398a:	e007      	b.n	800399c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0201 	orr.w	r2, r2, #1
 800399a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr
 80039a8:	40000400 	.word	0x40000400
 80039ac:	40000800 	.word	0x40000800
 80039b0:	40010800 	.word	0x40010800

080039b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e031      	b.n	8003a2a <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f829 	bl	8003a32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3304      	adds	r3, #4
 80039f0:	4619      	mov	r1, r3
 80039f2:	4610      	mov	r0, r2
 80039f4:	f000 fab0 	bl	8003f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d122      	bne.n	8003aa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d11b      	bne.n	8003aa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f06f 0202 	mvn.w	r2, #2
 8003a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fa4a 	bl	8003f20 <HAL_TIM_IC_CaptureCallback>
 8003a8c:	e005      	b.n	8003a9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fa3d 	bl	8003f0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 fa4c 	bl	8003f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d122      	bne.n	8003af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d11b      	bne.n	8003af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f06f 0204 	mvn.w	r2, #4
 8003ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fa20 	bl	8003f20 <HAL_TIM_IC_CaptureCallback>
 8003ae0:	e005      	b.n	8003aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fa13 	bl	8003f0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fa22 	bl	8003f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d122      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d11b      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f06f 0208 	mvn.w	r2, #8
 8003b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2204      	movs	r2, #4
 8003b1e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f9f6 	bl	8003f20 <HAL_TIM_IC_CaptureCallback>
 8003b34:	e005      	b.n	8003b42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f9e9 	bl	8003f0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f9f8 	bl	8003f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	2b10      	cmp	r3, #16
 8003b54:	d122      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d11b      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0210 	mvn.w	r2, #16
 8003b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2208      	movs	r2, #8
 8003b72:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f9cc 	bl	8003f20 <HAL_TIM_IC_CaptureCallback>
 8003b88:	e005      	b.n	8003b96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f9bf 	bl	8003f0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f9ce 	bl	8003f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d10e      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d107      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f06f 0201 	mvn.w	r2, #1
 8003bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fd fd40 	bl	8001648 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd2:	2b40      	cmp	r3, #64	; 0x40
 8003bd4:	d10e      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	d107      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f9a8 	bl	8003f44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bf4:	bf00      	nop
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e0ae      	b.n	8003d78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b0c      	cmp	r3, #12
 8003c26:	f200 809f 	bhi.w	8003d68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c2a:	a201      	add	r2, pc, #4	; (adr r2, 8003c30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c30:	08003c65 	.word	0x08003c65
 8003c34:	08003d69 	.word	0x08003d69
 8003c38:	08003d69 	.word	0x08003d69
 8003c3c:	08003d69 	.word	0x08003d69
 8003c40:	08003ca5 	.word	0x08003ca5
 8003c44:	08003d69 	.word	0x08003d69
 8003c48:	08003d69 	.word	0x08003d69
 8003c4c:	08003d69 	.word	0x08003d69
 8003c50:	08003ce7 	.word	0x08003ce7
 8003c54:	08003d69 	.word	0x08003d69
 8003c58:	08003d69 	.word	0x08003d69
 8003c5c:	08003d69 	.word	0x08003d69
 8003c60:	08003d27 	.word	0x08003d27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 f9e4 	bl	8004038 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0208 	orr.w	r2, r2, #8
 8003c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0204 	bic.w	r2, r2, #4
 8003c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6999      	ldr	r1, [r3, #24]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	619a      	str	r2, [r3, #24]
      break;
 8003ca2:	e064      	b.n	8003d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fa00 	bl	80040b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6999      	ldr	r1, [r3, #24]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	021a      	lsls	r2, r3, #8
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	619a      	str	r2, [r3, #24]
      break;
 8003ce4:	e043      	b.n	8003d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fa1d 	bl	800412c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0208 	orr.w	r2, r2, #8
 8003d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0204 	bic.w	r2, r2, #4
 8003d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69d9      	ldr	r1, [r3, #28]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	61da      	str	r2, [r3, #28]
      break;
 8003d24:	e023      	b.n	8003d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fa3a 	bl	80041a6 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69da      	ldr	r2, [r3, #28]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69da      	ldr	r2, [r3, #28]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69d9      	ldr	r1, [r3, #28]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	021a      	lsls	r2, r3, #8
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	61da      	str	r2, [r3, #28]
      break;
 8003d66:	e002      	b.n	8003d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_TIM_ConfigClockSource+0x1c>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e0b4      	b.n	8003f06 <HAL_TIM_ConfigClockSource+0x186>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd4:	d03e      	beq.n	8003e54 <HAL_TIM_ConfigClockSource+0xd4>
 8003dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dda:	f200 8087 	bhi.w	8003eec <HAL_TIM_ConfigClockSource+0x16c>
 8003dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de2:	f000 8086 	beq.w	8003ef2 <HAL_TIM_ConfigClockSource+0x172>
 8003de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dea:	d87f      	bhi.n	8003eec <HAL_TIM_ConfigClockSource+0x16c>
 8003dec:	2b70      	cmp	r3, #112	; 0x70
 8003dee:	d01a      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0xa6>
 8003df0:	2b70      	cmp	r3, #112	; 0x70
 8003df2:	d87b      	bhi.n	8003eec <HAL_TIM_ConfigClockSource+0x16c>
 8003df4:	2b60      	cmp	r3, #96	; 0x60
 8003df6:	d050      	beq.n	8003e9a <HAL_TIM_ConfigClockSource+0x11a>
 8003df8:	2b60      	cmp	r3, #96	; 0x60
 8003dfa:	d877      	bhi.n	8003eec <HAL_TIM_ConfigClockSource+0x16c>
 8003dfc:	2b50      	cmp	r3, #80	; 0x50
 8003dfe:	d03c      	beq.n	8003e7a <HAL_TIM_ConfigClockSource+0xfa>
 8003e00:	2b50      	cmp	r3, #80	; 0x50
 8003e02:	d873      	bhi.n	8003eec <HAL_TIM_ConfigClockSource+0x16c>
 8003e04:	2b40      	cmp	r3, #64	; 0x40
 8003e06:	d058      	beq.n	8003eba <HAL_TIM_ConfigClockSource+0x13a>
 8003e08:	2b40      	cmp	r3, #64	; 0x40
 8003e0a:	d86f      	bhi.n	8003eec <HAL_TIM_ConfigClockSource+0x16c>
 8003e0c:	2b30      	cmp	r3, #48	; 0x30
 8003e0e:	d064      	beq.n	8003eda <HAL_TIM_ConfigClockSource+0x15a>
 8003e10:	2b30      	cmp	r3, #48	; 0x30
 8003e12:	d86b      	bhi.n	8003eec <HAL_TIM_ConfigClockSource+0x16c>
 8003e14:	2b20      	cmp	r3, #32
 8003e16:	d060      	beq.n	8003eda <HAL_TIM_ConfigClockSource+0x15a>
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	d867      	bhi.n	8003eec <HAL_TIM_ConfigClockSource+0x16c>
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d05c      	beq.n	8003eda <HAL_TIM_ConfigClockSource+0x15a>
 8003e20:	2b10      	cmp	r3, #16
 8003e22:	d05a      	beq.n	8003eda <HAL_TIM_ConfigClockSource+0x15a>
 8003e24:	e062      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e36:	f000 fa6b 	bl	8004310 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	609a      	str	r2, [r3, #8]
      break;
 8003e52:	e04f      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e64:	f000 fa54 	bl	8004310 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e76:	609a      	str	r2, [r3, #8]
      break;
 8003e78:	e03c      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e86:	461a      	mov	r2, r3
 8003e88:	f000 f9cb 	bl	8004222 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2150      	movs	r1, #80	; 0x50
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fa22 	bl	80042dc <TIM_ITRx_SetConfig>
      break;
 8003e98:	e02c      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f000 f9e9 	bl	800427e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2160      	movs	r1, #96	; 0x60
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fa12 	bl	80042dc <TIM_ITRx_SetConfig>
      break;
 8003eb8:	e01c      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f000 f9ab 	bl	8004222 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2140      	movs	r1, #64	; 0x40
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fa02 	bl	80042dc <TIM_ITRx_SetConfig>
      break;
 8003ed8:	e00c      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	f000 f9f9 	bl	80042dc <TIM_ITRx_SetConfig>
      break;
 8003eea:	e003      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	73fb      	strb	r3, [r7, #15]
      break;
 8003ef0:	e000      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ef2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr

08003f20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr

08003f32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bc80      	pop	{r7}
 8003f54:	4770      	bx	lr
	...

08003f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f6e:	d00f      	beq.n	8003f90 <TIM_Base_SetConfig+0x38>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a2b      	ldr	r2, [pc, #172]	; (8004020 <TIM_Base_SetConfig+0xc8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00b      	beq.n	8003f90 <TIM_Base_SetConfig+0x38>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a2a      	ldr	r2, [pc, #168]	; (8004024 <TIM_Base_SetConfig+0xcc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d007      	beq.n	8003f90 <TIM_Base_SetConfig+0x38>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a29      	ldr	r2, [pc, #164]	; (8004028 <TIM_Base_SetConfig+0xd0>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d003      	beq.n	8003f90 <TIM_Base_SetConfig+0x38>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a28      	ldr	r2, [pc, #160]	; (800402c <TIM_Base_SetConfig+0xd4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d108      	bne.n	8003fa2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa8:	d017      	beq.n	8003fda <TIM_Base_SetConfig+0x82>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a1c      	ldr	r2, [pc, #112]	; (8004020 <TIM_Base_SetConfig+0xc8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d013      	beq.n	8003fda <TIM_Base_SetConfig+0x82>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a1b      	ldr	r2, [pc, #108]	; (8004024 <TIM_Base_SetConfig+0xcc>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d00f      	beq.n	8003fda <TIM_Base_SetConfig+0x82>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a1a      	ldr	r2, [pc, #104]	; (8004028 <TIM_Base_SetConfig+0xd0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00b      	beq.n	8003fda <TIM_Base_SetConfig+0x82>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a19      	ldr	r2, [pc, #100]	; (800402c <TIM_Base_SetConfig+0xd4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d007      	beq.n	8003fda <TIM_Base_SetConfig+0x82>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a18      	ldr	r2, [pc, #96]	; (8004030 <TIM_Base_SetConfig+0xd8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d003      	beq.n	8003fda <TIM_Base_SetConfig+0x82>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a17      	ldr	r2, [pc, #92]	; (8004034 <TIM_Base_SetConfig+0xdc>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d108      	bne.n	8003fec <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	615a      	str	r2, [r3, #20]
}
 8004016:	bf00      	nop
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr
 8004020:	40000400 	.word	0x40000400
 8004024:	40000800 	.word	0x40000800
 8004028:	40000c00 	.word	0x40000c00
 800402c:	40010800 	.word	0x40010800
 8004030:	40010c00 	.word	0x40010c00
 8004034:	40011000 	.word	0x40011000

08004038 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f023 0201 	bic.w	r2, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0303 	bic.w	r3, r3, #3
 800406e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f023 0302 	bic.w	r3, r3, #2
 8004080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	621a      	str	r2, [r3, #32]
}
 80040a6:	bf00      	nop
 80040a8:	371c      	adds	r7, #28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bc80      	pop	{r7}
 80040ae:	4770      	bx	lr

080040b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	f023 0210 	bic.w	r2, r3, #16
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	021b      	lsls	r3, r3, #8
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f023 0320 	bic.w	r3, r3, #32
 80040fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4313      	orrs	r3, r2
 8004106:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	621a      	str	r2, [r3, #32]
}
 8004122:	bf00      	nop
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr

0800412c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0303 	bic.w	r3, r3, #3
 8004162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	621a      	str	r2, [r3, #32]
}
 800419c:	bf00      	nop
 800419e:	371c      	adds	r7, #28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr

080041a6 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b087      	sub	sp, #28
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041dc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	021b      	lsls	r3, r3, #8
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	031b      	lsls	r3, r3, #12
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	621a      	str	r2, [r3, #32]
}
 8004218:	bf00      	nop
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr

08004222 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004222:	b480      	push	{r7}
 8004224:	b087      	sub	sp, #28
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f023 0201 	bic.w	r2, r3, #1
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800424c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f023 030a 	bic.w	r3, r3, #10
 800425e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	621a      	str	r2, [r3, #32]
}
 8004274:	bf00      	nop
 8004276:	371c      	adds	r7, #28
 8004278:	46bd      	mov	sp, r7
 800427a:	bc80      	pop	{r7}
 800427c:	4770      	bx	lr

0800427e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800427e:	b480      	push	{r7}
 8004280:	b087      	sub	sp, #28
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	f023 0210 	bic.w	r2, r3, #16
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	031b      	lsls	r3, r3, #12
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	621a      	str	r2, [r3, #32]
}
 80042d2:	bf00      	nop
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr

080042dc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f043 0307 	orr.w	r3, r3, #7
 80042fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	609a      	str	r2, [r3, #8]
}
 8004306:	bf00      	nop
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr

08004310 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800432a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	021a      	lsls	r2, r3, #8
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	431a      	orrs	r2, r3
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4313      	orrs	r3, r2
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	4313      	orrs	r3, r2
 800433c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	609a      	str	r2, [r3, #8]
}
 8004344:	bf00      	nop
 8004346:	371c      	adds	r7, #28
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr
	...

08004350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004364:	2302      	movs	r3, #2
 8004366:	e046      	b.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043aa:	d00e      	beq.n	80043ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a13      	ldr	r2, [pc, #76]	; (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d009      	beq.n	80043ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a12      	ldr	r2, [pc, #72]	; (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d004      	beq.n	80043ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a10      	ldr	r2, [pc, #64]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d10c      	bne.n	80043e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr
 8004400:	40000400 	.word	0x40000400
 8004404:	40000800 	.word	0x40000800
 8004408:	40010800 	.word	0x40010800

0800440c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004412:	f3ef 8305 	mrs	r3, IPSR
 8004416:	60bb      	str	r3, [r7, #8]
  return(result);
 8004418:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10f      	bne.n	800443e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800441e:	f3ef 8310 	mrs	r3, PRIMASK
 8004422:	607b      	str	r3, [r7, #4]
  return(result);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d109      	bne.n	800443e <osKernelInitialize+0x32>
 800442a:	4b10      	ldr	r3, [pc, #64]	; (800446c <osKernelInitialize+0x60>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d109      	bne.n	8004446 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004432:	f3ef 8311 	mrs	r3, BASEPRI
 8004436:	603b      	str	r3, [r7, #0]
  return(result);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800443e:	f06f 0305 	mvn.w	r3, #5
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	e00c      	b.n	8004460 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004446:	4b09      	ldr	r3, [pc, #36]	; (800446c <osKernelInitialize+0x60>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d105      	bne.n	800445a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800444e:	4b07      	ldr	r3, [pc, #28]	; (800446c <osKernelInitialize+0x60>)
 8004450:	2201      	movs	r2, #1
 8004452:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	e002      	b.n	8004460 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800445a:	f04f 33ff 	mov.w	r3, #4294967295
 800445e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004460:	68fb      	ldr	r3, [r7, #12]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr
 800446c:	200001dc 	.word	0x200001dc

08004470 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004476:	f3ef 8305 	mrs	r3, IPSR
 800447a:	60bb      	str	r3, [r7, #8]
  return(result);
 800447c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10f      	bne.n	80044a2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004482:	f3ef 8310 	mrs	r3, PRIMASK
 8004486:	607b      	str	r3, [r7, #4]
  return(result);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <osKernelStart+0x32>
 800448e:	4b11      	ldr	r3, [pc, #68]	; (80044d4 <osKernelStart+0x64>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b02      	cmp	r3, #2
 8004494:	d109      	bne.n	80044aa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004496:	f3ef 8311 	mrs	r3, BASEPRI
 800449a:	603b      	str	r3, [r7, #0]
  return(result);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <osKernelStart+0x3a>
    stat = osErrorISR;
 80044a2:	f06f 0305 	mvn.w	r3, #5
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	e00e      	b.n	80044c8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80044aa:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <osKernelStart+0x64>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d107      	bne.n	80044c2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80044b2:	4b08      	ldr	r3, [pc, #32]	; (80044d4 <osKernelStart+0x64>)
 80044b4:	2202      	movs	r2, #2
 80044b6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80044b8:	f001 fa24 	bl	8005904 <vTaskStartScheduler>
      stat = osOK;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	e002      	b.n	80044c8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80044c2:	f04f 33ff 	mov.w	r3, #4294967295
 80044c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80044c8:	68fb      	ldr	r3, [r7, #12]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	200001dc 	.word	0x200001dc

080044d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80044d8:	b580      	push	{r7, lr}
 80044da:	b092      	sub	sp, #72	; 0x48
 80044dc:	af04      	add	r7, sp, #16
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044e8:	f3ef 8305 	mrs	r3, IPSR
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f040 8094 	bne.w	800461e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044f6:	f3ef 8310 	mrs	r3, PRIMASK
 80044fa:	623b      	str	r3, [r7, #32]
  return(result);
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f040 808d 	bne.w	800461e <osThreadNew+0x146>
 8004504:	4b48      	ldr	r3, [pc, #288]	; (8004628 <osThreadNew+0x150>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b02      	cmp	r3, #2
 800450a:	d106      	bne.n	800451a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800450c:	f3ef 8311 	mrs	r3, BASEPRI
 8004510:	61fb      	str	r3, [r7, #28]
  return(result);
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	2b00      	cmp	r3, #0
 8004516:	f040 8082 	bne.w	800461e <osThreadNew+0x146>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d07e      	beq.n	800461e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004524:	2318      	movs	r3, #24
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004528:	2300      	movs	r3, #0
 800452a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800452c:	f107 031b 	add.w	r3, r7, #27
 8004530:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004532:	f04f 33ff 	mov.w	r3, #4294967295
 8004536:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d045      	beq.n	80045ca <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <osThreadNew+0x74>
        name = attr->name;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800455a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455c:	2b00      	cmp	r3, #0
 800455e:	d008      	beq.n	8004572 <osThreadNew+0x9a>
 8004560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004562:	2b38      	cmp	r3, #56	; 0x38
 8004564:	d805      	bhi.n	8004572 <osThreadNew+0x9a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <osThreadNew+0x9e>
        return (NULL);
 8004572:	2300      	movs	r3, #0
 8004574:	e054      	b.n	8004620 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	089b      	lsrs	r3, r3, #2
 8004584:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00e      	beq.n	80045ac <osThreadNew+0xd4>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	2ba7      	cmp	r3, #167	; 0xa7
 8004594:	d90a      	bls.n	80045ac <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800459a:	2b00      	cmp	r3, #0
 800459c:	d006      	beq.n	80045ac <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <osThreadNew+0xd4>
        mem = 1;
 80045a6:	2301      	movs	r3, #1
 80045a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80045aa:	e010      	b.n	80045ce <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10c      	bne.n	80045ce <osThreadNew+0xf6>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d108      	bne.n	80045ce <osThreadNew+0xf6>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d104      	bne.n	80045ce <osThreadNew+0xf6>
          mem = 0;
 80045c4:	2300      	movs	r3, #0
 80045c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80045c8:	e001      	b.n	80045ce <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80045ca:	2300      	movs	r3, #0
 80045cc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80045ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d110      	bne.n	80045f6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045dc:	9202      	str	r2, [sp, #8]
 80045de:	9301      	str	r3, [sp, #4]
 80045e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 ffa6 	bl	800553c <xTaskCreateStatic>
 80045f0:	4603      	mov	r3, r0
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	e013      	b.n	800461e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d110      	bne.n	800461e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fe:	b29a      	uxth	r2, r3
 8004600:	f107 0314 	add.w	r3, r7, #20
 8004604:	9301      	str	r3, [sp, #4]
 8004606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 fff0 	bl	80055f4 <xTaskCreate>
 8004614:	4603      	mov	r3, r0
 8004616:	2b01      	cmp	r3, #1
 8004618:	d001      	beq.n	800461e <osThreadNew+0x146>
          hTask = NULL;
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800461e:	697b      	ldr	r3, [r7, #20]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3738      	adds	r7, #56	; 0x38
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	200001dc 	.word	0x200001dc

0800462c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004634:	f3ef 8305 	mrs	r3, IPSR
 8004638:	613b      	str	r3, [r7, #16]
  return(result);
 800463a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10f      	bne.n	8004660 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004640:	f3ef 8310 	mrs	r3, PRIMASK
 8004644:	60fb      	str	r3, [r7, #12]
  return(result);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d109      	bne.n	8004660 <osDelay+0x34>
 800464c:	4b0d      	ldr	r3, [pc, #52]	; (8004684 <osDelay+0x58>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b02      	cmp	r3, #2
 8004652:	d109      	bne.n	8004668 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004654:	f3ef 8311 	mrs	r3, BASEPRI
 8004658:	60bb      	str	r3, [r7, #8]
  return(result);
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <osDelay+0x3c>
    stat = osErrorISR;
 8004660:	f06f 0305 	mvn.w	r3, #5
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	e007      	b.n	8004678 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f001 f912 	bl	800589c <vTaskDelay>
    }
  }

  return (stat);
 8004678:	697b      	ldr	r3, [r7, #20]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	200001dc 	.word	0x200001dc

08004688 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4a06      	ldr	r2, [pc, #24]	; (80046b0 <vApplicationGetIdleTaskMemory+0x28>)
 8004698:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	4a05      	ldr	r2, [pc, #20]	; (80046b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800469e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2280      	movs	r2, #128	; 0x80
 80046a4:	601a      	str	r2, [r3, #0]
}
 80046a6:	bf00      	nop
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bc80      	pop	{r7}
 80046ae:	4770      	bx	lr
 80046b0:	200001e0 	.word	0x200001e0
 80046b4:	20000288 	.word	0x20000288

080046b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a07      	ldr	r2, [pc, #28]	; (80046e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80046c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	4a06      	ldr	r2, [pc, #24]	; (80046e8 <vApplicationGetTimerTaskMemory+0x30>)
 80046ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046d6:	601a      	str	r2, [r3, #0]
}
 80046d8:	bf00      	nop
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	bc80      	pop	{r7}
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	20000488 	.word	0x20000488
 80046e8:	20000530 	.word	0x20000530

080046ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f103 0208 	add.w	r2, r3, #8
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f04f 32ff 	mov.w	r2, #4294967295
 8004704:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f103 0208 	add.w	r2, r3, #8
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f103 0208 	add.w	r2, r3, #8
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	bc80      	pop	{r7}
 8004728:	4770      	bx	lr

0800472a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	bc80      	pop	{r7}
 8004740:	4770      	bx	lr

08004742 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004742:	b480      	push	{r7}
 8004744:	b085      	sub	sp, #20
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	601a      	str	r2, [r3, #0]
}
 800477e:	bf00      	nop
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr

08004788 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479e:	d103      	bne.n	80047a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	e00c      	b.n	80047c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3308      	adds	r3, #8
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	e002      	b.n	80047b6 <vListInsert+0x2e>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d2f6      	bcs.n	80047b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	601a      	str	r2, [r3, #0]
}
 80047ee:	bf00      	nop
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr

080047f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6892      	ldr	r2, [r2, #8]
 800480e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6852      	ldr	r2, [r2, #4]
 8004818:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	429a      	cmp	r2, r3
 8004822:	d103      	bne.n	800482c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	1e5a      	subs	r2, r3, #1
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr
	...

0800484c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10a      	bne.n	8004876 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004872:	bf00      	nop
 8004874:	e7fe      	b.n	8004874 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004876:	f002 fa91 	bl	8006d9c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004882:	68f9      	ldr	r1, [r7, #12]
 8004884:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004886:	fb01 f303 	mul.w	r3, r1, r3
 800488a:	441a      	add	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a6:	3b01      	subs	r3, #1
 80048a8:	68f9      	ldr	r1, [r7, #12]
 80048aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048ac:	fb01 f303 	mul.w	r3, r1, r3
 80048b0:	441a      	add	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	22ff      	movs	r2, #255	; 0xff
 80048ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	22ff      	movs	r2, #255	; 0xff
 80048c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d114      	bne.n	80048f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d01a      	beq.n	800490a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3310      	adds	r3, #16
 80048d8:	4618      	mov	r0, r3
 80048da:	f001 faaf 	bl	8005e3c <xTaskRemoveFromEventList>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d012      	beq.n	800490a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048e4:	4b0c      	ldr	r3, [pc, #48]	; (8004918 <xQueueGenericReset+0xcc>)
 80048e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	e009      	b.n	800490a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3310      	adds	r3, #16
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff fef6 	bl	80046ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	3324      	adds	r3, #36	; 0x24
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff fef1 	bl	80046ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800490a:	f002 fa77 	bl	8006dfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800490e:	2301      	movs	r3, #1
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	e000ed04 	.word	0xe000ed04

0800491c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08e      	sub	sp, #56	; 0x38
 8004920:	af02      	add	r7, sp, #8
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10a      	bne.n	8004946 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004942:	bf00      	nop
 8004944:	e7fe      	b.n	8004944 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10a      	bne.n	8004962 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800495e:	bf00      	nop
 8004960:	e7fe      	b.n	8004960 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <xQueueGenericCreateStatic+0x52>
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <xQueueGenericCreateStatic+0x56>
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <xQueueGenericCreateStatic+0x58>
 8004972:	2300      	movs	r3, #0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10a      	bne.n	800498e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497c:	f383 8811 	msr	BASEPRI, r3
 8004980:	f3bf 8f6f 	isb	sy
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	623b      	str	r3, [r7, #32]
}
 800498a:	bf00      	nop
 800498c:	e7fe      	b.n	800498c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d102      	bne.n	800499a <xQueueGenericCreateStatic+0x7e>
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <xQueueGenericCreateStatic+0x82>
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <xQueueGenericCreateStatic+0x84>
 800499e:	2300      	movs	r3, #0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	61fb      	str	r3, [r7, #28]
}
 80049b6:	bf00      	nop
 80049b8:	e7fe      	b.n	80049b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049ba:	2350      	movs	r3, #80	; 0x50
 80049bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2b50      	cmp	r3, #80	; 0x50
 80049c2:	d00a      	beq.n	80049da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	61bb      	str	r3, [r7, #24]
}
 80049d6:	bf00      	nop
 80049d8:	e7fe      	b.n	80049d8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80049de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00d      	beq.n	8004a00 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049ec:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80049f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	4613      	mov	r3, r2
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	68b9      	ldr	r1, [r7, #8]
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 f843 	bl	8004a86 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3730      	adds	r7, #48	; 0x30
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b08a      	sub	sp, #40	; 0x28
 8004a0e:	af02      	add	r7, sp, #8
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	4613      	mov	r3, r2
 8004a16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	613b      	str	r3, [r7, #16]
}
 8004a30:	bf00      	nop
 8004a32:	e7fe      	b.n	8004a32 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d102      	bne.n	8004a40 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61fb      	str	r3, [r7, #28]
 8004a3e:	e004      	b.n	8004a4a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	fb02 f303 	mul.w	r3, r2, r3
 8004a48:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	3350      	adds	r3, #80	; 0x50
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f002 faa4 	bl	8006f9c <pvPortMalloc>
 8004a54:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00f      	beq.n	8004a7c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	3350      	adds	r3, #80	; 0x50
 8004a60:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a6a:	79fa      	ldrb	r2, [r7, #7]
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	4613      	mov	r3, r2
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	68b9      	ldr	r1, [r7, #8]
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 f805 	bl	8004a86 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004a7c:	69bb      	ldr	r3, [r7, #24]
	}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3720      	adds	r7, #32
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b084      	sub	sp, #16
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d103      	bne.n	8004aa2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	e002      	b.n	8004aa8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	69b8      	ldr	r0, [r7, #24]
 8004ab8:	f7ff fec8 	bl	800484c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	78fa      	ldrb	r2, [r7, #3]
 8004ac0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ac4:	bf00      	nop
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00e      	beq.n	8004af8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004aec:	2300      	movs	r3, #0
 8004aee:	2200      	movs	r2, #0
 8004af0:	2100      	movs	r1, #0
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f81c 	bl	8004b30 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004af8:	bf00      	nop
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4603      	mov	r3, r0
 8004b08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	461a      	mov	r2, r3
 8004b16:	6939      	ldr	r1, [r7, #16]
 8004b18:	6978      	ldr	r0, [r7, #20]
 8004b1a:	f7ff ff76 	bl	8004a0a <xQueueGenericCreate>
 8004b1e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f7ff ffd3 	bl	8004acc <prvInitialiseMutex>

		return pxNewQueue;
 8004b26:	68fb      	ldr	r3, [r7, #12]
	}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08e      	sub	sp, #56	; 0x38
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <xQueueGenericSend+0x32>
	__asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b5e:	bf00      	nop
 8004b60:	e7fe      	b.n	8004b60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d103      	bne.n	8004b70 <xQueueGenericSend+0x40>
 8004b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <xQueueGenericSend+0x44>
 8004b70:	2301      	movs	r3, #1
 8004b72:	e000      	b.n	8004b76 <xQueueGenericSend+0x46>
 8004b74:	2300      	movs	r3, #0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10a      	bne.n	8004b90 <xQueueGenericSend+0x60>
	__asm volatile
 8004b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b8c:	bf00      	nop
 8004b8e:	e7fe      	b.n	8004b8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d103      	bne.n	8004b9e <xQueueGenericSend+0x6e>
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <xQueueGenericSend+0x72>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <xQueueGenericSend+0x74>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <xQueueGenericSend+0x8e>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	623b      	str	r3, [r7, #32]
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bbe:	f001 fb03 	bl	80061c8 <xTaskGetSchedulerState>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d102      	bne.n	8004bce <xQueueGenericSend+0x9e>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <xQueueGenericSend+0xa2>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <xQueueGenericSend+0xa4>
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10a      	bne.n	8004bee <xQueueGenericSend+0xbe>
	__asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	61fb      	str	r3, [r7, #28]
}
 8004bea:	bf00      	nop
 8004bec:	e7fe      	b.n	8004bec <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bee:	f002 f8d5 	bl	8006d9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d302      	bcc.n	8004c04 <xQueueGenericSend+0xd4>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d129      	bne.n	8004c58 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	68b9      	ldr	r1, [r7, #8]
 8004c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c0a:	f000 fb2a 	bl	8005262 <prvCopyDataToQueue>
 8004c0e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d010      	beq.n	8004c3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1a:	3324      	adds	r3, #36	; 0x24
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f001 f90d 	bl	8005e3c <xTaskRemoveFromEventList>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d013      	beq.n	8004c50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c28:	4b3f      	ldr	r3, [pc, #252]	; (8004d28 <xQueueGenericSend+0x1f8>)
 8004c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	e00a      	b.n	8004c50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d007      	beq.n	8004c50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c40:	4b39      	ldr	r3, [pc, #228]	; (8004d28 <xQueueGenericSend+0x1f8>)
 8004c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c50:	f002 f8d4 	bl	8006dfc <vPortExitCritical>
				return pdPASS;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e063      	b.n	8004d20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d103      	bne.n	8004c66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c5e:	f002 f8cd 	bl	8006dfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	e05c      	b.n	8004d20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d106      	bne.n	8004c7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c6c:	f107 0314 	add.w	r3, r7, #20
 8004c70:	4618      	mov	r0, r3
 8004c72:	f001 f947 	bl	8005f04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c76:	2301      	movs	r3, #1
 8004c78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c7a:	f002 f8bf 	bl	8006dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c7e:	f000 feb1 	bl	80059e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c82:	f002 f88b 	bl	8006d9c <vPortEnterCritical>
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c8c:	b25b      	sxtb	r3, r3
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c92:	d103      	bne.n	8004c9c <xQueueGenericSend+0x16c>
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ca2:	b25b      	sxtb	r3, r3
 8004ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca8:	d103      	bne.n	8004cb2 <xQueueGenericSend+0x182>
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cb2:	f002 f8a3 	bl	8006dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cb6:	1d3a      	adds	r2, r7, #4
 8004cb8:	f107 0314 	add.w	r3, r7, #20
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f001 f936 	bl	8005f30 <xTaskCheckForTimeOut>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d124      	bne.n	8004d14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ccc:	f000 fbc1 	bl	8005452 <prvIsQueueFull>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d018      	beq.n	8004d08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	3310      	adds	r3, #16
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	4611      	mov	r1, r2
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f001 f85c 	bl	8005d9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ce6:	f000 fb4c 	bl	8005382 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004cea:	f000 fe89 	bl	8005a00 <xTaskResumeAll>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f47f af7c 	bne.w	8004bee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004cf6:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <xQueueGenericSend+0x1f8>)
 8004cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	e772      	b.n	8004bee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d0a:	f000 fb3a 	bl	8005382 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d0e:	f000 fe77 	bl	8005a00 <xTaskResumeAll>
 8004d12:	e76c      	b.n	8004bee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d16:	f000 fb34 	bl	8005382 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d1a:	f000 fe71 	bl	8005a00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d1e:	2300      	movs	r3, #0
		}
	}
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3738      	adds	r7, #56	; 0x38
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	e000ed04 	.word	0xe000ed04

08004d2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08e      	sub	sp, #56	; 0x38
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
 8004d38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d56:	bf00      	nop
 8004d58:	e7fe      	b.n	8004d58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d103      	bne.n	8004d68 <xQueueGenericSendFromISR+0x3c>
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <xQueueGenericSendFromISR+0x40>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e000      	b.n	8004d6e <xQueueGenericSendFromISR+0x42>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10a      	bne.n	8004d88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	623b      	str	r3, [r7, #32]
}
 8004d84:	bf00      	nop
 8004d86:	e7fe      	b.n	8004d86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d103      	bne.n	8004d96 <xQueueGenericSendFromISR+0x6a>
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d101      	bne.n	8004d9a <xQueueGenericSendFromISR+0x6e>
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <xQueueGenericSendFromISR+0x70>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10a      	bne.n	8004db6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	61fb      	str	r3, [r7, #28]
}
 8004db2:	bf00      	nop
 8004db4:	e7fe      	b.n	8004db4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004db6:	f002 f8b3 	bl	8006f20 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004dba:	f3ef 8211 	mrs	r2, BASEPRI
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	61ba      	str	r2, [r7, #24]
 8004dd0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004dd2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d302      	bcc.n	8004de8 <xQueueGenericSendFromISR+0xbc>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d12c      	bne.n	8004e42 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004df8:	f000 fa33 	bl	8005262 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004dfc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e04:	d112      	bne.n	8004e2c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d016      	beq.n	8004e3c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e10:	3324      	adds	r3, #36	; 0x24
 8004e12:	4618      	mov	r0, r3
 8004e14:	f001 f812 	bl	8005e3c <xTaskRemoveFromEventList>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00e      	beq.n	8004e3c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00b      	beq.n	8004e3c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	e007      	b.n	8004e3c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e30:	3301      	adds	r3, #1
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	b25a      	sxtb	r2, r3
 8004e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004e40:	e001      	b.n	8004e46 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e42:	2300      	movs	r3, #0
 8004e44:	637b      	str	r3, [r7, #52]	; 0x34
 8004e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e48:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3738      	adds	r7, #56	; 0x38
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08c      	sub	sp, #48	; 0x30
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10a      	bne.n	8004e8c <xQueueReceive+0x30>
	__asm volatile
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	623b      	str	r3, [r7, #32]
}
 8004e88:	bf00      	nop
 8004e8a:	e7fe      	b.n	8004e8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d103      	bne.n	8004e9a <xQueueReceive+0x3e>
 8004e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <xQueueReceive+0x42>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e000      	b.n	8004ea0 <xQueueReceive+0x44>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10a      	bne.n	8004eba <xQueueReceive+0x5e>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	61fb      	str	r3, [r7, #28]
}
 8004eb6:	bf00      	nop
 8004eb8:	e7fe      	b.n	8004eb8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004eba:	f001 f985 	bl	80061c8 <xTaskGetSchedulerState>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d102      	bne.n	8004eca <xQueueReceive+0x6e>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <xQueueReceive+0x72>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e000      	b.n	8004ed0 <xQueueReceive+0x74>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10a      	bne.n	8004eea <xQueueReceive+0x8e>
	__asm volatile
 8004ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	61bb      	str	r3, [r7, #24]
}
 8004ee6:	bf00      	nop
 8004ee8:	e7fe      	b.n	8004ee8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004eea:	f001 ff57 	bl	8006d9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d01f      	beq.n	8004f3a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004efe:	f000 fa1a 	bl	8005336 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	1e5a      	subs	r2, r3, #1
 8004f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00f      	beq.n	8004f32 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	3310      	adds	r3, #16
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 ff90 	bl	8005e3c <xTaskRemoveFromEventList>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d007      	beq.n	8004f32 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f22:	4b3d      	ldr	r3, [pc, #244]	; (8005018 <xQueueReceive+0x1bc>)
 8004f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f32:	f001 ff63 	bl	8006dfc <vPortExitCritical>
				return pdPASS;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e069      	b.n	800500e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d103      	bne.n	8004f48 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f40:	f001 ff5c 	bl	8006dfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f44:	2300      	movs	r3, #0
 8004f46:	e062      	b.n	800500e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d106      	bne.n	8004f5c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f4e:	f107 0310 	add.w	r3, r7, #16
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 ffd6 	bl	8005f04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f5c:	f001 ff4e 	bl	8006dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f60:	f000 fd40 	bl	80059e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f64:	f001 ff1a 	bl	8006d9c <vPortEnterCritical>
 8004f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f6e:	b25b      	sxtb	r3, r3
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f74:	d103      	bne.n	8004f7e <xQueueReceive+0x122>
 8004f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f84:	b25b      	sxtb	r3, r3
 8004f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8a:	d103      	bne.n	8004f94 <xQueueReceive+0x138>
 8004f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f94:	f001 ff32 	bl	8006dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f98:	1d3a      	adds	r2, r7, #4
 8004f9a:	f107 0310 	add.w	r3, r7, #16
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 ffc5 	bl	8005f30 <xTaskCheckForTimeOut>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d123      	bne.n	8004ff4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fae:	f000 fa3a 	bl	8005426 <prvIsQueueEmpty>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d017      	beq.n	8004fe8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fba:	3324      	adds	r3, #36	; 0x24
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 feeb 	bl	8005d9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004fc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fc8:	f000 f9db 	bl	8005382 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004fcc:	f000 fd18 	bl	8005a00 <xTaskResumeAll>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d189      	bne.n	8004eea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004fd6:	4b10      	ldr	r3, [pc, #64]	; (8005018 <xQueueReceive+0x1bc>)
 8004fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	e780      	b.n	8004eea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fea:	f000 f9ca 	bl	8005382 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fee:	f000 fd07 	bl	8005a00 <xTaskResumeAll>
 8004ff2:	e77a      	b.n	8004eea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ff6:	f000 f9c4 	bl	8005382 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ffa:	f000 fd01 	bl	8005a00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ffe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005000:	f000 fa11 	bl	8005426 <prvIsQueueEmpty>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	f43f af6f 	beq.w	8004eea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800500c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800500e:	4618      	mov	r0, r3
 8005010:	3730      	adds	r7, #48	; 0x30
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	e000ed04 	.word	0xe000ed04

0800501c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08e      	sub	sp, #56	; 0x38
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005026:	2300      	movs	r3, #0
 8005028:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800502e:	2300      	movs	r3, #0
 8005030:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10a      	bne.n	800504e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	623b      	str	r3, [r7, #32]
}
 800504a:	bf00      	nop
 800504c:	e7fe      	b.n	800504c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	61fb      	str	r3, [r7, #28]
}
 8005068:	bf00      	nop
 800506a:	e7fe      	b.n	800506a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800506c:	f001 f8ac 	bl	80061c8 <xTaskGetSchedulerState>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d102      	bne.n	800507c <xQueueSemaphoreTake+0x60>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <xQueueSemaphoreTake+0x64>
 800507c:	2301      	movs	r3, #1
 800507e:	e000      	b.n	8005082 <xQueueSemaphoreTake+0x66>
 8005080:	2300      	movs	r3, #0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10a      	bne.n	800509c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	61bb      	str	r3, [r7, #24]
}
 8005098:	bf00      	nop
 800509a:	e7fe      	b.n	800509a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800509c:	f001 fe7e 	bl	8006d9c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80050a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80050a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d024      	beq.n	80050f6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	1e5a      	subs	r2, r3, #1
 80050b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d104      	bne.n	80050c6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80050bc:	f001 fa04 	bl	80064c8 <pvTaskIncrementMutexHeldCount>
 80050c0:	4602      	mov	r2, r0
 80050c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00f      	beq.n	80050ee <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d0:	3310      	adds	r3, #16
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 feb2 	bl	8005e3c <xTaskRemoveFromEventList>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d007      	beq.n	80050ee <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80050de:	4b54      	ldr	r3, [pc, #336]	; (8005230 <xQueueSemaphoreTake+0x214>)
 80050e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80050ee:	f001 fe85 	bl	8006dfc <vPortExitCritical>
				return pdPASS;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e097      	b.n	8005226 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d111      	bne.n	8005120 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80050fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	617b      	str	r3, [r7, #20]
}
 8005114:	bf00      	nop
 8005116:	e7fe      	b.n	8005116 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005118:	f001 fe70 	bl	8006dfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800511c:	2300      	movs	r3, #0
 800511e:	e082      	b.n	8005226 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005126:	f107 030c 	add.w	r3, r7, #12
 800512a:	4618      	mov	r0, r3
 800512c:	f000 feea 	bl	8005f04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005130:	2301      	movs	r3, #1
 8005132:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005134:	f001 fe62 	bl	8006dfc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005138:	f000 fc54 	bl	80059e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800513c:	f001 fe2e 	bl	8006d9c <vPortEnterCritical>
 8005140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005142:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005146:	b25b      	sxtb	r3, r3
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514c:	d103      	bne.n	8005156 <xQueueSemaphoreTake+0x13a>
 800514e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800515c:	b25b      	sxtb	r3, r3
 800515e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005162:	d103      	bne.n	800516c <xQueueSemaphoreTake+0x150>
 8005164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800516c:	f001 fe46 	bl	8006dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005170:	463a      	mov	r2, r7
 8005172:	f107 030c 	add.w	r3, r7, #12
 8005176:	4611      	mov	r1, r2
 8005178:	4618      	mov	r0, r3
 800517a:	f000 fed9 	bl	8005f30 <xTaskCheckForTimeOut>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d132      	bne.n	80051ea <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005184:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005186:	f000 f94e 	bl	8005426 <prvIsQueueEmpty>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d026      	beq.n	80051de <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d109      	bne.n	80051ac <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005198:	f001 fe00 	bl	8006d9c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800519c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f001 f82f 	bl	8006204 <xTaskPriorityInherit>
 80051a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80051a8:	f001 fe28 	bl	8006dfc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80051ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ae:	3324      	adds	r3, #36	; 0x24
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	4611      	mov	r1, r2
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 fdf1 	bl	8005d9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051bc:	f000 f8e1 	bl	8005382 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051c0:	f000 fc1e 	bl	8005a00 <xTaskResumeAll>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f47f af68 	bne.w	800509c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80051cc:	4b18      	ldr	r3, [pc, #96]	; (8005230 <xQueueSemaphoreTake+0x214>)
 80051ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	e75e      	b.n	800509c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80051de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051e0:	f000 f8cf 	bl	8005382 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051e4:	f000 fc0c 	bl	8005a00 <xTaskResumeAll>
 80051e8:	e758      	b.n	800509c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80051ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051ec:	f000 f8c9 	bl	8005382 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051f0:	f000 fc06 	bl	8005a00 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051f6:	f000 f916 	bl	8005426 <prvIsQueueEmpty>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f43f af4d 	beq.w	800509c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00d      	beq.n	8005224 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005208:	f001 fdc8 	bl	8006d9c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800520c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800520e:	f000 f811 	bl	8005234 <prvGetDisinheritPriorityAfterTimeout>
 8005212:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800521a:	4618      	mov	r0, r3
 800521c:	f001 f8ce 	bl	80063bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005220:	f001 fdec 	bl	8006dfc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005224:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005226:	4618      	mov	r0, r3
 8005228:	3738      	adds	r7, #56	; 0x38
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	e000ed04 	.word	0xe000ed04

08005234 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	2b00      	cmp	r3, #0
 8005242:	d006      	beq.n	8005252 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	e001      	b.n	8005256 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005252:	2300      	movs	r3, #0
 8005254:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005256:	68fb      	ldr	r3, [r7, #12]
	}
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	bc80      	pop	{r7}
 8005260:	4770      	bx	lr

08005262 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b086      	sub	sp, #24
 8005266:	af00      	add	r7, sp, #0
 8005268:	60f8      	str	r0, [r7, #12]
 800526a:	60b9      	str	r1, [r7, #8]
 800526c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800526e:	2300      	movs	r3, #0
 8005270:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005276:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10d      	bne.n	800529c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d14d      	bne.n	8005324 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	4618      	mov	r0, r3
 800528e:	f001 f827 	bl	80062e0 <xTaskPriorityDisinherit>
 8005292:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	605a      	str	r2, [r3, #4]
 800529a:	e043      	b.n	8005324 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d119      	bne.n	80052d6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6898      	ldr	r0, [r3, #8]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	461a      	mov	r2, r3
 80052ac:	68b9      	ldr	r1, [r7, #8]
 80052ae:	f002 f8d1 	bl	8007454 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	441a      	add	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d32b      	bcc.n	8005324 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	609a      	str	r2, [r3, #8]
 80052d4:	e026      	b.n	8005324 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	68d8      	ldr	r0, [r3, #12]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	461a      	mov	r2, r3
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	f002 f8b7 	bl	8007454 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	425b      	negs	r3, r3
 80052f0:	441a      	add	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d207      	bcs.n	8005312 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	425b      	negs	r3, r3
 800530c:	441a      	add	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b02      	cmp	r3, #2
 8005316:	d105      	bne.n	8005324 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	3b01      	subs	r3, #1
 8005322:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800532c:	697b      	ldr	r3, [r7, #20]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b082      	sub	sp, #8
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
 800533e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	2b00      	cmp	r3, #0
 8005346:	d018      	beq.n	800537a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005350:	441a      	add	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	429a      	cmp	r2, r3
 8005360:	d303      	bcc.n	800536a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68d9      	ldr	r1, [r3, #12]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	461a      	mov	r2, r3
 8005374:	6838      	ldr	r0, [r7, #0]
 8005376:	f002 f86d 	bl	8007454 <memcpy>
	}
}
 800537a:	bf00      	nop
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800538a:	f001 fd07 	bl	8006d9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005394:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005396:	e011      	b.n	80053bc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	2b00      	cmp	r3, #0
 800539e:	d012      	beq.n	80053c6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	3324      	adds	r3, #36	; 0x24
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 fd49 	bl	8005e3c <xTaskRemoveFromEventList>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80053b0:	f000 fe20 	bl	8005ff4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	dce9      	bgt.n	8005398 <prvUnlockQueue+0x16>
 80053c4:	e000      	b.n	80053c8 <prvUnlockQueue+0x46>
					break;
 80053c6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	22ff      	movs	r2, #255	; 0xff
 80053cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80053d0:	f001 fd14 	bl	8006dfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80053d4:	f001 fce2 	bl	8006d9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053de:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053e0:	e011      	b.n	8005406 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d012      	beq.n	8005410 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3310      	adds	r3, #16
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fd24 	bl	8005e3c <xTaskRemoveFromEventList>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80053fa:	f000 fdfb 	bl	8005ff4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80053fe:	7bbb      	ldrb	r3, [r7, #14]
 8005400:	3b01      	subs	r3, #1
 8005402:	b2db      	uxtb	r3, r3
 8005404:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005406:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800540a:	2b00      	cmp	r3, #0
 800540c:	dce9      	bgt.n	80053e2 <prvUnlockQueue+0x60>
 800540e:	e000      	b.n	8005412 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005410:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	22ff      	movs	r2, #255	; 0xff
 8005416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800541a:	f001 fcef 	bl	8006dfc <vPortExitCritical>
}
 800541e:	bf00      	nop
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b084      	sub	sp, #16
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800542e:	f001 fcb5 	bl	8006d9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005436:	2b00      	cmp	r3, #0
 8005438:	d102      	bne.n	8005440 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800543a:	2301      	movs	r3, #1
 800543c:	60fb      	str	r3, [r7, #12]
 800543e:	e001      	b.n	8005444 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005440:	2300      	movs	r3, #0
 8005442:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005444:	f001 fcda 	bl	8006dfc <vPortExitCritical>

	return xReturn;
 8005448:	68fb      	ldr	r3, [r7, #12]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800545a:	f001 fc9f 	bl	8006d9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005466:	429a      	cmp	r2, r3
 8005468:	d102      	bne.n	8005470 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800546a:	2301      	movs	r3, #1
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	e001      	b.n	8005474 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005474:	f001 fcc2 	bl	8006dfc <vPortExitCritical>

	return xReturn;
 8005478:	68fb      	ldr	r3, [r7, #12]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	e014      	b.n	80054be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005494:	4a0e      	ldr	r2, [pc, #56]	; (80054d0 <vQueueAddToRegistry+0x4c>)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10b      	bne.n	80054b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80054a0:	490b      	ldr	r1, [pc, #44]	; (80054d0 <vQueueAddToRegistry+0x4c>)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80054aa:	4a09      	ldr	r2, [pc, #36]	; (80054d0 <vQueueAddToRegistry+0x4c>)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	4413      	add	r3, r2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80054b6:	e006      	b.n	80054c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3301      	adds	r3, #1
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b07      	cmp	r3, #7
 80054c2:	d9e7      	bls.n	8005494 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bc80      	pop	{r7}
 80054ce:	4770      	bx	lr
 80054d0:	20000930 	.word	0x20000930

080054d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80054e4:	f001 fc5a 	bl	8006d9c <vPortEnterCritical>
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054ee:	b25b      	sxtb	r3, r3
 80054f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f4:	d103      	bne.n	80054fe <vQueueWaitForMessageRestricted+0x2a>
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005504:	b25b      	sxtb	r3, r3
 8005506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550a:	d103      	bne.n	8005514 <vQueueWaitForMessageRestricted+0x40>
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005514:	f001 fc72 	bl	8006dfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551c:	2b00      	cmp	r3, #0
 800551e:	d106      	bne.n	800552e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	3324      	adds	r3, #36	; 0x24
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	68b9      	ldr	r1, [r7, #8]
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fc5b 	bl	8005de4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800552e:	6978      	ldr	r0, [r7, #20]
 8005530:	f7ff ff27 	bl	8005382 <prvUnlockQueue>
	}
 8005534:	bf00      	nop
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08e      	sub	sp, #56	; 0x38
 8005540:	af04      	add	r7, sp, #16
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800554a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10a      	bne.n	8005566 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	623b      	str	r3, [r7, #32]
}
 8005562:	bf00      	nop
 8005564:	e7fe      	b.n	8005564 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10a      	bne.n	8005582 <xTaskCreateStatic+0x46>
	__asm volatile
 800556c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	61fb      	str	r3, [r7, #28]
}
 800557e:	bf00      	nop
 8005580:	e7fe      	b.n	8005580 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005582:	23a8      	movs	r3, #168	; 0xa8
 8005584:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	2ba8      	cmp	r3, #168	; 0xa8
 800558a:	d00a      	beq.n	80055a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800558c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005590:	f383 8811 	msr	BASEPRI, r3
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	61bb      	str	r3, [r7, #24]
}
 800559e:	bf00      	nop
 80055a0:	e7fe      	b.n	80055a0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80055a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d01e      	beq.n	80055e6 <xTaskCreateStatic+0xaa>
 80055a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d01b      	beq.n	80055e6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055b6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80055c0:	2300      	movs	r3, #0
 80055c2:	9303      	str	r3, [sp, #12]
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	9302      	str	r3, [sp, #8]
 80055c8:	f107 0314 	add.w	r3, r7, #20
 80055cc:	9301      	str	r3, [sp, #4]
 80055ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	68b9      	ldr	r1, [r7, #8]
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 f851 	bl	8005680 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055e0:	f000 f8ec 	bl	80057bc <prvAddNewTaskToReadyList>
 80055e4:	e001      	b.n	80055ea <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80055ea:	697b      	ldr	r3, [r7, #20]
	}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3728      	adds	r7, #40	; 0x28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08c      	sub	sp, #48	; 0x30
 80055f8:	af04      	add	r7, sp, #16
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	603b      	str	r3, [r7, #0]
 8005600:	4613      	mov	r3, r2
 8005602:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005604:	88fb      	ldrh	r3, [r7, #6]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4618      	mov	r0, r3
 800560a:	f001 fcc7 	bl	8006f9c <pvPortMalloc>
 800560e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00e      	beq.n	8005634 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005616:	20a8      	movs	r0, #168	; 0xa8
 8005618:	f001 fcc0 	bl	8006f9c <pvPortMalloc>
 800561c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	631a      	str	r2, [r3, #48]	; 0x30
 800562a:	e005      	b.n	8005638 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800562c:	6978      	ldr	r0, [r7, #20]
 800562e:	f001 fd79 	bl	8007124 <vPortFree>
 8005632:	e001      	b.n	8005638 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005634:	2300      	movs	r3, #0
 8005636:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d017      	beq.n	800566e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005646:	88fa      	ldrh	r2, [r7, #6]
 8005648:	2300      	movs	r3, #0
 800564a:	9303      	str	r3, [sp, #12]
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	9302      	str	r3, [sp, #8]
 8005650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005652:	9301      	str	r3, [sp, #4]
 8005654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	68b9      	ldr	r1, [r7, #8]
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 f80f 	bl	8005680 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005662:	69f8      	ldr	r0, [r7, #28]
 8005664:	f000 f8aa 	bl	80057bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005668:	2301      	movs	r3, #1
 800566a:	61bb      	str	r3, [r7, #24]
 800566c:	e002      	b.n	8005674 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800566e:	f04f 33ff 	mov.w	r3, #4294967295
 8005672:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005674:	69bb      	ldr	r3, [r7, #24]
	}
 8005676:	4618      	mov	r0, r3
 8005678:	3720      	adds	r7, #32
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	461a      	mov	r2, r3
 8005698:	21a5      	movs	r1, #165	; 0xa5
 800569a:	f001 fe57 	bl	800734c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80056a8:	3b01      	subs	r3, #1
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	f023 0307 	bic.w	r3, r3, #7
 80056b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80056c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	617b      	str	r3, [r7, #20]
}
 80056d4:	bf00      	nop
 80056d6:	e7fe      	b.n	80056d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056d8:	2300      	movs	r3, #0
 80056da:	61fb      	str	r3, [r7, #28]
 80056dc:	e012      	b.n	8005704 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	4413      	add	r3, r2
 80056e4:	7819      	ldrb	r1, [r3, #0]
 80056e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	4413      	add	r3, r2
 80056ec:	3334      	adds	r3, #52	; 0x34
 80056ee:	460a      	mov	r2, r1
 80056f0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	4413      	add	r3, r2
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d006      	beq.n	800570c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	3301      	adds	r3, #1
 8005702:	61fb      	str	r3, [r7, #28]
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	2b0f      	cmp	r3, #15
 8005708:	d9e9      	bls.n	80056de <prvInitialiseNewTask+0x5e>
 800570a:	e000      	b.n	800570e <prvInitialiseNewTask+0x8e>
		{
			break;
 800570c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	2b37      	cmp	r3, #55	; 0x37
 800571a:	d901      	bls.n	8005720 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800571c:	2337      	movs	r3, #55	; 0x37
 800571e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005724:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800572a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	2200      	movs	r2, #0
 8005730:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	3304      	adds	r3, #4
 8005736:	4618      	mov	r0, r3
 8005738:	f7fe fff7 	bl	800472a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	3318      	adds	r3, #24
 8005740:	4618      	mov	r0, r3
 8005742:	f7fe fff2 	bl	800472a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800574a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005754:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800575a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	2200      	movs	r2, #0
 8005760:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005766:	2200      	movs	r2, #0
 8005768:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800576c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576e:	3354      	adds	r3, #84	; 0x54
 8005770:	224c      	movs	r2, #76	; 0x4c
 8005772:	2100      	movs	r1, #0
 8005774:	4618      	mov	r0, r3
 8005776:	f001 fde9 	bl	800734c <memset>
 800577a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577c:	4a0c      	ldr	r2, [pc, #48]	; (80057b0 <prvInitialiseNewTask+0x130>)
 800577e:	659a      	str	r2, [r3, #88]	; 0x58
 8005780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005782:	4a0c      	ldr	r2, [pc, #48]	; (80057b4 <prvInitialiseNewTask+0x134>)
 8005784:	65da      	str	r2, [r3, #92]	; 0x5c
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	4a0b      	ldr	r2, [pc, #44]	; (80057b8 <prvInitialiseNewTask+0x138>)
 800578a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	68f9      	ldr	r1, [r7, #12]
 8005790:	69b8      	ldr	r0, [r7, #24]
 8005792:	f001 fa13 	bl	8006bbc <pxPortInitialiseStack>
 8005796:	4602      	mov	r2, r0
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800579c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057a8:	bf00      	nop
 80057aa:	3720      	adds	r7, #32
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20001bbc 	.word	0x20001bbc
 80057b4:	20001c24 	.word	0x20001c24
 80057b8:	20001c8c 	.word	0x20001c8c

080057bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80057c4:	f001 faea 	bl	8006d9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80057c8:	4b2d      	ldr	r3, [pc, #180]	; (8005880 <prvAddNewTaskToReadyList+0xc4>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3301      	adds	r3, #1
 80057ce:	4a2c      	ldr	r2, [pc, #176]	; (8005880 <prvAddNewTaskToReadyList+0xc4>)
 80057d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80057d2:	4b2c      	ldr	r3, [pc, #176]	; (8005884 <prvAddNewTaskToReadyList+0xc8>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d109      	bne.n	80057ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80057da:	4a2a      	ldr	r2, [pc, #168]	; (8005884 <prvAddNewTaskToReadyList+0xc8>)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057e0:	4b27      	ldr	r3, [pc, #156]	; (8005880 <prvAddNewTaskToReadyList+0xc4>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d110      	bne.n	800580a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80057e8:	f000 fc28 	bl	800603c <prvInitialiseTaskLists>
 80057ec:	e00d      	b.n	800580a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80057ee:	4b26      	ldr	r3, [pc, #152]	; (8005888 <prvAddNewTaskToReadyList+0xcc>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d109      	bne.n	800580a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057f6:	4b23      	ldr	r3, [pc, #140]	; (8005884 <prvAddNewTaskToReadyList+0xc8>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	429a      	cmp	r2, r3
 8005802:	d802      	bhi.n	800580a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005804:	4a1f      	ldr	r2, [pc, #124]	; (8005884 <prvAddNewTaskToReadyList+0xc8>)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800580a:	4b20      	ldr	r3, [pc, #128]	; (800588c <prvAddNewTaskToReadyList+0xd0>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	3301      	adds	r3, #1
 8005810:	4a1e      	ldr	r2, [pc, #120]	; (800588c <prvAddNewTaskToReadyList+0xd0>)
 8005812:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005814:	4b1d      	ldr	r3, [pc, #116]	; (800588c <prvAddNewTaskToReadyList+0xd0>)
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005820:	4b1b      	ldr	r3, [pc, #108]	; (8005890 <prvAddNewTaskToReadyList+0xd4>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	429a      	cmp	r2, r3
 8005826:	d903      	bls.n	8005830 <prvAddNewTaskToReadyList+0x74>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	4a18      	ldr	r2, [pc, #96]	; (8005890 <prvAddNewTaskToReadyList+0xd4>)
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005834:	4613      	mov	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4a15      	ldr	r2, [pc, #84]	; (8005894 <prvAddNewTaskToReadyList+0xd8>)
 800583e:	441a      	add	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3304      	adds	r3, #4
 8005844:	4619      	mov	r1, r3
 8005846:	4610      	mov	r0, r2
 8005848:	f7fe ff7b 	bl	8004742 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800584c:	f001 fad6 	bl	8006dfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005850:	4b0d      	ldr	r3, [pc, #52]	; (8005888 <prvAddNewTaskToReadyList+0xcc>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00e      	beq.n	8005876 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005858:	4b0a      	ldr	r3, [pc, #40]	; (8005884 <prvAddNewTaskToReadyList+0xc8>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005862:	429a      	cmp	r2, r3
 8005864:	d207      	bcs.n	8005876 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005866:	4b0c      	ldr	r3, [pc, #48]	; (8005898 <prvAddNewTaskToReadyList+0xdc>)
 8005868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005876:	bf00      	nop
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20000e44 	.word	0x20000e44
 8005884:	20000970 	.word	0x20000970
 8005888:	20000e50 	.word	0x20000e50
 800588c:	20000e60 	.word	0x20000e60
 8005890:	20000e4c 	.word	0x20000e4c
 8005894:	20000974 	.word	0x20000974
 8005898:	e000ed04 	.word	0xe000ed04

0800589c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d017      	beq.n	80058de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80058ae:	4b13      	ldr	r3, [pc, #76]	; (80058fc <vTaskDelay+0x60>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <vTaskDelay+0x30>
	__asm volatile
 80058b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	60bb      	str	r3, [r7, #8]
}
 80058c8:	bf00      	nop
 80058ca:	e7fe      	b.n	80058ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80058cc:	f000 f88a 	bl	80059e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80058d0:	2100      	movs	r1, #0
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fe0c 	bl	80064f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80058d8:	f000 f892 	bl	8005a00 <xTaskResumeAll>
 80058dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d107      	bne.n	80058f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80058e4:	4b06      	ldr	r3, [pc, #24]	; (8005900 <vTaskDelay+0x64>)
 80058e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058f4:	bf00      	nop
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	20000e6c 	.word	0x20000e6c
 8005900:	e000ed04 	.word	0xe000ed04

08005904 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b08a      	sub	sp, #40	; 0x28
 8005908:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800590a:	2300      	movs	r3, #0
 800590c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800590e:	2300      	movs	r3, #0
 8005910:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005912:	463a      	mov	r2, r7
 8005914:	1d39      	adds	r1, r7, #4
 8005916:	f107 0308 	add.w	r3, r7, #8
 800591a:	4618      	mov	r0, r3
 800591c:	f7fe feb4 	bl	8004688 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005920:	6839      	ldr	r1, [r7, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	9202      	str	r2, [sp, #8]
 8005928:	9301      	str	r3, [sp, #4]
 800592a:	2300      	movs	r3, #0
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	2300      	movs	r3, #0
 8005930:	460a      	mov	r2, r1
 8005932:	4924      	ldr	r1, [pc, #144]	; (80059c4 <vTaskStartScheduler+0xc0>)
 8005934:	4824      	ldr	r0, [pc, #144]	; (80059c8 <vTaskStartScheduler+0xc4>)
 8005936:	f7ff fe01 	bl	800553c <xTaskCreateStatic>
 800593a:	4603      	mov	r3, r0
 800593c:	4a23      	ldr	r2, [pc, #140]	; (80059cc <vTaskStartScheduler+0xc8>)
 800593e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005940:	4b22      	ldr	r3, [pc, #136]	; (80059cc <vTaskStartScheduler+0xc8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005948:	2301      	movs	r3, #1
 800594a:	617b      	str	r3, [r7, #20]
 800594c:	e001      	b.n	8005952 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800594e:	2300      	movs	r3, #0
 8005950:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d102      	bne.n	800595e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005958:	f000 fe1e 	bl	8006598 <xTimerCreateTimerTask>
 800595c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d11b      	bne.n	800599c <vTaskStartScheduler+0x98>
	__asm volatile
 8005964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	613b      	str	r3, [r7, #16]
}
 8005976:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005978:	4b15      	ldr	r3, [pc, #84]	; (80059d0 <vTaskStartScheduler+0xcc>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3354      	adds	r3, #84	; 0x54
 800597e:	4a15      	ldr	r2, [pc, #84]	; (80059d4 <vTaskStartScheduler+0xd0>)
 8005980:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005982:	4b15      	ldr	r3, [pc, #84]	; (80059d8 <vTaskStartScheduler+0xd4>)
 8005984:	f04f 32ff 	mov.w	r2, #4294967295
 8005988:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800598a:	4b14      	ldr	r3, [pc, #80]	; (80059dc <vTaskStartScheduler+0xd8>)
 800598c:	2201      	movs	r2, #1
 800598e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005990:	4b13      	ldr	r3, [pc, #76]	; (80059e0 <vTaskStartScheduler+0xdc>)
 8005992:	2200      	movs	r2, #0
 8005994:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005996:	f001 f98f 	bl	8006cb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800599a:	e00e      	b.n	80059ba <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a2:	d10a      	bne.n	80059ba <vTaskStartScheduler+0xb6>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	60fb      	str	r3, [r7, #12]
}
 80059b6:	bf00      	nop
 80059b8:	e7fe      	b.n	80059b8 <vTaskStartScheduler+0xb4>
}
 80059ba:	bf00      	nop
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	08007570 	.word	0x08007570
 80059c8:	0800600d 	.word	0x0800600d
 80059cc:	20000e68 	.word	0x20000e68
 80059d0:	20000970 	.word	0x20000970
 80059d4:	2000005c 	.word	0x2000005c
 80059d8:	20000e64 	.word	0x20000e64
 80059dc:	20000e50 	.word	0x20000e50
 80059e0:	20000e48 	.word	0x20000e48

080059e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80059e4:	b480      	push	{r7}
 80059e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80059e8:	4b04      	ldr	r3, [pc, #16]	; (80059fc <vTaskSuspendAll+0x18>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3301      	adds	r3, #1
 80059ee:	4a03      	ldr	r2, [pc, #12]	; (80059fc <vTaskSuspendAll+0x18>)
 80059f0:	6013      	str	r3, [r2, #0]
}
 80059f2:	bf00      	nop
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bc80      	pop	{r7}
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	20000e6c 	.word	0x20000e6c

08005a00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a0e:	4b42      	ldr	r3, [pc, #264]	; (8005b18 <xTaskResumeAll+0x118>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10a      	bne.n	8005a2c <xTaskResumeAll+0x2c>
	__asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	603b      	str	r3, [r7, #0]
}
 8005a28:	bf00      	nop
 8005a2a:	e7fe      	b.n	8005a2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a2c:	f001 f9b6 	bl	8006d9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a30:	4b39      	ldr	r3, [pc, #228]	; (8005b18 <xTaskResumeAll+0x118>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3b01      	subs	r3, #1
 8005a36:	4a38      	ldr	r2, [pc, #224]	; (8005b18 <xTaskResumeAll+0x118>)
 8005a38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a3a:	4b37      	ldr	r3, [pc, #220]	; (8005b18 <xTaskResumeAll+0x118>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d162      	bne.n	8005b08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a42:	4b36      	ldr	r3, [pc, #216]	; (8005b1c <xTaskResumeAll+0x11c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d05e      	beq.n	8005b08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a4a:	e02f      	b.n	8005aac <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005a4c:	4b34      	ldr	r3, [pc, #208]	; (8005b20 <xTaskResumeAll+0x120>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	3318      	adds	r3, #24
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fe fecd 	bl	80047f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	3304      	adds	r3, #4
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fe fec8 	bl	80047f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6c:	4b2d      	ldr	r3, [pc, #180]	; (8005b24 <xTaskResumeAll+0x124>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d903      	bls.n	8005a7c <xTaskResumeAll+0x7c>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	4a2a      	ldr	r2, [pc, #168]	; (8005b24 <xTaskResumeAll+0x124>)
 8005a7a:	6013      	str	r3, [r2, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a80:	4613      	mov	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4a27      	ldr	r2, [pc, #156]	; (8005b28 <xTaskResumeAll+0x128>)
 8005a8a:	441a      	add	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	3304      	adds	r3, #4
 8005a90:	4619      	mov	r1, r3
 8005a92:	4610      	mov	r0, r2
 8005a94:	f7fe fe55 	bl	8004742 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9c:	4b23      	ldr	r3, [pc, #140]	; (8005b2c <xTaskResumeAll+0x12c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d302      	bcc.n	8005aac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005aa6:	4b22      	ldr	r3, [pc, #136]	; (8005b30 <xTaskResumeAll+0x130>)
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005aac:	4b1c      	ldr	r3, [pc, #112]	; (8005b20 <xTaskResumeAll+0x120>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1cb      	bne.n	8005a4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005aba:	f000 fb61 	bl	8006180 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005abe:	4b1d      	ldr	r3, [pc, #116]	; (8005b34 <xTaskResumeAll+0x134>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d010      	beq.n	8005aec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005aca:	f000 f845 	bl	8005b58 <xTaskIncrementTick>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005ad4:	4b16      	ldr	r3, [pc, #88]	; (8005b30 <xTaskResumeAll+0x130>)
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	3b01      	subs	r3, #1
 8005ade:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f1      	bne.n	8005aca <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005ae6:	4b13      	ldr	r3, [pc, #76]	; (8005b34 <xTaskResumeAll+0x134>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005aec:	4b10      	ldr	r3, [pc, #64]	; (8005b30 <xTaskResumeAll+0x130>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d009      	beq.n	8005b08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005af4:	2301      	movs	r3, #1
 8005af6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005af8:	4b0f      	ldr	r3, [pc, #60]	; (8005b38 <xTaskResumeAll+0x138>)
 8005afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b08:	f001 f978 	bl	8006dfc <vPortExitCritical>

	return xAlreadyYielded;
 8005b0c:	68bb      	ldr	r3, [r7, #8]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20000e6c 	.word	0x20000e6c
 8005b1c:	20000e44 	.word	0x20000e44
 8005b20:	20000e04 	.word	0x20000e04
 8005b24:	20000e4c 	.word	0x20000e4c
 8005b28:	20000974 	.word	0x20000974
 8005b2c:	20000970 	.word	0x20000970
 8005b30:	20000e58 	.word	0x20000e58
 8005b34:	20000e54 	.word	0x20000e54
 8005b38:	e000ed04 	.word	0xe000ed04

08005b3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005b42:	4b04      	ldr	r3, [pc, #16]	; (8005b54 <xTaskGetTickCount+0x18>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005b48:	687b      	ldr	r3, [r7, #4]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bc80      	pop	{r7}
 8005b52:	4770      	bx	lr
 8005b54:	20000e48 	.word	0x20000e48

08005b58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b62:	4b51      	ldr	r3, [pc, #324]	; (8005ca8 <xTaskIncrementTick+0x150>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f040 808e 	bne.w	8005c88 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b6c:	4b4f      	ldr	r3, [pc, #316]	; (8005cac <xTaskIncrementTick+0x154>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3301      	adds	r3, #1
 8005b72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b74:	4a4d      	ldr	r2, [pc, #308]	; (8005cac <xTaskIncrementTick+0x154>)
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d120      	bne.n	8005bc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b80:	4b4b      	ldr	r3, [pc, #300]	; (8005cb0 <xTaskIncrementTick+0x158>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00a      	beq.n	8005ba0 <xTaskIncrementTick+0x48>
	__asm volatile
 8005b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	603b      	str	r3, [r7, #0]
}
 8005b9c:	bf00      	nop
 8005b9e:	e7fe      	b.n	8005b9e <xTaskIncrementTick+0x46>
 8005ba0:	4b43      	ldr	r3, [pc, #268]	; (8005cb0 <xTaskIncrementTick+0x158>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	4b43      	ldr	r3, [pc, #268]	; (8005cb4 <xTaskIncrementTick+0x15c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a41      	ldr	r2, [pc, #260]	; (8005cb0 <xTaskIncrementTick+0x158>)
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	4a41      	ldr	r2, [pc, #260]	; (8005cb4 <xTaskIncrementTick+0x15c>)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6013      	str	r3, [r2, #0]
 8005bb4:	4b40      	ldr	r3, [pc, #256]	; (8005cb8 <xTaskIncrementTick+0x160>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	4a3f      	ldr	r2, [pc, #252]	; (8005cb8 <xTaskIncrementTick+0x160>)
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	f000 fadf 	bl	8006180 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005bc2:	4b3e      	ldr	r3, [pc, #248]	; (8005cbc <xTaskIncrementTick+0x164>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d34e      	bcc.n	8005c6a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bcc:	4b38      	ldr	r3, [pc, #224]	; (8005cb0 <xTaskIncrementTick+0x158>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <xTaskIncrementTick+0x82>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <xTaskIncrementTick+0x84>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d004      	beq.n	8005bea <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005be0:	4b36      	ldr	r3, [pc, #216]	; (8005cbc <xTaskIncrementTick+0x164>)
 8005be2:	f04f 32ff 	mov.w	r2, #4294967295
 8005be6:	601a      	str	r2, [r3, #0]
					break;
 8005be8:	e03f      	b.n	8005c6a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005bea:	4b31      	ldr	r3, [pc, #196]	; (8005cb0 <xTaskIncrementTick+0x158>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d203      	bcs.n	8005c0a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c02:	4a2e      	ldr	r2, [pc, #184]	; (8005cbc <xTaskIncrementTick+0x164>)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6013      	str	r3, [r2, #0]
						break;
 8005c08:	e02f      	b.n	8005c6a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	3304      	adds	r3, #4
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fe fdf2 	bl	80047f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d004      	beq.n	8005c26 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	3318      	adds	r3, #24
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fe fde9 	bl	80047f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2a:	4b25      	ldr	r3, [pc, #148]	; (8005cc0 <xTaskIncrementTick+0x168>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d903      	bls.n	8005c3a <xTaskIncrementTick+0xe2>
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c36:	4a22      	ldr	r2, [pc, #136]	; (8005cc0 <xTaskIncrementTick+0x168>)
 8005c38:	6013      	str	r3, [r2, #0]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3e:	4613      	mov	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4a1f      	ldr	r2, [pc, #124]	; (8005cc4 <xTaskIncrementTick+0x16c>)
 8005c48:	441a      	add	r2, r3
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4610      	mov	r0, r2
 8005c52:	f7fe fd76 	bl	8004742 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5a:	4b1b      	ldr	r3, [pc, #108]	; (8005cc8 <xTaskIncrementTick+0x170>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d3b3      	bcc.n	8005bcc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005c64:	2301      	movs	r3, #1
 8005c66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c68:	e7b0      	b.n	8005bcc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c6a:	4b17      	ldr	r3, [pc, #92]	; (8005cc8 <xTaskIncrementTick+0x170>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c70:	4914      	ldr	r1, [pc, #80]	; (8005cc4 <xTaskIncrementTick+0x16c>)
 8005c72:	4613      	mov	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	440b      	add	r3, r1
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d907      	bls.n	8005c92 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005c82:	2301      	movs	r3, #1
 8005c84:	617b      	str	r3, [r7, #20]
 8005c86:	e004      	b.n	8005c92 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005c88:	4b10      	ldr	r3, [pc, #64]	; (8005ccc <xTaskIncrementTick+0x174>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	4a0f      	ldr	r2, [pc, #60]	; (8005ccc <xTaskIncrementTick+0x174>)
 8005c90:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005c92:	4b0f      	ldr	r3, [pc, #60]	; (8005cd0 <xTaskIncrementTick+0x178>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005c9e:	697b      	ldr	r3, [r7, #20]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	20000e6c 	.word	0x20000e6c
 8005cac:	20000e48 	.word	0x20000e48
 8005cb0:	20000dfc 	.word	0x20000dfc
 8005cb4:	20000e00 	.word	0x20000e00
 8005cb8:	20000e5c 	.word	0x20000e5c
 8005cbc:	20000e64 	.word	0x20000e64
 8005cc0:	20000e4c 	.word	0x20000e4c
 8005cc4:	20000974 	.word	0x20000974
 8005cc8:	20000970 	.word	0x20000970
 8005ccc:	20000e54 	.word	0x20000e54
 8005cd0:	20000e58 	.word	0x20000e58

08005cd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005cda:	4b2a      	ldr	r3, [pc, #168]	; (8005d84 <vTaskSwitchContext+0xb0>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ce2:	4b29      	ldr	r3, [pc, #164]	; (8005d88 <vTaskSwitchContext+0xb4>)
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ce8:	e046      	b.n	8005d78 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005cea:	4b27      	ldr	r3, [pc, #156]	; (8005d88 <vTaskSwitchContext+0xb4>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005cf0:	4b26      	ldr	r3, [pc, #152]	; (8005d8c <vTaskSwitchContext+0xb8>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	e010      	b.n	8005d1a <vTaskSwitchContext+0x46>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10a      	bne.n	8005d14 <vTaskSwitchContext+0x40>
	__asm volatile
 8005cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	607b      	str	r3, [r7, #4]
}
 8005d10:	bf00      	nop
 8005d12:	e7fe      	b.n	8005d12 <vTaskSwitchContext+0x3e>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	491d      	ldr	r1, [pc, #116]	; (8005d90 <vTaskSwitchContext+0xbc>)
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	440b      	add	r3, r1
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d0e4      	beq.n	8005cf8 <vTaskSwitchContext+0x24>
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	4613      	mov	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4a15      	ldr	r2, [pc, #84]	; (8005d90 <vTaskSwitchContext+0xbc>)
 8005d3a:	4413      	add	r3, r2
 8005d3c:	60bb      	str	r3, [r7, #8]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	605a      	str	r2, [r3, #4]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	3308      	adds	r3, #8
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d104      	bne.n	8005d5e <vTaskSwitchContext+0x8a>
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	605a      	str	r2, [r3, #4]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	4a0b      	ldr	r2, [pc, #44]	; (8005d94 <vTaskSwitchContext+0xc0>)
 8005d66:	6013      	str	r3, [r2, #0]
 8005d68:	4a08      	ldr	r2, [pc, #32]	; (8005d8c <vTaskSwitchContext+0xb8>)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d6e:	4b09      	ldr	r3, [pc, #36]	; (8005d94 <vTaskSwitchContext+0xc0>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3354      	adds	r3, #84	; 0x54
 8005d74:	4a08      	ldr	r2, [pc, #32]	; (8005d98 <vTaskSwitchContext+0xc4>)
 8005d76:	6013      	str	r3, [r2, #0]
}
 8005d78:	bf00      	nop
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bc80      	pop	{r7}
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	20000e6c 	.word	0x20000e6c
 8005d88:	20000e58 	.word	0x20000e58
 8005d8c:	20000e4c 	.word	0x20000e4c
 8005d90:	20000974 	.word	0x20000974
 8005d94:	20000970 	.word	0x20000970
 8005d98:	2000005c 	.word	0x2000005c

08005d9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	60fb      	str	r3, [r7, #12]
}
 8005dbe:	bf00      	nop
 8005dc0:	e7fe      	b.n	8005dc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005dc2:	4b07      	ldr	r3, [pc, #28]	; (8005de0 <vTaskPlaceOnEventList+0x44>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3318      	adds	r3, #24
 8005dc8:	4619      	mov	r1, r3
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7fe fcdc 	bl	8004788 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	6838      	ldr	r0, [r7, #0]
 8005dd4:	f000 fb8c 	bl	80064f0 <prvAddCurrentTaskToDelayedList>
}
 8005dd8:	bf00      	nop
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	20000970 	.word	0x20000970

08005de4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10a      	bne.n	8005e0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfa:	f383 8811 	msr	BASEPRI, r3
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	617b      	str	r3, [r7, #20]
}
 8005e08:	bf00      	nop
 8005e0a:	e7fe      	b.n	8005e0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e0c:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <vTaskPlaceOnEventListRestricted+0x54>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3318      	adds	r3, #24
 8005e12:	4619      	mov	r1, r3
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7fe fc94 	bl	8004742 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005e20:	f04f 33ff 	mov.w	r3, #4294967295
 8005e24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005e26:	6879      	ldr	r1, [r7, #4]
 8005e28:	68b8      	ldr	r0, [r7, #8]
 8005e2a:	f000 fb61 	bl	80064f0 <prvAddCurrentTaskToDelayedList>
	}
 8005e2e:	bf00      	nop
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000970 	.word	0x20000970

08005e3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10a      	bne.n	8005e68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	60fb      	str	r3, [r7, #12]
}
 8005e64:	bf00      	nop
 8005e66:	e7fe      	b.n	8005e66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	3318      	adds	r3, #24
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fe fcc3 	bl	80047f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e72:	4b1e      	ldr	r3, [pc, #120]	; (8005eec <xTaskRemoveFromEventList+0xb0>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d11d      	bne.n	8005eb6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fe fcba 	bl	80047f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e88:	4b19      	ldr	r3, [pc, #100]	; (8005ef0 <xTaskRemoveFromEventList+0xb4>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d903      	bls.n	8005e98 <xTaskRemoveFromEventList+0x5c>
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e94:	4a16      	ldr	r2, [pc, #88]	; (8005ef0 <xTaskRemoveFromEventList+0xb4>)
 8005e96:	6013      	str	r3, [r2, #0]
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4a13      	ldr	r2, [pc, #76]	; (8005ef4 <xTaskRemoveFromEventList+0xb8>)
 8005ea6:	441a      	add	r2, r3
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	3304      	adds	r3, #4
 8005eac:	4619      	mov	r1, r3
 8005eae:	4610      	mov	r0, r2
 8005eb0:	f7fe fc47 	bl	8004742 <vListInsertEnd>
 8005eb4:	e005      	b.n	8005ec2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	3318      	adds	r3, #24
 8005eba:	4619      	mov	r1, r3
 8005ebc:	480e      	ldr	r0, [pc, #56]	; (8005ef8 <xTaskRemoveFromEventList+0xbc>)
 8005ebe:	f7fe fc40 	bl	8004742 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec6:	4b0d      	ldr	r3, [pc, #52]	; (8005efc <xTaskRemoveFromEventList+0xc0>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d905      	bls.n	8005edc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ed4:	4b0a      	ldr	r3, [pc, #40]	; (8005f00 <xTaskRemoveFromEventList+0xc4>)
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]
 8005eda:	e001      	b.n	8005ee0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005edc:	2300      	movs	r3, #0
 8005ede:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005ee0:	697b      	ldr	r3, [r7, #20]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000e6c 	.word	0x20000e6c
 8005ef0:	20000e4c 	.word	0x20000e4c
 8005ef4:	20000974 	.word	0x20000974
 8005ef8:	20000e04 	.word	0x20000e04
 8005efc:	20000970 	.word	0x20000970
 8005f00:	20000e58 	.word	0x20000e58

08005f04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f0c:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <vTaskInternalSetTimeOutState+0x24>)
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005f14:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <vTaskInternalSetTimeOutState+0x28>)
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	605a      	str	r2, [r3, #4]
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bc80      	pop	{r7}
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	20000e5c 	.word	0x20000e5c
 8005f2c:	20000e48 	.word	0x20000e48

08005f30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b088      	sub	sp, #32
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10a      	bne.n	8005f56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	613b      	str	r3, [r7, #16]
}
 8005f52:	bf00      	nop
 8005f54:	e7fe      	b.n	8005f54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10a      	bne.n	8005f72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	60fb      	str	r3, [r7, #12]
}
 8005f6e:	bf00      	nop
 8005f70:	e7fe      	b.n	8005f70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005f72:	f000 ff13 	bl	8006d9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005f76:	4b1d      	ldr	r3, [pc, #116]	; (8005fec <xTaskCheckForTimeOut+0xbc>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8e:	d102      	bne.n	8005f96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f90:	2300      	movs	r3, #0
 8005f92:	61fb      	str	r3, [r7, #28]
 8005f94:	e023      	b.n	8005fde <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	4b15      	ldr	r3, [pc, #84]	; (8005ff0 <xTaskCheckForTimeOut+0xc0>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d007      	beq.n	8005fb2 <xTaskCheckForTimeOut+0x82>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d302      	bcc.n	8005fb2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005fac:	2301      	movs	r3, #1
 8005fae:	61fb      	str	r3, [r7, #28]
 8005fb0:	e015      	b.n	8005fde <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d20b      	bcs.n	8005fd4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	1ad2      	subs	r2, r2, r3
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff ff9b 	bl	8005f04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	61fb      	str	r3, [r7, #28]
 8005fd2:	e004      	b.n	8005fde <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005fde:	f000 ff0d 	bl	8006dfc <vPortExitCritical>

	return xReturn;
 8005fe2:	69fb      	ldr	r3, [r7, #28]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3720      	adds	r7, #32
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	20000e48 	.word	0x20000e48
 8005ff0:	20000e5c 	.word	0x20000e5c

08005ff4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ff8:	4b03      	ldr	r3, [pc, #12]	; (8006008 <vTaskMissedYield+0x14>)
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	601a      	str	r2, [r3, #0]
}
 8005ffe:	bf00      	nop
 8006000:	46bd      	mov	sp, r7
 8006002:	bc80      	pop	{r7}
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	20000e58 	.word	0x20000e58

0800600c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006014:	f000 f852 	bl	80060bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006018:	4b06      	ldr	r3, [pc, #24]	; (8006034 <prvIdleTask+0x28>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d9f9      	bls.n	8006014 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006020:	4b05      	ldr	r3, [pc, #20]	; (8006038 <prvIdleTask+0x2c>)
 8006022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006030:	e7f0      	b.n	8006014 <prvIdleTask+0x8>
 8006032:	bf00      	nop
 8006034:	20000974 	.word	0x20000974
 8006038:	e000ed04 	.word	0xe000ed04

0800603c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006042:	2300      	movs	r3, #0
 8006044:	607b      	str	r3, [r7, #4]
 8006046:	e00c      	b.n	8006062 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	4613      	mov	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4a12      	ldr	r2, [pc, #72]	; (800609c <prvInitialiseTaskLists+0x60>)
 8006054:	4413      	add	r3, r2
 8006056:	4618      	mov	r0, r3
 8006058:	f7fe fb48 	bl	80046ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3301      	adds	r3, #1
 8006060:	607b      	str	r3, [r7, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b37      	cmp	r3, #55	; 0x37
 8006066:	d9ef      	bls.n	8006048 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006068:	480d      	ldr	r0, [pc, #52]	; (80060a0 <prvInitialiseTaskLists+0x64>)
 800606a:	f7fe fb3f 	bl	80046ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800606e:	480d      	ldr	r0, [pc, #52]	; (80060a4 <prvInitialiseTaskLists+0x68>)
 8006070:	f7fe fb3c 	bl	80046ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006074:	480c      	ldr	r0, [pc, #48]	; (80060a8 <prvInitialiseTaskLists+0x6c>)
 8006076:	f7fe fb39 	bl	80046ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800607a:	480c      	ldr	r0, [pc, #48]	; (80060ac <prvInitialiseTaskLists+0x70>)
 800607c:	f7fe fb36 	bl	80046ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006080:	480b      	ldr	r0, [pc, #44]	; (80060b0 <prvInitialiseTaskLists+0x74>)
 8006082:	f7fe fb33 	bl	80046ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006086:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <prvInitialiseTaskLists+0x78>)
 8006088:	4a05      	ldr	r2, [pc, #20]	; (80060a0 <prvInitialiseTaskLists+0x64>)
 800608a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800608c:	4b0a      	ldr	r3, [pc, #40]	; (80060b8 <prvInitialiseTaskLists+0x7c>)
 800608e:	4a05      	ldr	r2, [pc, #20]	; (80060a4 <prvInitialiseTaskLists+0x68>)
 8006090:	601a      	str	r2, [r3, #0]
}
 8006092:	bf00      	nop
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20000974 	.word	0x20000974
 80060a0:	20000dd4 	.word	0x20000dd4
 80060a4:	20000de8 	.word	0x20000de8
 80060a8:	20000e04 	.word	0x20000e04
 80060ac:	20000e18 	.word	0x20000e18
 80060b0:	20000e30 	.word	0x20000e30
 80060b4:	20000dfc 	.word	0x20000dfc
 80060b8:	20000e00 	.word	0x20000e00

080060bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060c2:	e019      	b.n	80060f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80060c4:	f000 fe6a 	bl	8006d9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80060c8:	4b10      	ldr	r3, [pc, #64]	; (800610c <prvCheckTasksWaitingTermination+0x50>)
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3304      	adds	r3, #4
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fe fb8f 	bl	80047f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80060da:	4b0d      	ldr	r3, [pc, #52]	; (8006110 <prvCheckTasksWaitingTermination+0x54>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3b01      	subs	r3, #1
 80060e0:	4a0b      	ldr	r2, [pc, #44]	; (8006110 <prvCheckTasksWaitingTermination+0x54>)
 80060e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80060e4:	4b0b      	ldr	r3, [pc, #44]	; (8006114 <prvCheckTasksWaitingTermination+0x58>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3b01      	subs	r3, #1
 80060ea:	4a0a      	ldr	r2, [pc, #40]	; (8006114 <prvCheckTasksWaitingTermination+0x58>)
 80060ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80060ee:	f000 fe85 	bl	8006dfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f810 	bl	8006118 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060f8:	4b06      	ldr	r3, [pc, #24]	; (8006114 <prvCheckTasksWaitingTermination+0x58>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e1      	bne.n	80060c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20000e18 	.word	0x20000e18
 8006110:	20000e44 	.word	0x20000e44
 8006114:	20000e2c 	.word	0x20000e2c

08006118 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	3354      	adds	r3, #84	; 0x54
 8006124:	4618      	mov	r0, r3
 8006126:	f001 f919 	bl	800735c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006130:	2b00      	cmp	r3, #0
 8006132:	d108      	bne.n	8006146 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006138:	4618      	mov	r0, r3
 800613a:	f000 fff3 	bl	8007124 <vPortFree>
				vPortFree( pxTCB );
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fff0 	bl	8007124 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006144:	e018      	b.n	8006178 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800614c:	2b01      	cmp	r3, #1
 800614e:	d103      	bne.n	8006158 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 ffe7 	bl	8007124 <vPortFree>
	}
 8006156:	e00f      	b.n	8006178 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800615e:	2b02      	cmp	r3, #2
 8006160:	d00a      	beq.n	8006178 <prvDeleteTCB+0x60>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	60fb      	str	r3, [r7, #12]
}
 8006174:	bf00      	nop
 8006176:	e7fe      	b.n	8006176 <prvDeleteTCB+0x5e>
	}
 8006178:	bf00      	nop
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006186:	4b0e      	ldr	r3, [pc, #56]	; (80061c0 <prvResetNextTaskUnblockTime+0x40>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <prvResetNextTaskUnblockTime+0x14>
 8006190:	2301      	movs	r3, #1
 8006192:	e000      	b.n	8006196 <prvResetNextTaskUnblockTime+0x16>
 8006194:	2300      	movs	r3, #0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d004      	beq.n	80061a4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800619a:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <prvResetNextTaskUnblockTime+0x44>)
 800619c:	f04f 32ff 	mov.w	r2, #4294967295
 80061a0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80061a2:	e008      	b.n	80061b6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80061a4:	4b06      	ldr	r3, [pc, #24]	; (80061c0 <prvResetNextTaskUnblockTime+0x40>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	4a04      	ldr	r2, [pc, #16]	; (80061c4 <prvResetNextTaskUnblockTime+0x44>)
 80061b4:	6013      	str	r3, [r2, #0]
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr
 80061c0:	20000dfc 	.word	0x20000dfc
 80061c4:	20000e64 	.word	0x20000e64

080061c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80061ce:	4b0b      	ldr	r3, [pc, #44]	; (80061fc <xTaskGetSchedulerState+0x34>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d102      	bne.n	80061dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80061d6:	2301      	movs	r3, #1
 80061d8:	607b      	str	r3, [r7, #4]
 80061da:	e008      	b.n	80061ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061dc:	4b08      	ldr	r3, [pc, #32]	; (8006200 <xTaskGetSchedulerState+0x38>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d102      	bne.n	80061ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80061e4:	2302      	movs	r3, #2
 80061e6:	607b      	str	r3, [r7, #4]
 80061e8:	e001      	b.n	80061ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80061ea:	2300      	movs	r3, #0
 80061ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80061ee:	687b      	ldr	r3, [r7, #4]
	}
 80061f0:	4618      	mov	r0, r3
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bc80      	pop	{r7}
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	20000e50 	.word	0x20000e50
 8006200:	20000e6c 	.word	0x20000e6c

08006204 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006210:	2300      	movs	r3, #0
 8006212:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d056      	beq.n	80062c8 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800621e:	4b2d      	ldr	r3, [pc, #180]	; (80062d4 <xTaskPriorityInherit+0xd0>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006224:	429a      	cmp	r2, r3
 8006226:	d246      	bcs.n	80062b6 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	2b00      	cmp	r3, #0
 800622e:	db06      	blt.n	800623e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006230:	4b28      	ldr	r3, [pc, #160]	; (80062d4 <xTaskPriorityInherit+0xd0>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006236:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	6959      	ldr	r1, [r3, #20]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006246:	4613      	mov	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4a22      	ldr	r2, [pc, #136]	; (80062d8 <xTaskPriorityInherit+0xd4>)
 8006250:	4413      	add	r3, r2
 8006252:	4299      	cmp	r1, r3
 8006254:	d101      	bne.n	800625a <xTaskPriorityInherit+0x56>
 8006256:	2301      	movs	r3, #1
 8006258:	e000      	b.n	800625c <xTaskPriorityInherit+0x58>
 800625a:	2300      	movs	r3, #0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d022      	beq.n	80062a6 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	3304      	adds	r3, #4
 8006264:	4618      	mov	r0, r3
 8006266:	f7fe fac7 	bl	80047f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800626a:	4b1a      	ldr	r3, [pc, #104]	; (80062d4 <xTaskPriorityInherit+0xd0>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006278:	4b18      	ldr	r3, [pc, #96]	; (80062dc <xTaskPriorityInherit+0xd8>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	429a      	cmp	r2, r3
 800627e:	d903      	bls.n	8006288 <xTaskPriorityInherit+0x84>
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006284:	4a15      	ldr	r2, [pc, #84]	; (80062dc <xTaskPriorityInherit+0xd8>)
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4a10      	ldr	r2, [pc, #64]	; (80062d8 <xTaskPriorityInherit+0xd4>)
 8006296:	441a      	add	r2, r3
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	3304      	adds	r3, #4
 800629c:	4619      	mov	r1, r3
 800629e:	4610      	mov	r0, r2
 80062a0:	f7fe fa4f 	bl	8004742 <vListInsertEnd>
 80062a4:	e004      	b.n	80062b0 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80062a6:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <xTaskPriorityInherit+0xd0>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80062b0:	2301      	movs	r3, #1
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	e008      	b.n	80062c8 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062ba:	4b06      	ldr	r3, [pc, #24]	; (80062d4 <xTaskPriorityInherit+0xd0>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d201      	bcs.n	80062c8 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80062c4:	2301      	movs	r3, #1
 80062c6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80062c8:	68fb      	ldr	r3, [r7, #12]
	}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20000970 	.word	0x20000970
 80062d8:	20000974 	.word	0x20000974
 80062dc:	20000e4c 	.word	0x20000e4c

080062e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062ec:	2300      	movs	r3, #0
 80062ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d056      	beq.n	80063a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80062f6:	4b2e      	ldr	r3, [pc, #184]	; (80063b0 <xTaskPriorityDisinherit+0xd0>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d00a      	beq.n	8006316 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	60fb      	str	r3, [r7, #12]
}
 8006312:	bf00      	nop
 8006314:	e7fe      	b.n	8006314 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10a      	bne.n	8006334 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	60bb      	str	r3, [r7, #8]
}
 8006330:	bf00      	nop
 8006332:	e7fe      	b.n	8006332 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006338:	1e5a      	subs	r2, r3, #1
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006346:	429a      	cmp	r2, r3
 8006348:	d02c      	beq.n	80063a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800634e:	2b00      	cmp	r3, #0
 8006350:	d128      	bne.n	80063a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	3304      	adds	r3, #4
 8006356:	4618      	mov	r0, r3
 8006358:	f7fe fa4e 	bl	80047f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006368:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006374:	4b0f      	ldr	r3, [pc, #60]	; (80063b4 <xTaskPriorityDisinherit+0xd4>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	429a      	cmp	r2, r3
 800637a:	d903      	bls.n	8006384 <xTaskPriorityDisinherit+0xa4>
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006380:	4a0c      	ldr	r2, [pc, #48]	; (80063b4 <xTaskPriorityDisinherit+0xd4>)
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006388:	4613      	mov	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4a09      	ldr	r2, [pc, #36]	; (80063b8 <xTaskPriorityDisinherit+0xd8>)
 8006392:	441a      	add	r2, r3
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	3304      	adds	r3, #4
 8006398:	4619      	mov	r1, r3
 800639a:	4610      	mov	r0, r2
 800639c:	f7fe f9d1 	bl	8004742 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80063a0:	2301      	movs	r3, #1
 80063a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063a4:	697b      	ldr	r3, [r7, #20]
	}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	20000970 	.word	0x20000970
 80063b4:	20000e4c 	.word	0x20000e4c
 80063b8:	20000974 	.word	0x20000974

080063bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80063ca:	2301      	movs	r3, #1
 80063cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d06f      	beq.n	80064b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10a      	bne.n	80063f2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	60fb      	str	r3, [r7, #12]
}
 80063ee:	bf00      	nop
 80063f0:	e7fe      	b.n	80063f0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d902      	bls.n	8006402 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	61fb      	str	r3, [r7, #28]
 8006400:	e002      	b.n	8006408 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006406:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640c:	69fa      	ldr	r2, [r7, #28]
 800640e:	429a      	cmp	r2, r3
 8006410:	d050      	beq.n	80064b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	429a      	cmp	r2, r3
 800641a:	d14b      	bne.n	80064b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800641c:	4b27      	ldr	r3, [pc, #156]	; (80064bc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	429a      	cmp	r2, r3
 8006424:	d10a      	bne.n	800643c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	60bb      	str	r3, [r7, #8]
}
 8006438:	bf00      	nop
 800643a:	e7fe      	b.n	800643a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006440:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	69fa      	ldr	r2, [r7, #28]
 8006446:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	2b00      	cmp	r3, #0
 800644e:	db04      	blt.n	800645a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	6959      	ldr	r1, [r3, #20]
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4a15      	ldr	r2, [pc, #84]	; (80064c0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800646a:	4413      	add	r3, r2
 800646c:	4299      	cmp	r1, r3
 800646e:	d101      	bne.n	8006474 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8006470:	2301      	movs	r3, #1
 8006472:	e000      	b.n	8006476 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8006474:	2300      	movs	r3, #0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d01c      	beq.n	80064b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	3304      	adds	r3, #4
 800647e:	4618      	mov	r0, r3
 8006480:	f7fe f9ba 	bl	80047f8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006488:	4b0e      	ldr	r3, [pc, #56]	; (80064c4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	429a      	cmp	r2, r3
 800648e:	d903      	bls.n	8006498 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006494:	4a0b      	ldr	r2, [pc, #44]	; (80064c4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006496:	6013      	str	r3, [r2, #0]
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649c:	4613      	mov	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4a06      	ldr	r2, [pc, #24]	; (80064c0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80064a6:	441a      	add	r2, r3
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	3304      	adds	r3, #4
 80064ac:	4619      	mov	r1, r3
 80064ae:	4610      	mov	r0, r2
 80064b0:	f7fe f947 	bl	8004742 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064b4:	bf00      	nop
 80064b6:	3720      	adds	r7, #32
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	20000970 	.word	0x20000970
 80064c0:	20000974 	.word	0x20000974
 80064c4:	20000e4c 	.word	0x20000e4c

080064c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80064c8:	b480      	push	{r7}
 80064ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80064cc:	4b07      	ldr	r3, [pc, #28]	; (80064ec <pvTaskIncrementMutexHeldCount+0x24>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d004      	beq.n	80064de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80064d4:	4b05      	ldr	r3, [pc, #20]	; (80064ec <pvTaskIncrementMutexHeldCount+0x24>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064da:	3201      	adds	r2, #1
 80064dc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80064de:	4b03      	ldr	r3, [pc, #12]	; (80064ec <pvTaskIncrementMutexHeldCount+0x24>)
 80064e0:	681b      	ldr	r3, [r3, #0]
	}
 80064e2:	4618      	mov	r0, r3
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bc80      	pop	{r7}
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	20000970 	.word	0x20000970

080064f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064fa:	4b21      	ldr	r3, [pc, #132]	; (8006580 <prvAddCurrentTaskToDelayedList+0x90>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006500:	4b20      	ldr	r3, [pc, #128]	; (8006584 <prvAddCurrentTaskToDelayedList+0x94>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3304      	adds	r3, #4
 8006506:	4618      	mov	r0, r3
 8006508:	f7fe f976 	bl	80047f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006512:	d10a      	bne.n	800652a <prvAddCurrentTaskToDelayedList+0x3a>
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d007      	beq.n	800652a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800651a:	4b1a      	ldr	r3, [pc, #104]	; (8006584 <prvAddCurrentTaskToDelayedList+0x94>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	3304      	adds	r3, #4
 8006520:	4619      	mov	r1, r3
 8006522:	4819      	ldr	r0, [pc, #100]	; (8006588 <prvAddCurrentTaskToDelayedList+0x98>)
 8006524:	f7fe f90d 	bl	8004742 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006528:	e026      	b.n	8006578 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4413      	add	r3, r2
 8006530:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006532:	4b14      	ldr	r3, [pc, #80]	; (8006584 <prvAddCurrentTaskToDelayedList+0x94>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	429a      	cmp	r2, r3
 8006540:	d209      	bcs.n	8006556 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006542:	4b12      	ldr	r3, [pc, #72]	; (800658c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	4b0f      	ldr	r3, [pc, #60]	; (8006584 <prvAddCurrentTaskToDelayedList+0x94>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3304      	adds	r3, #4
 800654c:	4619      	mov	r1, r3
 800654e:	4610      	mov	r0, r2
 8006550:	f7fe f91a 	bl	8004788 <vListInsert>
}
 8006554:	e010      	b.n	8006578 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006556:	4b0e      	ldr	r3, [pc, #56]	; (8006590 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	4b0a      	ldr	r3, [pc, #40]	; (8006584 <prvAddCurrentTaskToDelayedList+0x94>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	3304      	adds	r3, #4
 8006560:	4619      	mov	r1, r3
 8006562:	4610      	mov	r0, r2
 8006564:	f7fe f910 	bl	8004788 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006568:	4b0a      	ldr	r3, [pc, #40]	; (8006594 <prvAddCurrentTaskToDelayedList+0xa4>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	429a      	cmp	r2, r3
 8006570:	d202      	bcs.n	8006578 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006572:	4a08      	ldr	r2, [pc, #32]	; (8006594 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	6013      	str	r3, [r2, #0]
}
 8006578:	bf00      	nop
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	20000e48 	.word	0x20000e48
 8006584:	20000970 	.word	0x20000970
 8006588:	20000e30 	.word	0x20000e30
 800658c:	20000e00 	.word	0x20000e00
 8006590:	20000dfc 	.word	0x20000dfc
 8006594:	20000e64 	.word	0x20000e64

08006598 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08a      	sub	sp, #40	; 0x28
 800659c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80065a2:	f000 facb 	bl	8006b3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80065a6:	4b1c      	ldr	r3, [pc, #112]	; (8006618 <xTimerCreateTimerTask+0x80>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d021      	beq.n	80065f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80065b2:	2300      	movs	r3, #0
 80065b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80065b6:	1d3a      	adds	r2, r7, #4
 80065b8:	f107 0108 	add.w	r1, r7, #8
 80065bc:	f107 030c 	add.w	r3, r7, #12
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7fe f879 	bl	80046b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80065c6:	6879      	ldr	r1, [r7, #4]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	9202      	str	r2, [sp, #8]
 80065ce:	9301      	str	r3, [sp, #4]
 80065d0:	2302      	movs	r3, #2
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	2300      	movs	r3, #0
 80065d6:	460a      	mov	r2, r1
 80065d8:	4910      	ldr	r1, [pc, #64]	; (800661c <xTimerCreateTimerTask+0x84>)
 80065da:	4811      	ldr	r0, [pc, #68]	; (8006620 <xTimerCreateTimerTask+0x88>)
 80065dc:	f7fe ffae 	bl	800553c <xTaskCreateStatic>
 80065e0:	4603      	mov	r3, r0
 80065e2:	4a10      	ldr	r2, [pc, #64]	; (8006624 <xTimerCreateTimerTask+0x8c>)
 80065e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80065e6:	4b0f      	ldr	r3, [pc, #60]	; (8006624 <xTimerCreateTimerTask+0x8c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80065ee:	2301      	movs	r3, #1
 80065f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10a      	bne.n	800660e <xTimerCreateTimerTask+0x76>
	__asm volatile
 80065f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	613b      	str	r3, [r7, #16]
}
 800660a:	bf00      	nop
 800660c:	e7fe      	b.n	800660c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800660e:	697b      	ldr	r3, [r7, #20]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3718      	adds	r7, #24
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	20000ea0 	.word	0x20000ea0
 800661c:	08007578 	.word	0x08007578
 8006620:	08006745 	.word	0x08006745
 8006624:	20000ea4 	.word	0x20000ea4

08006628 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b08a      	sub	sp, #40	; 0x28
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006636:	2300      	movs	r3, #0
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10a      	bne.n	8006656 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	623b      	str	r3, [r7, #32]
}
 8006652:	bf00      	nop
 8006654:	e7fe      	b.n	8006654 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006656:	4b1a      	ldr	r3, [pc, #104]	; (80066c0 <xTimerGenericCommand+0x98>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d02a      	beq.n	80066b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2b05      	cmp	r3, #5
 800666e:	dc18      	bgt.n	80066a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006670:	f7ff fdaa 	bl	80061c8 <xTaskGetSchedulerState>
 8006674:	4603      	mov	r3, r0
 8006676:	2b02      	cmp	r3, #2
 8006678:	d109      	bne.n	800668e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800667a:	4b11      	ldr	r3, [pc, #68]	; (80066c0 <xTimerGenericCommand+0x98>)
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	f107 0110 	add.w	r1, r7, #16
 8006682:	2300      	movs	r3, #0
 8006684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006686:	f7fe fa53 	bl	8004b30 <xQueueGenericSend>
 800668a:	6278      	str	r0, [r7, #36]	; 0x24
 800668c:	e012      	b.n	80066b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800668e:	4b0c      	ldr	r3, [pc, #48]	; (80066c0 <xTimerGenericCommand+0x98>)
 8006690:	6818      	ldr	r0, [r3, #0]
 8006692:	f107 0110 	add.w	r1, r7, #16
 8006696:	2300      	movs	r3, #0
 8006698:	2200      	movs	r2, #0
 800669a:	f7fe fa49 	bl	8004b30 <xQueueGenericSend>
 800669e:	6278      	str	r0, [r7, #36]	; 0x24
 80066a0:	e008      	b.n	80066b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80066a2:	4b07      	ldr	r3, [pc, #28]	; (80066c0 <xTimerGenericCommand+0x98>)
 80066a4:	6818      	ldr	r0, [r3, #0]
 80066a6:	f107 0110 	add.w	r1, r7, #16
 80066aa:	2300      	movs	r3, #0
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	f7fe fb3d 	bl	8004d2c <xQueueGenericSendFromISR>
 80066b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3728      	adds	r7, #40	; 0x28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	20000ea0 	.word	0x20000ea0

080066c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066ce:	4b1c      	ldr	r3, [pc, #112]	; (8006740 <prvProcessExpiredTimer+0x7c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	3304      	adds	r3, #4
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fe f88b 	bl	80047f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d122      	bne.n	8006730 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	699a      	ldr	r2, [r3, #24]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	18d1      	adds	r1, r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	6978      	ldr	r0, [r7, #20]
 80066f8:	f000 f8c8 	bl	800688c <prvInsertTimerInActiveList>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d016      	beq.n	8006730 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006702:	2300      	movs	r3, #0
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	2300      	movs	r3, #0
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	2100      	movs	r1, #0
 800670c:	6978      	ldr	r0, [r7, #20]
 800670e:	f7ff ff8b 	bl	8006628 <xTimerGenericCommand>
 8006712:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10a      	bne.n	8006730 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	60fb      	str	r3, [r7, #12]
}
 800672c:	bf00      	nop
 800672e:	e7fe      	b.n	800672e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	6978      	ldr	r0, [r7, #20]
 8006736:	4798      	blx	r3
}
 8006738:	bf00      	nop
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	20000e98 	.word	0x20000e98

08006744 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800674c:	f107 0308 	add.w	r3, r7, #8
 8006750:	4618      	mov	r0, r3
 8006752:	f000 f857 	bl	8006804 <prvGetNextExpireTime>
 8006756:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	4619      	mov	r1, r3
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 f803 	bl	8006768 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006762:	f000 f8d5 	bl	8006910 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006766:	e7f1      	b.n	800674c <prvTimerTask+0x8>

08006768 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006772:	f7ff f937 	bl	80059e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006776:	f107 0308 	add.w	r3, r7, #8
 800677a:	4618      	mov	r0, r3
 800677c:	f000 f866 	bl	800684c <prvSampleTimeNow>
 8006780:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d130      	bne.n	80067ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10a      	bne.n	80067a4 <prvProcessTimerOrBlockTask+0x3c>
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	429a      	cmp	r2, r3
 8006794:	d806      	bhi.n	80067a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006796:	f7ff f933 	bl	8005a00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800679a:	68f9      	ldr	r1, [r7, #12]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f7ff ff91 	bl	80066c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80067a2:	e024      	b.n	80067ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d008      	beq.n	80067bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80067aa:	4b13      	ldr	r3, [pc, #76]	; (80067f8 <prvProcessTimerOrBlockTask+0x90>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	bf0c      	ite	eq
 80067b4:	2301      	moveq	r3, #1
 80067b6:	2300      	movne	r3, #0
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80067bc:	4b0f      	ldr	r3, [pc, #60]	; (80067fc <prvProcessTimerOrBlockTask+0x94>)
 80067be:	6818      	ldr	r0, [r3, #0]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	4619      	mov	r1, r3
 80067ca:	f7fe fe83 	bl	80054d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80067ce:	f7ff f917 	bl	8005a00 <xTaskResumeAll>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10a      	bne.n	80067ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80067d8:	4b09      	ldr	r3, [pc, #36]	; (8006800 <prvProcessTimerOrBlockTask+0x98>)
 80067da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	f3bf 8f6f 	isb	sy
}
 80067e8:	e001      	b.n	80067ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80067ea:	f7ff f909 	bl	8005a00 <xTaskResumeAll>
}
 80067ee:	bf00      	nop
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20000e9c 	.word	0x20000e9c
 80067fc:	20000ea0 	.word	0x20000ea0
 8006800:	e000ed04 	.word	0xe000ed04

08006804 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800680c:	4b0e      	ldr	r3, [pc, #56]	; (8006848 <prvGetNextExpireTime+0x44>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	bf0c      	ite	eq
 8006816:	2301      	moveq	r3, #1
 8006818:	2300      	movne	r3, #0
 800681a:	b2db      	uxtb	r3, r3
 800681c:	461a      	mov	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d105      	bne.n	8006836 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800682a:	4b07      	ldr	r3, [pc, #28]	; (8006848 <prvGetNextExpireTime+0x44>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	e001      	b.n	800683a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006836:	2300      	movs	r3, #0
 8006838:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800683a:	68fb      	ldr	r3, [r7, #12]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	bc80      	pop	{r7}
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	20000e98 	.word	0x20000e98

0800684c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006854:	f7ff f972 	bl	8005b3c <xTaskGetTickCount>
 8006858:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800685a:	4b0b      	ldr	r3, [pc, #44]	; (8006888 <prvSampleTimeNow+0x3c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	429a      	cmp	r2, r3
 8006862:	d205      	bcs.n	8006870 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006864:	f000 f908 	bl	8006a78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	e002      	b.n	8006876 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006876:	4a04      	ldr	r2, [pc, #16]	; (8006888 <prvSampleTimeNow+0x3c>)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800687c:	68fb      	ldr	r3, [r7, #12]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20000ea8 	.word	0x20000ea8

0800688c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800689a:	2300      	movs	r3, #0
 800689c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d812      	bhi.n	80068d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	1ad2      	subs	r2, r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d302      	bcc.n	80068c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80068c0:	2301      	movs	r3, #1
 80068c2:	617b      	str	r3, [r7, #20]
 80068c4:	e01b      	b.n	80068fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80068c6:	4b10      	ldr	r3, [pc, #64]	; (8006908 <prvInsertTimerInActiveList+0x7c>)
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3304      	adds	r3, #4
 80068ce:	4619      	mov	r1, r3
 80068d0:	4610      	mov	r0, r2
 80068d2:	f7fd ff59 	bl	8004788 <vListInsert>
 80068d6:	e012      	b.n	80068fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d206      	bcs.n	80068ee <prvInsertTimerInActiveList+0x62>
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d302      	bcc.n	80068ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80068e8:	2301      	movs	r3, #1
 80068ea:	617b      	str	r3, [r7, #20]
 80068ec:	e007      	b.n	80068fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068ee:	4b07      	ldr	r3, [pc, #28]	; (800690c <prvInsertTimerInActiveList+0x80>)
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	3304      	adds	r3, #4
 80068f6:	4619      	mov	r1, r3
 80068f8:	4610      	mov	r0, r2
 80068fa:	f7fd ff45 	bl	8004788 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80068fe:	697b      	ldr	r3, [r7, #20]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3718      	adds	r7, #24
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	20000e9c 	.word	0x20000e9c
 800690c:	20000e98 	.word	0x20000e98

08006910 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b08e      	sub	sp, #56	; 0x38
 8006914:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006916:	e09d      	b.n	8006a54 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	da18      	bge.n	8006950 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800691e:	1d3b      	adds	r3, r7, #4
 8006920:	3304      	adds	r3, #4
 8006922:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10a      	bne.n	8006940 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800692a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	61fb      	str	r3, [r7, #28]
}
 800693c:	bf00      	nop
 800693e:	e7fe      	b.n	800693e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006946:	6850      	ldr	r0, [r2, #4]
 8006948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800694a:	6892      	ldr	r2, [r2, #8]
 800694c:	4611      	mov	r1, r2
 800694e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	db7e      	blt.n	8006a54 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800695a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d004      	beq.n	800696c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006964:	3304      	adds	r3, #4
 8006966:	4618      	mov	r0, r3
 8006968:	f7fd ff46 	bl	80047f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800696c:	463b      	mov	r3, r7
 800696e:	4618      	mov	r0, r3
 8006970:	f7ff ff6c 	bl	800684c <prvSampleTimeNow>
 8006974:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b09      	cmp	r3, #9
 800697a:	d86a      	bhi.n	8006a52 <prvProcessReceivedCommands+0x142>
 800697c:	a201      	add	r2, pc, #4	; (adr r2, 8006984 <prvProcessReceivedCommands+0x74>)
 800697e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006982:	bf00      	nop
 8006984:	080069ad 	.word	0x080069ad
 8006988:	080069ad 	.word	0x080069ad
 800698c:	080069ad 	.word	0x080069ad
 8006990:	08006a55 	.word	0x08006a55
 8006994:	08006a09 	.word	0x08006a09
 8006998:	08006a41 	.word	0x08006a41
 800699c:	080069ad 	.word	0x080069ad
 80069a0:	080069ad 	.word	0x080069ad
 80069a4:	08006a55 	.word	0x08006a55
 80069a8:	08006a09 	.word	0x08006a09
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	18d1      	adds	r1, r2, r3
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ba:	f7ff ff67 	bl	800688c <prvInsertTimerInActiveList>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d047      	beq.n	8006a54 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ca:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80069cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ce:	69db      	ldr	r3, [r3, #28]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d13f      	bne.n	8006a54 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	441a      	add	r2, r3
 80069dc:	2300      	movs	r3, #0
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	2300      	movs	r3, #0
 80069e2:	2100      	movs	r1, #0
 80069e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069e6:	f7ff fe1f 	bl	8006628 <xTimerGenericCommand>
 80069ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d130      	bne.n	8006a54 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	61bb      	str	r3, [r7, #24]
}
 8006a04:	bf00      	nop
 8006a06:	e7fe      	b.n	8006a06 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10a      	bne.n	8006a2c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	617b      	str	r3, [r7, #20]
}
 8006a28:	bf00      	nop
 8006a2a:	e7fe      	b.n	8006a2a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2e:	699a      	ldr	r2, [r3, #24]
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	18d1      	adds	r1, r2, r3
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a3a:	f7ff ff27 	bl	800688c <prvInsertTimerInActiveList>
					break;
 8006a3e:	e009      	b.n	8006a54 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d104      	bne.n	8006a54 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006a4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a4c:	f000 fb6a 	bl	8007124 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a50:	e000      	b.n	8006a54 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8006a52:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a54:	4b07      	ldr	r3, [pc, #28]	; (8006a74 <prvProcessReceivedCommands+0x164>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	1d39      	adds	r1, r7, #4
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fe f9fd 	bl	8004e5c <xQueueReceive>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f47f af57 	bne.w	8006918 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006a6a:	bf00      	nop
 8006a6c:	bf00      	nop
 8006a6e:	3730      	adds	r7, #48	; 0x30
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	20000ea0 	.word	0x20000ea0

08006a78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a7e:	e045      	b.n	8006b0c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a80:	4b2c      	ldr	r3, [pc, #176]	; (8006b34 <prvSwitchTimerLists+0xbc>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a8a:	4b2a      	ldr	r3, [pc, #168]	; (8006b34 <prvSwitchTimerLists+0xbc>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	3304      	adds	r3, #4
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7fd fead 	bl	80047f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d12e      	bne.n	8006b0c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d90e      	bls.n	8006ade <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006acc:	4b19      	ldr	r3, [pc, #100]	; (8006b34 <prvSwitchTimerLists+0xbc>)
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	f7fd fe56 	bl	8004788 <vListInsert>
 8006adc:	e016      	b.n	8006b0c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ade:	2300      	movs	r3, #0
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f7ff fd9d 	bl	8006628 <xTimerGenericCommand>
 8006aee:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10a      	bne.n	8006b0c <prvSwitchTimerLists+0x94>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	603b      	str	r3, [r7, #0]
}
 8006b08:	bf00      	nop
 8006b0a:	e7fe      	b.n	8006b0a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b0c:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <prvSwitchTimerLists+0xbc>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1b4      	bne.n	8006a80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b16:	4b07      	ldr	r3, [pc, #28]	; (8006b34 <prvSwitchTimerLists+0xbc>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b1c:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <prvSwitchTimerLists+0xc0>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a04      	ldr	r2, [pc, #16]	; (8006b34 <prvSwitchTimerLists+0xbc>)
 8006b22:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b24:	4a04      	ldr	r2, [pc, #16]	; (8006b38 <prvSwitchTimerLists+0xc0>)
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	6013      	str	r3, [r2, #0]
}
 8006b2a:	bf00      	nop
 8006b2c:	3718      	adds	r7, #24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	20000e98 	.word	0x20000e98
 8006b38:	20000e9c 	.word	0x20000e9c

08006b3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b42:	f000 f92b 	bl	8006d9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b46:	4b15      	ldr	r3, [pc, #84]	; (8006b9c <prvCheckForValidListAndQueue+0x60>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d120      	bne.n	8006b90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b4e:	4814      	ldr	r0, [pc, #80]	; (8006ba0 <prvCheckForValidListAndQueue+0x64>)
 8006b50:	f7fd fdcc 	bl	80046ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b54:	4813      	ldr	r0, [pc, #76]	; (8006ba4 <prvCheckForValidListAndQueue+0x68>)
 8006b56:	f7fd fdc9 	bl	80046ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b5a:	4b13      	ldr	r3, [pc, #76]	; (8006ba8 <prvCheckForValidListAndQueue+0x6c>)
 8006b5c:	4a10      	ldr	r2, [pc, #64]	; (8006ba0 <prvCheckForValidListAndQueue+0x64>)
 8006b5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b60:	4b12      	ldr	r3, [pc, #72]	; (8006bac <prvCheckForValidListAndQueue+0x70>)
 8006b62:	4a10      	ldr	r2, [pc, #64]	; (8006ba4 <prvCheckForValidListAndQueue+0x68>)
 8006b64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b66:	2300      	movs	r3, #0
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	4b11      	ldr	r3, [pc, #68]	; (8006bb0 <prvCheckForValidListAndQueue+0x74>)
 8006b6c:	4a11      	ldr	r2, [pc, #68]	; (8006bb4 <prvCheckForValidListAndQueue+0x78>)
 8006b6e:	2110      	movs	r1, #16
 8006b70:	200a      	movs	r0, #10
 8006b72:	f7fd fed3 	bl	800491c <xQueueGenericCreateStatic>
 8006b76:	4603      	mov	r3, r0
 8006b78:	4a08      	ldr	r2, [pc, #32]	; (8006b9c <prvCheckForValidListAndQueue+0x60>)
 8006b7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b7c:	4b07      	ldr	r3, [pc, #28]	; (8006b9c <prvCheckForValidListAndQueue+0x60>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d005      	beq.n	8006b90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b84:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <prvCheckForValidListAndQueue+0x60>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	490b      	ldr	r1, [pc, #44]	; (8006bb8 <prvCheckForValidListAndQueue+0x7c>)
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fe fc7a 	bl	8005484 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b90:	f000 f934 	bl	8006dfc <vPortExitCritical>
}
 8006b94:	bf00      	nop
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20000ea0 	.word	0x20000ea0
 8006ba0:	20000e70 	.word	0x20000e70
 8006ba4:	20000e84 	.word	0x20000e84
 8006ba8:	20000e98 	.word	0x20000e98
 8006bac:	20000e9c 	.word	0x20000e9c
 8006bb0:	20000f4c 	.word	0x20000f4c
 8006bb4:	20000eac 	.word	0x20000eac
 8006bb8:	08007580 	.word	0x08007580

08006bbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3b04      	subs	r3, #4
 8006bcc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	3b04      	subs	r3, #4
 8006bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	f023 0201 	bic.w	r2, r3, #1
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	3b04      	subs	r3, #4
 8006bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006bec:	4a08      	ldr	r2, [pc, #32]	; (8006c10 <pxPortInitialiseStack+0x54>)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	3b14      	subs	r3, #20
 8006bf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	3b20      	subs	r3, #32
 8006c02:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c04:	68fb      	ldr	r3, [r7, #12]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bc80      	pop	{r7}
 8006c0e:	4770      	bx	lr
 8006c10:	08006c15 	.word	0x08006c15

08006c14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c1e:	4b12      	ldr	r3, [pc, #72]	; (8006c68 <prvTaskExitError+0x54>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c26:	d00a      	beq.n	8006c3e <prvTaskExitError+0x2a>
	__asm volatile
 8006c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	60fb      	str	r3, [r7, #12]
}
 8006c3a:	bf00      	nop
 8006c3c:	e7fe      	b.n	8006c3c <prvTaskExitError+0x28>
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	60bb      	str	r3, [r7, #8]
}
 8006c50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c52:	bf00      	nop
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0fc      	beq.n	8006c54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c5a:	bf00      	nop
 8006c5c:	bf00      	nop
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bc80      	pop	{r7}
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	2000000c 	.word	0x2000000c
 8006c6c:	00000000 	.word	0x00000000

08006c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c70:	4b07      	ldr	r3, [pc, #28]	; (8006c90 <pxCurrentTCBConst2>)
 8006c72:	6819      	ldr	r1, [r3, #0]
 8006c74:	6808      	ldr	r0, [r1, #0]
 8006c76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c7a:	f380 8809 	msr	PSP, r0
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f04f 0000 	mov.w	r0, #0
 8006c86:	f380 8811 	msr	BASEPRI, r0
 8006c8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006c8e:	4770      	bx	lr

08006c90 <pxCurrentTCBConst2>:
 8006c90:	20000970 	.word	0x20000970
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop

08006c98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006c98:	4806      	ldr	r0, [pc, #24]	; (8006cb4 <prvPortStartFirstTask+0x1c>)
 8006c9a:	6800      	ldr	r0, [r0, #0]
 8006c9c:	6800      	ldr	r0, [r0, #0]
 8006c9e:	f380 8808 	msr	MSP, r0
 8006ca2:	b662      	cpsie	i
 8006ca4:	b661      	cpsie	f
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	df00      	svc	0
 8006cb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006cb2:	bf00      	nop
 8006cb4:	e000ed08 	.word	0xe000ed08

08006cb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cbe:	4b32      	ldr	r3, [pc, #200]	; (8006d88 <xPortStartScheduler+0xd0>)
 8006cc0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	22ff      	movs	r2, #255	; 0xff
 8006cce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006cd8:	78fb      	ldrb	r3, [r7, #3]
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	4b2a      	ldr	r3, [pc, #168]	; (8006d8c <xPortStartScheduler+0xd4>)
 8006ce4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ce6:	4b2a      	ldr	r3, [pc, #168]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006ce8:	2207      	movs	r2, #7
 8006cea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cec:	e009      	b.n	8006d02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006cee:	4b28      	ldr	r3, [pc, #160]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	4a26      	ldr	r2, [pc, #152]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006cf6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006cf8:	78fb      	ldrb	r3, [r7, #3]
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d02:	78fb      	ldrb	r3, [r7, #3]
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d0a:	2b80      	cmp	r3, #128	; 0x80
 8006d0c:	d0ef      	beq.n	8006cee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d0e:	4b20      	ldr	r3, [pc, #128]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f1c3 0307 	rsb	r3, r3, #7
 8006d16:	2b04      	cmp	r3, #4
 8006d18:	d00a      	beq.n	8006d30 <xPortStartScheduler+0x78>
	__asm volatile
 8006d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	60bb      	str	r3, [r7, #8]
}
 8006d2c:	bf00      	nop
 8006d2e:	e7fe      	b.n	8006d2e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d30:	4b17      	ldr	r3, [pc, #92]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	021b      	lsls	r3, r3, #8
 8006d36:	4a16      	ldr	r2, [pc, #88]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006d38:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d3a:	4b15      	ldr	r3, [pc, #84]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d42:	4a13      	ldr	r2, [pc, #76]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006d44:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d4e:	4b11      	ldr	r3, [pc, #68]	; (8006d94 <xPortStartScheduler+0xdc>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a10      	ldr	r2, [pc, #64]	; (8006d94 <xPortStartScheduler+0xdc>)
 8006d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d5a:	4b0e      	ldr	r3, [pc, #56]	; (8006d94 <xPortStartScheduler+0xdc>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a0d      	ldr	r2, [pc, #52]	; (8006d94 <xPortStartScheduler+0xdc>)
 8006d60:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d64:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d66:	f000 f8b9 	bl	8006edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d6a:	4b0b      	ldr	r3, [pc, #44]	; (8006d98 <xPortStartScheduler+0xe0>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d70:	f7ff ff92 	bl	8006c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d74:	f7fe ffae 	bl	8005cd4 <vTaskSwitchContext>
	prvTaskExitError();
 8006d78:	f7ff ff4c 	bl	8006c14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	e000e400 	.word	0xe000e400
 8006d8c:	20000f9c 	.word	0x20000f9c
 8006d90:	20000fa0 	.word	0x20000fa0
 8006d94:	e000ed20 	.word	0xe000ed20
 8006d98:	2000000c 	.word	0x2000000c

08006d9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
	__asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	607b      	str	r3, [r7, #4]
}
 8006db4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006db6:	4b0f      	ldr	r3, [pc, #60]	; (8006df4 <vPortEnterCritical+0x58>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	4a0d      	ldr	r2, [pc, #52]	; (8006df4 <vPortEnterCritical+0x58>)
 8006dbe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006dc0:	4b0c      	ldr	r3, [pc, #48]	; (8006df4 <vPortEnterCritical+0x58>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d10f      	bne.n	8006de8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006dc8:	4b0b      	ldr	r3, [pc, #44]	; (8006df8 <vPortEnterCritical+0x5c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00a      	beq.n	8006de8 <vPortEnterCritical+0x4c>
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	603b      	str	r3, [r7, #0]
}
 8006de4:	bf00      	nop
 8006de6:	e7fe      	b.n	8006de6 <vPortEnterCritical+0x4a>
	}
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bc80      	pop	{r7}
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	2000000c 	.word	0x2000000c
 8006df8:	e000ed04 	.word	0xe000ed04

08006dfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e02:	4b11      	ldr	r3, [pc, #68]	; (8006e48 <vPortExitCritical+0x4c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10a      	bne.n	8006e20 <vPortExitCritical+0x24>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	607b      	str	r3, [r7, #4]
}
 8006e1c:	bf00      	nop
 8006e1e:	e7fe      	b.n	8006e1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e20:	4b09      	ldr	r3, [pc, #36]	; (8006e48 <vPortExitCritical+0x4c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3b01      	subs	r3, #1
 8006e26:	4a08      	ldr	r2, [pc, #32]	; (8006e48 <vPortExitCritical+0x4c>)
 8006e28:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e2a:	4b07      	ldr	r3, [pc, #28]	; (8006e48 <vPortExitCritical+0x4c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d105      	bne.n	8006e3e <vPortExitCritical+0x42>
 8006e32:	2300      	movs	r3, #0
 8006e34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	f383 8811 	msr	BASEPRI, r3
}
 8006e3c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e3e:	bf00      	nop
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bc80      	pop	{r7}
 8006e46:	4770      	bx	lr
 8006e48:	2000000c 	.word	0x2000000c
 8006e4c:	00000000 	.word	0x00000000

08006e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e50:	f3ef 8009 	mrs	r0, PSP
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	4b0d      	ldr	r3, [pc, #52]	; (8006e90 <pxCurrentTCBConst>)
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e60:	6010      	str	r0, [r2, #0]
 8006e62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006e66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e6a:	f380 8811 	msr	BASEPRI, r0
 8006e6e:	f7fe ff31 	bl	8005cd4 <vTaskSwitchContext>
 8006e72:	f04f 0000 	mov.w	r0, #0
 8006e76:	f380 8811 	msr	BASEPRI, r0
 8006e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006e7e:	6819      	ldr	r1, [r3, #0]
 8006e80:	6808      	ldr	r0, [r1, #0]
 8006e82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e86:	f380 8809 	msr	PSP, r0
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	4770      	bx	lr

08006e90 <pxCurrentTCBConst>:
 8006e90:	20000970 	.word	0x20000970
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e94:	bf00      	nop
 8006e96:	bf00      	nop

08006e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	607b      	str	r3, [r7, #4]
}
 8006eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006eb2:	f7fe fe51 	bl	8005b58 <xTaskIncrementTick>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ebc:	4b06      	ldr	r3, [pc, #24]	; (8006ed8 <SysTick_Handler+0x40>)
 8006ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	f383 8811 	msr	BASEPRI, r3
}
 8006ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ed0:	bf00      	nop
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	e000ed04 	.word	0xe000ed04

08006edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ee0:	4b0a      	ldr	r3, [pc, #40]	; (8006f0c <vPortSetupTimerInterrupt+0x30>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ee6:	4b0a      	ldr	r3, [pc, #40]	; (8006f10 <vPortSetupTimerInterrupt+0x34>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006eec:	4b09      	ldr	r3, [pc, #36]	; (8006f14 <vPortSetupTimerInterrupt+0x38>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a09      	ldr	r2, [pc, #36]	; (8006f18 <vPortSetupTimerInterrupt+0x3c>)
 8006ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef6:	099b      	lsrs	r3, r3, #6
 8006ef8:	4a08      	ldr	r2, [pc, #32]	; (8006f1c <vPortSetupTimerInterrupt+0x40>)
 8006efa:	3b01      	subs	r3, #1
 8006efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006efe:	4b03      	ldr	r3, [pc, #12]	; (8006f0c <vPortSetupTimerInterrupt+0x30>)
 8006f00:	2207      	movs	r2, #7
 8006f02:	601a      	str	r2, [r3, #0]
}
 8006f04:	bf00      	nop
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bc80      	pop	{r7}
 8006f0a:	4770      	bx	lr
 8006f0c:	e000e010 	.word	0xe000e010
 8006f10:	e000e018 	.word	0xe000e018
 8006f14:	20000000 	.word	0x20000000
 8006f18:	10624dd3 	.word	0x10624dd3
 8006f1c:	e000e014 	.word	0xe000e014

08006f20 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f26:	f3ef 8305 	mrs	r3, IPSR
 8006f2a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2b0f      	cmp	r3, #15
 8006f30:	d914      	bls.n	8006f5c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f32:	4a16      	ldr	r2, [pc, #88]	; (8006f8c <vPortValidateInterruptPriority+0x6c>)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4413      	add	r3, r2
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f3c:	4b14      	ldr	r3, [pc, #80]	; (8006f90 <vPortValidateInterruptPriority+0x70>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	7afa      	ldrb	r2, [r7, #11]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d20a      	bcs.n	8006f5c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	607b      	str	r3, [r7, #4]
}
 8006f58:	bf00      	nop
 8006f5a:	e7fe      	b.n	8006f5a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f5c:	4b0d      	ldr	r3, [pc, #52]	; (8006f94 <vPortValidateInterruptPriority+0x74>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f64:	4b0c      	ldr	r3, [pc, #48]	; (8006f98 <vPortValidateInterruptPriority+0x78>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d90a      	bls.n	8006f82 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	603b      	str	r3, [r7, #0]
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <vPortValidateInterruptPriority+0x60>
	}
 8006f82:	bf00      	nop
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bc80      	pop	{r7}
 8006f8a:	4770      	bx	lr
 8006f8c:	e000e3f0 	.word	0xe000e3f0
 8006f90:	20000f9c 	.word	0x20000f9c
 8006f94:	e000ed0c 	.word	0xe000ed0c
 8006f98:	20000fa0 	.word	0x20000fa0

08006f9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08a      	sub	sp, #40	; 0x28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006fa8:	f7fe fd1c 	bl	80059e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006fac:	4b58      	ldr	r3, [pc, #352]	; (8007110 <pvPortMalloc+0x174>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006fb4:	f000 f910 	bl	80071d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006fb8:	4b56      	ldr	r3, [pc, #344]	; (8007114 <pvPortMalloc+0x178>)
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f040 808e 	bne.w	80070e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d01d      	beq.n	8007008 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006fcc:	2208      	movs	r2, #8
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f003 0307 	and.w	r3, r3, #7
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d014      	beq.n	8007008 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f023 0307 	bic.w	r3, r3, #7
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f003 0307 	and.w	r3, r3, #7
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00a      	beq.n	8007008 <pvPortMalloc+0x6c>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	617b      	str	r3, [r7, #20]
}
 8007004:	bf00      	nop
 8007006:	e7fe      	b.n	8007006 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d069      	beq.n	80070e2 <pvPortMalloc+0x146>
 800700e:	4b42      	ldr	r3, [pc, #264]	; (8007118 <pvPortMalloc+0x17c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	429a      	cmp	r2, r3
 8007016:	d864      	bhi.n	80070e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007018:	4b40      	ldr	r3, [pc, #256]	; (800711c <pvPortMalloc+0x180>)
 800701a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800701c:	4b3f      	ldr	r3, [pc, #252]	; (800711c <pvPortMalloc+0x180>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007022:	e004      	b.n	800702e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	429a      	cmp	r2, r3
 8007036:	d903      	bls.n	8007040 <pvPortMalloc+0xa4>
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1f1      	bne.n	8007024 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007040:	4b33      	ldr	r3, [pc, #204]	; (8007110 <pvPortMalloc+0x174>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007046:	429a      	cmp	r2, r3
 8007048:	d04b      	beq.n	80070e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2208      	movs	r2, #8
 8007050:	4413      	add	r3, r2
 8007052:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	1ad2      	subs	r2, r2, r3
 8007064:	2308      	movs	r3, #8
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	429a      	cmp	r2, r3
 800706a:	d91f      	bls.n	80070ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800706c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4413      	add	r3, r2
 8007072:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	f003 0307 	and.w	r3, r3, #7
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <pvPortMalloc+0xf8>
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	613b      	str	r3, [r7, #16]
}
 8007090:	bf00      	nop
 8007092:	e7fe      	b.n	8007092 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	1ad2      	subs	r2, r2, r3
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070a6:	69b8      	ldr	r0, [r7, #24]
 80070a8:	f000 f8f8 	bl	800729c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070ac:	4b1a      	ldr	r3, [pc, #104]	; (8007118 <pvPortMalloc+0x17c>)
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	4a18      	ldr	r2, [pc, #96]	; (8007118 <pvPortMalloc+0x17c>)
 80070b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070ba:	4b17      	ldr	r3, [pc, #92]	; (8007118 <pvPortMalloc+0x17c>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	4b18      	ldr	r3, [pc, #96]	; (8007120 <pvPortMalloc+0x184>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d203      	bcs.n	80070ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070c6:	4b14      	ldr	r3, [pc, #80]	; (8007118 <pvPortMalloc+0x17c>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a15      	ldr	r2, [pc, #84]	; (8007120 <pvPortMalloc+0x184>)
 80070cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	4b10      	ldr	r3, [pc, #64]	; (8007114 <pvPortMalloc+0x178>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	431a      	orrs	r2, r3
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80070dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070de:	2200      	movs	r2, #0
 80070e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80070e2:	f7fe fc8d 	bl	8005a00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	f003 0307 	and.w	r3, r3, #7
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00a      	beq.n	8007106 <pvPortMalloc+0x16a>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	60fb      	str	r3, [r7, #12]
}
 8007102:	bf00      	nop
 8007104:	e7fe      	b.n	8007104 <pvPortMalloc+0x168>
	return pvReturn;
 8007106:	69fb      	ldr	r3, [r7, #28]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3728      	adds	r7, #40	; 0x28
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	20001bac 	.word	0x20001bac
 8007114:	20001bb8 	.word	0x20001bb8
 8007118:	20001bb0 	.word	0x20001bb0
 800711c:	20001ba4 	.word	0x20001ba4
 8007120:	20001bb4 	.word	0x20001bb4

08007124 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d048      	beq.n	80071c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007136:	2308      	movs	r3, #8
 8007138:	425b      	negs	r3, r3
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	4413      	add	r3, r2
 800713e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	4b21      	ldr	r3, [pc, #132]	; (80071d0 <vPortFree+0xac>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4013      	ands	r3, r2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10a      	bne.n	8007168 <vPortFree+0x44>
	__asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	60fb      	str	r3, [r7, #12]
}
 8007164:	bf00      	nop
 8007166:	e7fe      	b.n	8007166 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00a      	beq.n	8007186 <vPortFree+0x62>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	60bb      	str	r3, [r7, #8]
}
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	4b11      	ldr	r3, [pc, #68]	; (80071d0 <vPortFree+0xac>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4013      	ands	r3, r2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d019      	beq.n	80071c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d115      	bne.n	80071c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	4b0b      	ldr	r3, [pc, #44]	; (80071d0 <vPortFree+0xac>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	43db      	mvns	r3, r3
 80071a6:	401a      	ands	r2, r3
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071ac:	f7fe fc1a 	bl	80059e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	4b07      	ldr	r3, [pc, #28]	; (80071d4 <vPortFree+0xb0>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4413      	add	r3, r2
 80071ba:	4a06      	ldr	r2, [pc, #24]	; (80071d4 <vPortFree+0xb0>)
 80071bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071be:	6938      	ldr	r0, [r7, #16]
 80071c0:	f000 f86c 	bl	800729c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80071c4:	f7fe fc1c 	bl	8005a00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071c8:	bf00      	nop
 80071ca:	3718      	adds	r7, #24
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	20001bb8 	.word	0x20001bb8
 80071d4:	20001bb0 	.word	0x20001bb0

080071d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80071e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071e4:	4b27      	ldr	r3, [pc, #156]	; (8007284 <prvHeapInit+0xac>)
 80071e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f003 0307 	and.w	r3, r3, #7
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00c      	beq.n	800720c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	3307      	adds	r3, #7
 80071f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f023 0307 	bic.w	r3, r3, #7
 80071fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	4a1f      	ldr	r2, [pc, #124]	; (8007284 <prvHeapInit+0xac>)
 8007208:	4413      	add	r3, r2
 800720a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007210:	4a1d      	ldr	r2, [pc, #116]	; (8007288 <prvHeapInit+0xb0>)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007216:	4b1c      	ldr	r3, [pc, #112]	; (8007288 <prvHeapInit+0xb0>)
 8007218:	2200      	movs	r2, #0
 800721a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	4413      	add	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007224:	2208      	movs	r2, #8
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	1a9b      	subs	r3, r3, r2
 800722a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f023 0307 	bic.w	r3, r3, #7
 8007232:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	4a15      	ldr	r2, [pc, #84]	; (800728c <prvHeapInit+0xb4>)
 8007238:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800723a:	4b14      	ldr	r3, [pc, #80]	; (800728c <prvHeapInit+0xb4>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2200      	movs	r2, #0
 8007240:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007242:	4b12      	ldr	r3, [pc, #72]	; (800728c <prvHeapInit+0xb4>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2200      	movs	r2, #0
 8007248:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	1ad2      	subs	r2, r2, r3
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007258:	4b0c      	ldr	r3, [pc, #48]	; (800728c <prvHeapInit+0xb4>)
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	4a0a      	ldr	r2, [pc, #40]	; (8007290 <prvHeapInit+0xb8>)
 8007266:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	4a09      	ldr	r2, [pc, #36]	; (8007294 <prvHeapInit+0xbc>)
 800726e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007270:	4b09      	ldr	r3, [pc, #36]	; (8007298 <prvHeapInit+0xc0>)
 8007272:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007276:	601a      	str	r2, [r3, #0]
}
 8007278:	bf00      	nop
 800727a:	3714      	adds	r7, #20
 800727c:	46bd      	mov	sp, r7
 800727e:	bc80      	pop	{r7}
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	20000fa4 	.word	0x20000fa4
 8007288:	20001ba4 	.word	0x20001ba4
 800728c:	20001bac 	.word	0x20001bac
 8007290:	20001bb4 	.word	0x20001bb4
 8007294:	20001bb0 	.word	0x20001bb0
 8007298:	20001bb8 	.word	0x20001bb8

0800729c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072a4:	4b27      	ldr	r3, [pc, #156]	; (8007344 <prvInsertBlockIntoFreeList+0xa8>)
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	e002      	b.n	80072b0 <prvInsertBlockIntoFreeList+0x14>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d8f7      	bhi.n	80072aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	4413      	add	r3, r2
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d108      	bne.n	80072de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	441a      	add	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	441a      	add	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d118      	bne.n	8007324 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	4b14      	ldr	r3, [pc, #80]	; (8007348 <prvInsertBlockIntoFreeList+0xac>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d00d      	beq.n	800731a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	441a      	add	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	e008      	b.n	800732c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800731a:	4b0b      	ldr	r3, [pc, #44]	; (8007348 <prvInsertBlockIntoFreeList+0xac>)
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	e003      	b.n	800732c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	429a      	cmp	r2, r3
 8007332:	d002      	beq.n	800733a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800733a:	bf00      	nop
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	bc80      	pop	{r7}
 8007342:	4770      	bx	lr
 8007344:	20001ba4 	.word	0x20001ba4
 8007348:	20001bac 	.word	0x20001bac

0800734c <memset>:
 800734c:	4603      	mov	r3, r0
 800734e:	4402      	add	r2, r0
 8007350:	4293      	cmp	r3, r2
 8007352:	d100      	bne.n	8007356 <memset+0xa>
 8007354:	4770      	bx	lr
 8007356:	f803 1b01 	strb.w	r1, [r3], #1
 800735a:	e7f9      	b.n	8007350 <memset+0x4>

0800735c <_reclaim_reent>:
 800735c:	4b29      	ldr	r3, [pc, #164]	; (8007404 <_reclaim_reent+0xa8>)
 800735e:	b570      	push	{r4, r5, r6, lr}
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4604      	mov	r4, r0
 8007364:	4283      	cmp	r3, r0
 8007366:	d04b      	beq.n	8007400 <_reclaim_reent+0xa4>
 8007368:	69c3      	ldr	r3, [r0, #28]
 800736a:	b143      	cbz	r3, 800737e <_reclaim_reent+0x22>
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d144      	bne.n	80073fc <_reclaim_reent+0xa0>
 8007372:	69e3      	ldr	r3, [r4, #28]
 8007374:	6819      	ldr	r1, [r3, #0]
 8007376:	b111      	cbz	r1, 800737e <_reclaim_reent+0x22>
 8007378:	4620      	mov	r0, r4
 800737a:	f000 f879 	bl	8007470 <_free_r>
 800737e:	6961      	ldr	r1, [r4, #20]
 8007380:	b111      	cbz	r1, 8007388 <_reclaim_reent+0x2c>
 8007382:	4620      	mov	r0, r4
 8007384:	f000 f874 	bl	8007470 <_free_r>
 8007388:	69e1      	ldr	r1, [r4, #28]
 800738a:	b111      	cbz	r1, 8007392 <_reclaim_reent+0x36>
 800738c:	4620      	mov	r0, r4
 800738e:	f000 f86f 	bl	8007470 <_free_r>
 8007392:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007394:	b111      	cbz	r1, 800739c <_reclaim_reent+0x40>
 8007396:	4620      	mov	r0, r4
 8007398:	f000 f86a 	bl	8007470 <_free_r>
 800739c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800739e:	b111      	cbz	r1, 80073a6 <_reclaim_reent+0x4a>
 80073a0:	4620      	mov	r0, r4
 80073a2:	f000 f865 	bl	8007470 <_free_r>
 80073a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80073a8:	b111      	cbz	r1, 80073b0 <_reclaim_reent+0x54>
 80073aa:	4620      	mov	r0, r4
 80073ac:	f000 f860 	bl	8007470 <_free_r>
 80073b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80073b2:	b111      	cbz	r1, 80073ba <_reclaim_reent+0x5e>
 80073b4:	4620      	mov	r0, r4
 80073b6:	f000 f85b 	bl	8007470 <_free_r>
 80073ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80073bc:	b111      	cbz	r1, 80073c4 <_reclaim_reent+0x68>
 80073be:	4620      	mov	r0, r4
 80073c0:	f000 f856 	bl	8007470 <_free_r>
 80073c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80073c6:	b111      	cbz	r1, 80073ce <_reclaim_reent+0x72>
 80073c8:	4620      	mov	r0, r4
 80073ca:	f000 f851 	bl	8007470 <_free_r>
 80073ce:	6a23      	ldr	r3, [r4, #32]
 80073d0:	b1b3      	cbz	r3, 8007400 <_reclaim_reent+0xa4>
 80073d2:	4620      	mov	r0, r4
 80073d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80073d8:	4718      	bx	r3
 80073da:	5949      	ldr	r1, [r1, r5]
 80073dc:	b941      	cbnz	r1, 80073f0 <_reclaim_reent+0x94>
 80073de:	3504      	adds	r5, #4
 80073e0:	69e3      	ldr	r3, [r4, #28]
 80073e2:	2d80      	cmp	r5, #128	; 0x80
 80073e4:	68d9      	ldr	r1, [r3, #12]
 80073e6:	d1f8      	bne.n	80073da <_reclaim_reent+0x7e>
 80073e8:	4620      	mov	r0, r4
 80073ea:	f000 f841 	bl	8007470 <_free_r>
 80073ee:	e7c0      	b.n	8007372 <_reclaim_reent+0x16>
 80073f0:	680e      	ldr	r6, [r1, #0]
 80073f2:	4620      	mov	r0, r4
 80073f4:	f000 f83c 	bl	8007470 <_free_r>
 80073f8:	4631      	mov	r1, r6
 80073fa:	e7ef      	b.n	80073dc <_reclaim_reent+0x80>
 80073fc:	2500      	movs	r5, #0
 80073fe:	e7ef      	b.n	80073e0 <_reclaim_reent+0x84>
 8007400:	bd70      	pop	{r4, r5, r6, pc}
 8007402:	bf00      	nop
 8007404:	2000005c 	.word	0x2000005c

08007408 <__libc_init_array>:
 8007408:	b570      	push	{r4, r5, r6, lr}
 800740a:	2600      	movs	r6, #0
 800740c:	4d0c      	ldr	r5, [pc, #48]	; (8007440 <__libc_init_array+0x38>)
 800740e:	4c0d      	ldr	r4, [pc, #52]	; (8007444 <__libc_init_array+0x3c>)
 8007410:	1b64      	subs	r4, r4, r5
 8007412:	10a4      	asrs	r4, r4, #2
 8007414:	42a6      	cmp	r6, r4
 8007416:	d109      	bne.n	800742c <__libc_init_array+0x24>
 8007418:	f000 f87e 	bl	8007518 <_init>
 800741c:	2600      	movs	r6, #0
 800741e:	4d0a      	ldr	r5, [pc, #40]	; (8007448 <__libc_init_array+0x40>)
 8007420:	4c0a      	ldr	r4, [pc, #40]	; (800744c <__libc_init_array+0x44>)
 8007422:	1b64      	subs	r4, r4, r5
 8007424:	10a4      	asrs	r4, r4, #2
 8007426:	42a6      	cmp	r6, r4
 8007428:	d105      	bne.n	8007436 <__libc_init_array+0x2e>
 800742a:	bd70      	pop	{r4, r5, r6, pc}
 800742c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007430:	4798      	blx	r3
 8007432:	3601      	adds	r6, #1
 8007434:	e7ee      	b.n	8007414 <__libc_init_array+0xc>
 8007436:	f855 3b04 	ldr.w	r3, [r5], #4
 800743a:	4798      	blx	r3
 800743c:	3601      	adds	r6, #1
 800743e:	e7f2      	b.n	8007426 <__libc_init_array+0x1e>
 8007440:	080075d8 	.word	0x080075d8
 8007444:	080075d8 	.word	0x080075d8
 8007448:	080075d8 	.word	0x080075d8
 800744c:	080075dc 	.word	0x080075dc

08007450 <__retarget_lock_acquire_recursive>:
 8007450:	4770      	bx	lr

08007452 <__retarget_lock_release_recursive>:
 8007452:	4770      	bx	lr

08007454 <memcpy>:
 8007454:	440a      	add	r2, r1
 8007456:	4291      	cmp	r1, r2
 8007458:	f100 33ff 	add.w	r3, r0, #4294967295
 800745c:	d100      	bne.n	8007460 <memcpy+0xc>
 800745e:	4770      	bx	lr
 8007460:	b510      	push	{r4, lr}
 8007462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007466:	4291      	cmp	r1, r2
 8007468:	f803 4f01 	strb.w	r4, [r3, #1]!
 800746c:	d1f9      	bne.n	8007462 <memcpy+0xe>
 800746e:	bd10      	pop	{r4, pc}

08007470 <_free_r>:
 8007470:	b538      	push	{r3, r4, r5, lr}
 8007472:	4605      	mov	r5, r0
 8007474:	2900      	cmp	r1, #0
 8007476:	d040      	beq.n	80074fa <_free_r+0x8a>
 8007478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800747c:	1f0c      	subs	r4, r1, #4
 800747e:	2b00      	cmp	r3, #0
 8007480:	bfb8      	it	lt
 8007482:	18e4      	addlt	r4, r4, r3
 8007484:	f000 f83c 	bl	8007500 <__malloc_lock>
 8007488:	4a1c      	ldr	r2, [pc, #112]	; (80074fc <_free_r+0x8c>)
 800748a:	6813      	ldr	r3, [r2, #0]
 800748c:	b933      	cbnz	r3, 800749c <_free_r+0x2c>
 800748e:	6063      	str	r3, [r4, #4]
 8007490:	6014      	str	r4, [r2, #0]
 8007492:	4628      	mov	r0, r5
 8007494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007498:	f000 b838 	b.w	800750c <__malloc_unlock>
 800749c:	42a3      	cmp	r3, r4
 800749e:	d908      	bls.n	80074b2 <_free_r+0x42>
 80074a0:	6820      	ldr	r0, [r4, #0]
 80074a2:	1821      	adds	r1, r4, r0
 80074a4:	428b      	cmp	r3, r1
 80074a6:	bf01      	itttt	eq
 80074a8:	6819      	ldreq	r1, [r3, #0]
 80074aa:	685b      	ldreq	r3, [r3, #4]
 80074ac:	1809      	addeq	r1, r1, r0
 80074ae:	6021      	streq	r1, [r4, #0]
 80074b0:	e7ed      	b.n	800748e <_free_r+0x1e>
 80074b2:	461a      	mov	r2, r3
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	b10b      	cbz	r3, 80074bc <_free_r+0x4c>
 80074b8:	42a3      	cmp	r3, r4
 80074ba:	d9fa      	bls.n	80074b2 <_free_r+0x42>
 80074bc:	6811      	ldr	r1, [r2, #0]
 80074be:	1850      	adds	r0, r2, r1
 80074c0:	42a0      	cmp	r0, r4
 80074c2:	d10b      	bne.n	80074dc <_free_r+0x6c>
 80074c4:	6820      	ldr	r0, [r4, #0]
 80074c6:	4401      	add	r1, r0
 80074c8:	1850      	adds	r0, r2, r1
 80074ca:	4283      	cmp	r3, r0
 80074cc:	6011      	str	r1, [r2, #0]
 80074ce:	d1e0      	bne.n	8007492 <_free_r+0x22>
 80074d0:	6818      	ldr	r0, [r3, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	4408      	add	r0, r1
 80074d6:	6010      	str	r0, [r2, #0]
 80074d8:	6053      	str	r3, [r2, #4]
 80074da:	e7da      	b.n	8007492 <_free_r+0x22>
 80074dc:	d902      	bls.n	80074e4 <_free_r+0x74>
 80074de:	230c      	movs	r3, #12
 80074e0:	602b      	str	r3, [r5, #0]
 80074e2:	e7d6      	b.n	8007492 <_free_r+0x22>
 80074e4:	6820      	ldr	r0, [r4, #0]
 80074e6:	1821      	adds	r1, r4, r0
 80074e8:	428b      	cmp	r3, r1
 80074ea:	bf01      	itttt	eq
 80074ec:	6819      	ldreq	r1, [r3, #0]
 80074ee:	685b      	ldreq	r3, [r3, #4]
 80074f0:	1809      	addeq	r1, r1, r0
 80074f2:	6021      	streq	r1, [r4, #0]
 80074f4:	6063      	str	r3, [r4, #4]
 80074f6:	6054      	str	r4, [r2, #4]
 80074f8:	e7cb      	b.n	8007492 <_free_r+0x22>
 80074fa:	bd38      	pop	{r3, r4, r5, pc}
 80074fc:	20001cf8 	.word	0x20001cf8

08007500 <__malloc_lock>:
 8007500:	4801      	ldr	r0, [pc, #4]	; (8007508 <__malloc_lock+0x8>)
 8007502:	f7ff bfa5 	b.w	8007450 <__retarget_lock_acquire_recursive>
 8007506:	bf00      	nop
 8007508:	20001cf4 	.word	0x20001cf4

0800750c <__malloc_unlock>:
 800750c:	4801      	ldr	r0, [pc, #4]	; (8007514 <__malloc_unlock+0x8>)
 800750e:	f7ff bfa0 	b.w	8007452 <__retarget_lock_release_recursive>
 8007512:	bf00      	nop
 8007514:	20001cf4 	.word	0x20001cf4

08007518 <_init>:
 8007518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751a:	bf00      	nop
 800751c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800751e:	bc08      	pop	{r3}
 8007520:	469e      	mov	lr, r3
 8007522:	4770      	bx	lr

08007524 <_fini>:
 8007524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007526:	bf00      	nop
 8007528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800752a:	bc08      	pop	{r3}
 800752c:	469e      	mov	lr, r3
 800752e:	4770      	bx	lr
